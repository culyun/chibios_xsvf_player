
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	08004181 	.word	0x08004181
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	080002db 	.word	0x080002db
 800005c:	080002db 	.word	0x080002db
 8000060:	080002db 	.word	0x080002db
 8000064:	080002db 	.word	0x080002db
 8000068:	080002db 	.word	0x080002db
 800006c:	080002db 	.word	0x080002db
 8000070:	080002db 	.word	0x080002db
 8000074:	080002db 	.word	0x080002db
 8000078:	080002db 	.word	0x080002db
 800007c:	080002db 	.word	0x080002db
 8000080:	080002db 	.word	0x080002db
 8000084:	080002db 	.word	0x080002db
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080002db 	.word	0x080002db
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	080051b1 	.word	0x080051b1
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	080002db 	.word	0x080002db
 80000c0:	080002db 	.word	0x080002db
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	080002db 	.word	0x080002db
 80000d8:	08005011 	.word	0x08005011
 80000dc:	080002db 	.word	0x080002db
 80000e0:	080002db 	.word	0x080002db
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080002db 	.word	0x080002db
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	080002db 	.word	0x080002db
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	080002db 	.word	0x080002db
 8000124:	080002db 	.word	0x080002db
 8000128:	080002db 	.word	0x080002db
 800012c:	080002db 	.word	0x080002db
 8000130:	080002db 	.word	0x080002db
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	08005271 	.word	0x08005271
 8000150:	080002db 	.word	0x080002db
 8000154:	080002db 	.word	0x080002db
 8000158:	080002db 	.word	0x080002db
 800015c:	080002db 	.word	0x080002db
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000224:	f005 fa84 	bl	8005730 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f004 fdfa 	bl	8004e20 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f005 fa16 	bl	80056a0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f005 fa54 	bl	8005720 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f004 f8c2 	bl	8004410 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f005 ba38 	b.w	8005710 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002b4:	080067dc 	.word	0x080067dc
                ldr     r2, =__data_base__
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002bc:	20000c38 	.word	0x20000c38
                ldr     r1, =__bss_base__
 80002c0:	20000c38 	.word	0x20000c38
                ldr     r2, =__bss_end__
 80002c4:	2000b56c 	.word	0x2000b56c
                ldr     r4, =__init_array_base__
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d014 	str.w	sp, [r1, #20]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	6943      	ldr	r3, [r0, #20]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002f6:	4628      	mov	r0, r5
                blx     r4
 80002f8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002fa:	2000      	movs	r0, #0
                bl      chThdExit
 80002fc:	f003 ff50 	bl	80041a0 <chThdExit>

08000300 <_zombies>:
_zombies:       b       _zombies
 8000300:	e7fe      	b.n	8000300 <_zombies>

08000302 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000302:	f003 ff55 	bl	80041b0 <chSchDoReschedule>

08000306 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000306:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000308:	e7fe      	b.n	8000308 <_port_exit_from_isr+0x2>
	...

0800030c <memcpy>:
 800030c:	4684      	mov	ip, r0
 800030e:	ea41 0300 	orr.w	r3, r1, r0
 8000312:	f013 0303 	ands.w	r3, r3, #3
 8000316:	d16d      	bne.n	80003f4 <memcpy+0xe8>
 8000318:	3a40      	subs	r2, #64	; 0x40
 800031a:	d341      	bcc.n	80003a0 <memcpy+0x94>
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	3a40      	subs	r2, #64	; 0x40
 800039e:	d2bd      	bcs.n	800031c <memcpy+0x10>
 80003a0:	3230      	adds	r2, #48	; 0x30
 80003a2:	d311      	bcc.n	80003c8 <memcpy+0xbc>
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	3a10      	subs	r2, #16
 80003c6:	d2ed      	bcs.n	80003a4 <memcpy+0x98>
 80003c8:	320c      	adds	r2, #12
 80003ca:	d305      	bcc.n	80003d8 <memcpy+0xcc>
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a04      	subs	r2, #4
 80003d6:	d2f9      	bcs.n	80003cc <memcpy+0xc0>
 80003d8:	3204      	adds	r2, #4
 80003da:	d008      	beq.n	80003ee <memcpy+0xe2>
 80003dc:	07d2      	lsls	r2, r2, #31
 80003de:	bf1c      	itt	ne
 80003e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e8:	d301      	bcc.n	80003ee <memcpy+0xe2>
 80003ea:	880b      	ldrh	r3, [r1, #0]
 80003ec:	8003      	strh	r3, [r0, #0]
 80003ee:	4660      	mov	r0, ip
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	2a08      	cmp	r2, #8
 80003f6:	d313      	bcc.n	8000420 <memcpy+0x114>
 80003f8:	078b      	lsls	r3, r1, #30
 80003fa:	d08d      	beq.n	8000318 <memcpy+0xc>
 80003fc:	f010 0303 	ands.w	r3, r0, #3
 8000400:	d08a      	beq.n	8000318 <memcpy+0xc>
 8000402:	f1c3 0304 	rsb	r3, r3, #4
 8000406:	1ad2      	subs	r2, r2, r3
 8000408:	07db      	lsls	r3, r3, #31
 800040a:	bf1c      	itt	ne
 800040c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000410:	f800 3b01 	strbne.w	r3, [r0], #1
 8000414:	d380      	bcc.n	8000318 <memcpy+0xc>
 8000416:	f831 3b02 	ldrh.w	r3, [r1], #2
 800041a:	f820 3b02 	strh.w	r3, [r0], #2
 800041e:	e77b      	b.n	8000318 <memcpy+0xc>
 8000420:	3a04      	subs	r2, #4
 8000422:	d3d9      	bcc.n	80003d8 <memcpy+0xcc>
 8000424:	3a01      	subs	r2, #1
 8000426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800042a:	f800 3b01 	strb.w	r3, [r0], #1
 800042e:	d2f9      	bcs.n	8000424 <memcpy+0x118>
 8000430:	780b      	ldrb	r3, [r1, #0]
 8000432:	7003      	strb	r3, [r0, #0]
 8000434:	784b      	ldrb	r3, [r1, #1]
 8000436:	7043      	strb	r3, [r0, #1]
 8000438:	788b      	ldrb	r3, [r1, #2]
 800043a:	7083      	strb	r3, [r0, #2]
 800043c:	4660      	mov	r0, ip
 800043e:	4770      	bx	lr
 8000440:	eba2 0003 	sub.w	r0, r2, r3
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <strcmp>:
 8000448:	7802      	ldrb	r2, [r0, #0]
 800044a:	780b      	ldrb	r3, [r1, #0]
 800044c:	2a01      	cmp	r2, #1
 800044e:	bf28      	it	cs
 8000450:	429a      	cmpcs	r2, r3
 8000452:	d1f5      	bne.n	8000440 <memcpy+0x134>
 8000454:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000458:	ea40 0401 	orr.w	r4, r0, r1
 800045c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000460:	f06f 0c00 	mvn.w	ip, #0
 8000464:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000468:	b312      	cbz	r2, 80004b0 <strcmp+0x68>
 800046a:	ea80 0401 	eor.w	r4, r0, r1
 800046e:	f014 0f07 	tst.w	r4, #7
 8000472:	d16a      	bne.n	800054a <strcmp+0x102>
 8000474:	f000 0407 	and.w	r4, r0, #7
 8000478:	f020 0007 	bic.w	r0, r0, #7
 800047c:	f004 0503 	and.w	r5, r4, #3
 8000480:	f021 0107 	bic.w	r1, r1, #7
 8000484:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000488:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800048c:	f014 0f04 	tst.w	r4, #4
 8000490:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000494:	fa0c f405 	lsl.w	r4, ip, r5
 8000498:	ea62 0204 	orn	r2, r2, r4
 800049c:	ea66 0604 	orn	r6, r6, r4
 80004a0:	d00a      	beq.n	80004b8 <strcmp+0x70>
 80004a2:	ea63 0304 	orn	r3, r3, r4
 80004a6:	4662      	mov	r2, ip
 80004a8:	ea67 0704 	orn	r7, r7, r4
 80004ac:	4666      	mov	r6, ip
 80004ae:	e003      	b.n	80004b8 <strcmp+0x70>
 80004b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80004b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80004b8:	fa82 f54c 	uadd8	r5, r2, ip
 80004bc:	ea82 0406 	eor.w	r4, r2, r6
 80004c0:	faa4 f48c 	sel	r4, r4, ip
 80004c4:	bb6c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004c6:	fa83 f54c 	uadd8	r5, r3, ip
 80004ca:	ea83 0507 	eor.w	r5, r3, r7
 80004ce:	faa5 f58c 	sel	r5, r5, ip
 80004d2:	b995      	cbnz	r5, 80004fa <strcmp+0xb2>
 80004d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004dc:	fa82 f54c 	uadd8	r5, r2, ip
 80004e0:	ea82 0406 	eor.w	r4, r2, r6
 80004e4:	faa4 f48c 	sel	r4, r4, ip
 80004e8:	fa83 f54c 	uadd8	r5, r3, ip
 80004ec:	ea83 0507 	eor.w	r5, r3, r7
 80004f0:	faa5 f58c 	sel	r5, r5, ip
 80004f4:	4325      	orrs	r5, r4
 80004f6:	d0db      	beq.n	80004b0 <strcmp+0x68>
 80004f8:	b99c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004fa:	ba2d      	rev	r5, r5
 80004fc:	fab5 f485 	clz	r4, r5
 8000500:	f024 0407 	bic.w	r4, r4, #7
 8000504:	fa27 f104 	lsr.w	r1, r7, r4
 8000508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800050c:	fa23 f304 	lsr.w	r3, r3, r4
 8000510:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000514:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000518:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800051c:	eba0 0001 	sub.w	r0, r0, r1
 8000520:	4770      	bx	lr
 8000522:	ba24      	rev	r4, r4
 8000524:	fab4 f484 	clz	r4, r4
 8000528:	f024 0407 	bic.w	r4, r4, #7
 800052c:	fa26 f104 	lsr.w	r1, r6, r4
 8000530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000534:	fa22 f204 	lsr.w	r2, r2, r4
 8000538:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800053c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000540:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000544:	eba0 0001 	sub.w	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	f014 0f03 	tst.w	r4, #3
 800054e:	d13c      	bne.n	80005ca <strcmp+0x182>
 8000550:	f010 0403 	ands.w	r4, r0, #3
 8000554:	d128      	bne.n	80005a8 <strcmp+0x160>
 8000556:	f850 2b08 	ldr.w	r2, [r0], #8
 800055a:	f851 3b08 	ldr.w	r3, [r1], #8
 800055e:	fa82 f54c 	uadd8	r5, r2, ip
 8000562:	ea82 0503 	eor.w	r5, r2, r3
 8000566:	faa5 f58c 	sel	r5, r5, ip
 800056a:	b95d      	cbnz	r5, 8000584 <strcmp+0x13c>
 800056c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000574:	fa82 f54c 	uadd8	r5, r2, ip
 8000578:	ea82 0503 	eor.w	r5, r2, r3
 800057c:	faa5 f58c 	sel	r5, r5, ip
 8000580:	2d00      	cmp	r5, #0
 8000582:	d0e8      	beq.n	8000556 <strcmp+0x10e>
 8000584:	ba2d      	rev	r5, r5
 8000586:	fab5 f485 	clz	r4, r5
 800058a:	f024 0407 	bic.w	r4, r4, #7
 800058e:	fa23 f104 	lsr.w	r1, r3, r4
 8000592:	fa22 f204 	lsr.w	r2, r2, r4
 8000596:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800059a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800059e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80005a2:	eba0 0001 	sub.w	r0, r0, r1
 80005a6:	4770      	bx	lr
 80005a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80005ac:	f020 0003 	bic.w	r0, r0, #3
 80005b0:	f850 2b08 	ldr.w	r2, [r0], #8
 80005b4:	f021 0103 	bic.w	r1, r1, #3
 80005b8:	f851 3b08 	ldr.w	r3, [r1], #8
 80005bc:	fa0c f404 	lsl.w	r4, ip, r4
 80005c0:	ea62 0204 	orn	r2, r2, r4
 80005c4:	ea63 0304 	orn	r3, r3, r4
 80005c8:	e7c9      	b.n	800055e <strcmp+0x116>
 80005ca:	f010 0403 	ands.w	r4, r0, #3
 80005ce:	d01a      	beq.n	8000606 <strcmp+0x1be>
 80005d0:	eba1 0104 	sub.w	r1, r1, r4
 80005d4:	f020 0003 	bic.w	r0, r0, #3
 80005d8:	07e4      	lsls	r4, r4, #31
 80005da:	f850 2b04 	ldr.w	r2, [r0], #4
 80005de:	d006      	beq.n	80005ee <strcmp+0x1a6>
 80005e0:	d20f      	bcs.n	8000602 <strcmp+0x1ba>
 80005e2:	788b      	ldrb	r3, [r1, #2]
 80005e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	d106      	bne.n	80005fa <strcmp+0x1b2>
 80005ec:	b12b      	cbz	r3, 80005fa <strcmp+0x1b2>
 80005ee:	78cb      	ldrb	r3, [r1, #3]
 80005f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	d100      	bne.n	80005fa <strcmp+0x1b2>
 80005f8:	b91b      	cbnz	r3, 8000602 <strcmp+0x1ba>
 80005fa:	4620      	mov	r0, r4
 80005fc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000600:	4770      	bx	lr
 8000602:	f101 0104 	add.w	r1, r1, #4
 8000606:	f850 2b04 	ldr.w	r2, [r0], #4
 800060a:	07cc      	lsls	r4, r1, #31
 800060c:	f021 0103 	bic.w	r1, r1, #3
 8000610:	f851 3b04 	ldr.w	r3, [r1], #4
 8000614:	d848      	bhi.n	80006a8 <strcmp+0x260>
 8000616:	d224      	bcs.n	8000662 <strcmp+0x21a>
 8000618:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800061c:	fa82 f54c 	uadd8	r5, r2, ip
 8000620:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000624:	faa5 f58c 	sel	r5, r5, ip
 8000628:	d10a      	bne.n	8000640 <strcmp+0x1f8>
 800062a:	b965      	cbnz	r5, 8000646 <strcmp+0x1fe>
 800062c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000630:	ea84 0402 	eor.w	r4, r4, r2
 8000634:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000638:	d10e      	bne.n	8000658 <strcmp+0x210>
 800063a:	f850 2b04 	ldr.w	r2, [r0], #4
 800063e:	e7eb      	b.n	8000618 <strcmp+0x1d0>
 8000640:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000644:	e055      	b.n	80006f2 <strcmp+0x2aa>
 8000646:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800064a:	d14d      	bne.n	80006e8 <strcmp+0x2a0>
 800064c:	7808      	ldrb	r0, [r1, #0]
 800064e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000652:	f1c0 0000 	rsb	r0, r0, #0
 8000656:	4770      	bx	lr
 8000658:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800065c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000660:	e047      	b.n	80006f2 <strcmp+0x2aa>
 8000662:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000666:	fa82 f54c 	uadd8	r5, r2, ip
 800066a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800066e:	faa5 f58c 	sel	r5, r5, ip
 8000672:	d10a      	bne.n	800068a <strcmp+0x242>
 8000674:	b965      	cbnz	r5, 8000690 <strcmp+0x248>
 8000676:	f851 3b04 	ldr.w	r3, [r1], #4
 800067a:	ea84 0402 	eor.w	r4, r4, r2
 800067e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000682:	d10c      	bne.n	800069e <strcmp+0x256>
 8000684:	f850 2b04 	ldr.w	r2, [r0], #4
 8000688:	e7eb      	b.n	8000662 <strcmp+0x21a>
 800068a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800068e:	e030      	b.n	80006f2 <strcmp+0x2aa>
 8000690:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000694:	d128      	bne.n	80006e8 <strcmp+0x2a0>
 8000696:	880b      	ldrh	r3, [r1, #0]
 8000698:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800069c:	e029      	b.n	80006f2 <strcmp+0x2aa>
 800069e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80006a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80006a6:	e024      	b.n	80006f2 <strcmp+0x2aa>
 80006a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80006ac:	fa82 f54c 	uadd8	r5, r2, ip
 80006b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80006b4:	faa5 f58c 	sel	r5, r5, ip
 80006b8:	d10a      	bne.n	80006d0 <strcmp+0x288>
 80006ba:	b965      	cbnz	r5, 80006d6 <strcmp+0x28e>
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	ea84 0402 	eor.w	r4, r4, r2
 80006c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006c8:	d109      	bne.n	80006de <strcmp+0x296>
 80006ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ce:	e7eb      	b.n	80006a8 <strcmp+0x260>
 80006d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006d4:	e00d      	b.n	80006f2 <strcmp+0x2aa>
 80006d6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006da:	d105      	bne.n	80006e8 <strcmp+0x2a0>
 80006dc:	680b      	ldr	r3, [r1, #0]
 80006de:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006e6:	e004      	b.n	80006f2 <strcmp+0x2aa>
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006f0:	4770      	bx	lr
 80006f2:	ba12      	rev	r2, r2
 80006f4:	ba1b      	rev	r3, r3
 80006f6:	fa82 f44c 	uadd8	r4, r2, ip
 80006fa:	ea82 0403 	eor.w	r4, r2, r3
 80006fe:	faa4 f58c 	sel	r5, r4, ip
 8000702:	fab5 f485 	clz	r4, r5
 8000706:	fa02 f204 	lsl.w	r2, r2, r4
 800070a:	fa03 f304 	lsl.w	r3, r3, r4
 800070e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000712:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000716:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800071a:	4770      	bx	lr
	...

08000740 <strlen>:
 8000740:	f890 f000 	pld	[r0]
 8000744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000748:	f020 0107 	bic.w	r1, r0, #7
 800074c:	f06f 0c00 	mvn.w	ip, #0
 8000750:	f010 0407 	ands.w	r4, r0, #7
 8000754:	f891 f020 	pld	[r1, #32]
 8000758:	f040 8049 	bne.w	80007ee <strlen+0xae>
 800075c:	f04f 0400 	mov.w	r4, #0
 8000760:	f06f 0007 	mvn.w	r0, #7
 8000764:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000768:	f891 f040 	pld	[r1, #64]	; 0x40
 800076c:	f100 0008 	add.w	r0, r0, #8
 8000770:	fa82 f24c 	uadd8	r2, r2, ip
 8000774:	faa4 f28c 	sel	r2, r4, ip
 8000778:	fa83 f34c 	uadd8	r3, r3, ip
 800077c:	faa2 f38c 	sel	r3, r2, ip
 8000780:	bb4b      	cbnz	r3, 80007d6 <strlen+0x96>
 8000782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000786:	fa82 f24c 	uadd8	r2, r2, ip
 800078a:	f100 0008 	add.w	r0, r0, #8
 800078e:	faa4 f28c 	sel	r2, r4, ip
 8000792:	fa83 f34c 	uadd8	r3, r3, ip
 8000796:	faa2 f38c 	sel	r3, r2, ip
 800079a:	b9e3      	cbnz	r3, 80007d6 <strlen+0x96>
 800079c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007a0:	fa82 f24c 	uadd8	r2, r2, ip
 80007a4:	f100 0008 	add.w	r0, r0, #8
 80007a8:	faa4 f28c 	sel	r2, r4, ip
 80007ac:	fa83 f34c 	uadd8	r3, r3, ip
 80007b0:	faa2 f38c 	sel	r3, r2, ip
 80007b4:	b97b      	cbnz	r3, 80007d6 <strlen+0x96>
 80007b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007ba:	f101 0120 	add.w	r1, r1, #32
 80007be:	fa82 f24c 	uadd8	r2, r2, ip
 80007c2:	f100 0008 	add.w	r0, r0, #8
 80007c6:	faa4 f28c 	sel	r2, r4, ip
 80007ca:	fa83 f34c 	uadd8	r3, r3, ip
 80007ce:	faa2 f38c 	sel	r3, r2, ip
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0c6      	beq.n	8000764 <strlen+0x24>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	bf04      	itt	eq
 80007da:	3004      	addeq	r0, #4
 80007dc:	461a      	moveq	r2, r3
 80007de:	ba12      	rev	r2, r2
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80007e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80007ec:	4770      	bx	lr
 80007ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007f2:	f004 0503 	and.w	r5, r4, #3
 80007f6:	f1c4 0000 	rsb	r0, r4, #0
 80007fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80007fe:	f014 0f04 	tst.w	r4, #4
 8000802:	f891 f040 	pld	[r1, #64]	; 0x40
 8000806:	fa0c f505 	lsl.w	r5, ip, r5
 800080a:	ea62 0205 	orn	r2, r2, r5
 800080e:	bf1c      	itt	ne
 8000810:	ea63 0305 	ornne	r3, r3, r5
 8000814:	4662      	movne	r2, ip
 8000816:	f04f 0400 	mov.w	r4, #0
 800081a:	e7a9      	b.n	8000770 <strlen+0x30>
 800081c:	0000      	movs	r0, r0
	...

08000820 <otg_txfifo_handler.constprop.0>:
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <otg_txfifo_handler.constprop.0+0x8c>)
 8000822:	eb02 0380 	add.w	r3, r2, r0, lsl #2
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8000826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800082a:	68d9      	ldr	r1, [r3, #12]
 800082c:	f8d2 9054 	ldr.w	r9, [r2, #84]	; 0x54
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8000830:	4680      	mov	r8, r0
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000832:	6948      	ldr	r0, [r1, #20]
 8000834:	e9d0 3700 	ldrd	r3, r7, [r0]
 8000838:	42bb      	cmp	r3, r7
 800083a:	d928      	bls.n	800088e <otg_txfifo_handler.constprop.0+0x6e>
      return false;

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800083c:	f108 0401 	add.w	r4, r8, #1
    if (n > usbp->epc[ep]->in_maxsize)
 8000840:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000844:	eb09 3404 	add.w	r4, r9, r4, lsl #12
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8000848:	eb09 1c48 	add.w	ip, r9, r8, lsl #5
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800084c:	1bde      	subs	r6, r3, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800084e:	f8dc 2918 	ldr.w	r2, [ip, #2328]	; 0x918
 8000852:	4576      	cmp	r6, lr
 8000854:	bf28      	it	cs
 8000856:	4676      	movcs	r6, lr
 8000858:	b293      	uxth	r3, r2
 800085a:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800085e:	d821      	bhi.n	80008a4 <otg_txfifo_handler.constprop.0+0x84>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000860:	6885      	ldr	r5, [r0, #8]
    if (n <= 4) {
 8000862:	2e04      	cmp	r6, #4
    *fifop = *((uint32_t *)buf);
 8000864:	682b      	ldr	r3, [r5, #0]
 8000866:	6023      	str	r3, [r4, #0]
    if (n <= 4) {
 8000868:	d90a      	bls.n	8000880 <otg_txfifo_handler.constprop.0+0x60>
 800086a:	1f71      	subs	r1, r6, #5
 800086c:	f021 0103 	bic.w	r1, r1, #3
 8000870:	3104      	adds	r1, #4
 8000872:	4429      	add	r1, r5
 8000874:	462b      	mov	r3, r5
    *fifop = *((uint32_t *)buf);
 8000876:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800087a:	6022      	str	r2, [r4, #0]
    if (n <= 4) {
 800087c:	4299      	cmp	r1, r3
 800087e:	d1fa      	bne.n	8000876 <otg_txfifo_handler.constprop.0+0x56>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000880:	6803      	ldr	r3, [r0, #0]
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
    usbp->epc[ep]->in_state->txcnt += n;
 8000882:	4437      	add	r7, r6
    usbp->epc[ep]->in_state->txbuf += n;
 8000884:	4435      	add	r5, r6
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000886:	42bb      	cmp	r3, r7
    usbp->epc[ep]->in_state->txcnt += n;
 8000888:	e9c0 7501 	strd	r7, r5, [r0, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800088c:	d8de      	bhi.n	800084c <otg_txfifo_handler.constprop.0+0x2c>
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 800088e:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
 8000892:	2001      	movs	r0, #1
 8000894:	fa00 f808 	lsl.w	r8, r0, r8
 8000898:	ea23 0308 	bic.w	r3, r3, r8
 800089c:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
  }
}
 80008a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
 80008a4:	2000      	movs	r0, #0
}
 80008a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008aa:	bf00      	nop
 80008ac:	2000132c 	.word	0x2000132c

080008b0 <wait_nops.constprop.0>:
uint8_t data_mask[MAX_SIZE];
uint8_t tdi_value[MAX_SIZE];
uint8_t tdo_mask[MAX_SIZE];
uint8_t tdo_expected[MAX_SIZE];

void wait_nops(uint32_t t){
 80008b0:	2304      	movs	r3, #4
	uint32_t i;
	for (i=0; i<t; i++){
    	__NOP();
 80008b2:	bf00      	nop
    	__NOP();
 80008b4:	bf00      	nop
    	__NOP();
 80008b6:	bf00      	nop
    	__NOP();
 80008b8:	bf00      	nop
    	__NOP();
 80008ba:	bf00      	nop
    	__NOP();
 80008bc:	bf00      	nop
    	__NOP();
 80008be:	bf00      	nop
    	__NOP();
 80008c0:	bf00      	nop
    	__NOP();
 80008c2:	bf00      	nop
    	__NOP();
 80008c4:	bf00      	nop
    	__NOP();
 80008c6:	bf00      	nop
    	__NOP();
 80008c8:	bf00      	nop
    	__NOP();
 80008ca:	bf00      	nop
    	__NOP();
 80008cc:	bf00      	nop
    	__NOP();
 80008ce:	bf00      	nop
    	__NOP();
 80008d0:	bf00      	nop
    	__NOP();
 80008d2:	bf00      	nop
    	__NOP();
 80008d4:	bf00      	nop
    	__NOP();
 80008d6:	bf00      	nop
    	__NOP();
 80008d8:	bf00      	nop
    	__NOP();
 80008da:	bf00      	nop
	for (i=0; i<t; i++){
 80008dc:	3b01      	subs	r3, #1
 80008de:	d1e8      	bne.n	80008b2 <wait_nops.constprop.0+0x2>
	}
}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
	...

080008f0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80008f0:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80008f2:	2320      	movs	r3, #32
 80008f4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80008f8:	4c0b      	ldr	r4, [pc, #44]	; (8000928 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80008fa:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80008fe:	4249      	negs	r1, r1
 8000900:	1a28      	subs	r0, r5, r0
 8000902:	4008      	ands	r0, r1
  prev = p - offset;
 8000904:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000906:	429a      	cmp	r2, r3
 8000908:	d307      	bcc.n	800091a <chCoreAllocFromTop+0x2a>
 800090a:	4295      	cmp	r5, r2
 800090c:	d305      	bcc.n	800091a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800090e:	6062      	str	r2, [r4, #4]
 8000910:	2300      	movs	r3, #0
 8000912:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000916:	bc30      	pop	{r4, r5}
 8000918:	4770      	bx	lr
    return NULL;
 800091a:	2000      	movs	r0, #0
 800091c:	2300      	movs	r3, #0
 800091e:	f383 8811 	msr	BASEPRI, r3
}
 8000922:	bc30      	pop	{r4, r5}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20001548 	.word	0x20001548
 800092c:	00000000 	.word	0x00000000

08000930 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000930:	4a02      	ldr	r2, [pc, #8]	; (800093c <notify2+0xc>)
 8000932:	68d3      	ldr	r3, [r2, #12]
 8000934:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000938:	60d3      	str	r3, [r2, #12]
}
 800093a:	4770      	bx	lr
 800093c:	40004400 	.word	0x40004400

08000940 <state_step.part.0>:

void state_ack(uint8_t tms){
	if (tms==0) {
		current_state = tms_transitions[current_state]&0xf;
	} else {
		current_state = (tms_transitions[current_state]>>4)&0xf;
 8000940:	4a03      	ldr	r2, [pc, #12]	; (8000950 <state_step.part.0+0x10>)
 8000942:	4904      	ldr	r1, [pc, #16]	; (8000954 <state_step.part.0+0x14>)
 8000944:	7813      	ldrb	r3, [r2, #0]
 8000946:	5ccb      	ldrb	r3, [r1, r3]
 8000948:	091b      	lsrs	r3, r3, #4
 800094a:	7013      	strb	r3, [r2, #0]

void state_step(uint8_t tms){
	set_port(TMS,tms);
	pulse_clock();
	state_ack(tms);
}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20001567 	.word	0x20001567
 8000954:	08006568 	.word	0x08006568
	...

08000960 <state_ack.part.0>:
		current_state = tms_transitions[current_state]&0xf;
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <state_ack.part.0+0x10>)
 8000962:	4904      	ldr	r1, [pc, #16]	; (8000974 <state_ack.part.0+0x14>)
 8000964:	7813      	ldrb	r3, [r2, #0]
 8000966:	5ccb      	ldrb	r3, [r1, r3]
 8000968:	f003 030f 	and.w	r3, r3, #15
 800096c:	7013      	strb	r3, [r2, #0]
}
 800096e:	4770      	bx	lr
 8000970:	20001567 	.word	0x20001567
 8000974:	08006568 	.word	0x08006568
	...

08000980 <set_port.part.0>:
			XSVF_GPIO_BSRR = BSRR_TMS | BSRR_TDI | (1 << (TCK_Pin+16));
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <set_port.part.0+0x14>)
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <set_port.part.0+0x18>)
 8000984:	6811      	ldr	r1, [r2, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <set_port.part.0+0x1c>)
 800098a:	430b      	orrs	r3, r1
 800098c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000990:	6193      	str	r3, [r2, #24]
}
 8000992:	4770      	bx	lr
 8000994:	20000c38 	.word	0x20000c38
 8000998:	20000c3c 	.word	0x20000c3c
 800099c:	40020800 	.word	0x40020800

080009a0 <delay>:
void delay(int32_t microsec){
 80009a0:	b538      	push	{r3, r4, r5, lr}
	while (--microsec > 0) {
 80009a2:	3801      	subs	r0, #1
 80009a4:	f7ff ffec 	bl	8000980 <set_port.part.0>
 80009a8:	2800      	cmp	r0, #0
 80009aa:	dd0b      	ble.n	80009c4 <delay+0x24>
			XSVF_GPIO_BSRR = (1 << TCK_Pin);
 80009ac:	4d06      	ldr	r5, [pc, #24]	; (80009c8 <delay+0x28>)
 80009ae:	f44f 4480 	mov.w	r4, #16384	; 0x4000
		wait_nops(4);
 80009b2:	f7ff ff7d 	bl	80008b0 <wait_nops.constprop.0>
			XSVF_GPIO_BSRR = (1 << TCK_Pin);
 80009b6:	61ac      	str	r4, [r5, #24]
		wait_nops(4);
 80009b8:	f7ff ff7a 	bl	80008b0 <wait_nops.constprop.0>
		if (val == 0) {
 80009bc:	f7ff ffe0 	bl	8000980 <set_port.part.0>
	while (--microsec > 0) {
 80009c0:	3801      	subs	r0, #1
 80009c2:	d1f6      	bne.n	80009b2 <delay+0x12>
}
 80009c4:	bd38      	pop	{r3, r4, r5, pc}
 80009c6:	bf00      	nop
 80009c8:	40020800 	.word	0x40020800
 80009cc:	00000000 	.word	0x00000000

080009d0 <pulse_clock>:
void pulse_clock(void){
 80009d0:	b508      	push	{r3, lr}
 80009d2:	f7ff ffd5 	bl	8000980 <set_port.part.0>
			XSVF_GPIO_BSRR = (1 << TCK_Pin);
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <pulse_clock+0x20>)
 80009d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009dc:	619a      	str	r2, [r3, #24]
	wait_nops(4);
 80009de:	f7ff ff67 	bl	80008b0 <wait_nops.constprop.0>
		if (val == 0) {
 80009e2:	f7ff ffcd 	bl	8000980 <set_port.part.0>
}
 80009e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	wait_nops(4);
 80009ea:	f7ff bf61 	b.w	80008b0 <wait_nops.constprop.0>
 80009ee:	bf00      	nop
 80009f0:	40020800 	.word	0x40020800
	...

08000a00 <shift.constprop.0>:
}

/* output dataVal onto the TDI ports; store the TDO value returned */
static void shift(int flags, uint8_t *data, uint8_t *tdo, uint32_t length){
	int i,j;
	int n_bytes = BYTES(length);
 8000a00:	1dd3      	adds	r3, r2, #7

	for (i=0; i<n_bytes; i++){
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	d053      	beq.n	8000aae <shift.constprop.0+0xae>
static void shift(int flags, uint8_t *data, uint8_t *tdo, uint32_t length){
 8000a06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	4693      	mov	fp, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <shift.constprop.0+0xb0>)
 8000a12:	4f28      	ldr	r7, [pc, #160]	; (8000ab4 <shift.constprop.0+0xb4>)
	return (palReadLine(TDO_PIN) == PAL_HIGH) ? 1 : 0 ;
 8000a14:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8000ac0 <shift.constprop.0+0xc0>
 8000a18:	9200      	str	r2, [sp, #0]
 8000a1a:	460e      	mov	r6, r1
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	4688      	mov	r8, r1
 8000a20:	465d      	mov	r5, fp
		//chprintf(dbg, "Shift Byte: %02X\r\n", i);
		uint8_t byte = data[i];
 8000a22:	9b00      	ldr	r3, [sp, #0]
		uint8_t in = 0;
 8000a24:	2400      	movs	r4, #0
		uint8_t byte = data[i];
 8000a26:	f813 ab01 	ldrb.w	sl, [r3], #1
 8000a2a:	9300      	str	r3, [sp, #0]
		for (j=0;j<8;j++){
 8000a2c:	46a3      	mov	fp, r4
 8000a2e:	e005      	b.n	8000a3c <shift.constprop.0+0x3c>
			/* on the last bit, set TMS to 1 so that we go to the EXIT state */
			if ((length==1) && (flags&SDR_END)) {
				set_port(TMS,1);
				state_ack(1);
			}
			if (length>0) {
 8000a30:	b9b5      	cbnz	r5, 8000a60 <shift.constprop.0+0x60>
		for (j=0;j<8;j++){
 8000a32:	f10b 0b01 	add.w	fp, fp, #1
 8000a36:	f1bb 0f08 	cmp.w	fp, #8
 8000a3a:	d02d      	beq.n	8000a98 <shift.constprop.0+0x98>
			if ((length==1) && (flags&SDR_END)) {
 8000a3c:	2d01      	cmp	r5, #1
 8000a3e:	d1f7      	bne.n	8000a30 <shift.constprop.0+0x30>
 8000a40:	f010 0f02 	tst.w	r0, #2
		current_state = (tms_transitions[current_state]>>4)&0xf;
 8000a44:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8000ac4 <shift.constprop.0+0xc4>
	if (p == TMS && val == 1) BSRR_TMS = (1 << TMS_Pin);
 8000a48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
			if ((length==1) && (flags&SDR_END)) {
 8000a4c:	d008      	beq.n	8000a60 <shift.constprop.0+0x60>
		current_state = (tms_transitions[current_state]>>4)&0xf;
 8000a4e:	491a      	ldr	r1, [pc, #104]	; (8000ab8 <shift.constprop.0+0xb8>)
	if (p == TMS && val == 1) BSRR_TMS = (1 << TMS_Pin);
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <shift.constprop.0+0xbc>)
		current_state = (tms_transitions[current_state]>>4)&0xf;
 8000a52:	7809      	ldrb	r1, [r1, #0]
	if (p == TMS && val == 1) BSRR_TMS = (1 << TMS_Pin);
 8000a54:	601a      	str	r2, [r3, #0]
		current_state = (tms_transitions[current_state]>>4)&0xf;
 8000a56:	f81c 3001 	ldrb.w	r3, [ip, r1]
 8000a5a:	4917      	ldr	r1, [pc, #92]	; (8000ab8 <shift.constprop.0+0xb8>)
 8000a5c:	091b      	lsrs	r3, r3, #4
 8000a5e:	700b      	strb	r3, [r1, #0]
				if (tdo) {
 8000a60:	b13e      	cbz	r6, 8000a72 <shift.constprop.0+0x72>
	return (palReadLine(TDO_PIN) == PAL_HIGH) ? 1 : 0 ;
 8000a62:	f8d9 3010 	ldr.w	r3, [r9, #16]
					in |= read_tdo()<<j;
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	fa03 f30b 	lsl.w	r3, r3, fp
 8000a6e:	431c      	orrs	r4, r3
 8000a70:	b2e4      	uxtb	r4, r4
	if (p == TDI && val == 0) BSRR_TDI = (1 << (TDI_Pin+16));
 8000a72:	f01a 0f01 	tst.w	sl, #1
 8000a76:	bf14      	ite	ne
 8000a78:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8000a7c:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
		for (j=0;j<8;j++){
 8000a80:	f10b 0b01 	add.w	fp, fp, #1
 8000a84:	603b      	str	r3, [r7, #0]
					//chprintf(dbg, "TDO: %d\r\n", read_tdo());
				}
				set_port(TDI, byte&1);
				byte >>= 1;

				pulse_clock();
 8000a86:	f7ff ffa3 	bl	80009d0 <pulse_clock>
		for (j=0;j<8;j++){
 8000a8a:	f1bb 0f08 	cmp.w	fp, #8
				byte >>= 1;
 8000a8e:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
				length--;
 8000a92:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		for (j=0;j<8;j++){
 8000a96:	d1d1      	bne.n	8000a3c <shift.constprop.0+0x3c>
			}
		}
		if (tdo)
 8000a98:	b10e      	cbz	r6, 8000a9e <shift.constprop.0+0x9e>
			tdo[i] = in;
 8000a9a:	f888 4000 	strb.w	r4, [r8]
	for (i=0; i<n_bytes; i++){
 8000a9e:	9b01      	ldr	r3, [sp, #4]
 8000aa0:	f108 0801 	add.w	r8, r8, #1
 8000aa4:	4598      	cmp	r8, r3
 8000aa6:	d1bc      	bne.n	8000a22 <shift.constprop.0+0x22>
	}
}
 8000aa8:	b003      	add	sp, #12
 8000aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aae:	4770      	bx	lr
 8000ab0:	200017fc 	.word	0x200017fc
 8000ab4:	20000c38 	.word	0x20000c38
 8000ab8:	20001567 	.word	0x20001567
 8000abc:	20000c3c 	.word	0x20000c3c
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	08006568 	.word	0x08006568
	...

08000ad0 <state_goto.part.0>:
void state_goto(uint8_t state){
 8000ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		while (current_state != state) {
 8000ad4:	4d12      	ldr	r5, [pc, #72]	; (8000b20 <state_goto.part.0+0x50>)
 8000ad6:	782b      	ldrb	r3, [r5, #0]
 8000ad8:	4298      	cmp	r0, r3
 8000ada:	d01e      	beq.n	8000b1a <state_goto.part.0+0x4a>
 8000adc:	2401      	movs	r4, #1
 8000ade:	4f11      	ldr	r7, [pc, #68]	; (8000b24 <state_goto.part.0+0x54>)
 8000ae0:	4e11      	ldr	r6, [pc, #68]	; (8000b28 <state_goto.part.0+0x58>)
 8000ae2:	4084      	lsls	r4, r0
	if (p == TMS && val == 1) BSRR_TMS = (1 << TMS_Pin);
 8000ae4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	if (p == TMS && val == 0) BSRR_TMS = (1 << (TMS_Pin+16));
 8000ae8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8000aec:	e008      	b.n	8000b00 <state_goto.part.0+0x30>
 8000aee:	f8c6 8000 	str.w	r8, [r6]
	pulse_clock();
 8000af2:	f7ff ff6d 	bl	80009d0 <pulse_clock>
	if (tms==0) {
 8000af6:	f7ff ff33 	bl	8000960 <state_ack.part.0>
		while (current_state != state) {
 8000afa:	782b      	ldrb	r3, [r5, #0]
 8000afc:	4283      	cmp	r3, r0
 8000afe:	d00c      	beq.n	8000b1a <state_goto.part.0+0x4a>
			uint8_t tms = (tms_map[current_state]>>state) & 1;
 8000b00:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
	if (p == TMS && val == 0) BSRR_TMS = (1 << (TMS_Pin+16));
 8000b04:	4223      	tst	r3, r4
 8000b06:	d0f2      	beq.n	8000aee <state_goto.part.0+0x1e>
	if (p == TMS && val == 1) BSRR_TMS = (1 << TMS_Pin);
 8000b08:	f8c6 9000 	str.w	r9, [r6]
	pulse_clock();
 8000b0c:	f7ff ff60 	bl	80009d0 <pulse_clock>
	if (tms==0) {
 8000b10:	f7ff ff16 	bl	8000940 <state_step.part.0>
		while (current_state != state) {
 8000b14:	782b      	ldrb	r3, [r5, #0]
 8000b16:	4283      	cmp	r3, r0
 8000b18:	d1f2      	bne.n	8000b00 <state_goto.part.0+0x30>
}
 8000b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b1e:	bf00      	nop
 8000b20:	20001567 	.word	0x20001567
 8000b24:	08006548 	.word	0x08006548
 8000b28:	20000c3c 	.word	0x20000c3c
 8000b2c:	00000000 	.word	0x00000000

08000b30 <sdr>:

static int sdr(int flags){
 8000b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int failTimes=0;
	uint8_t tdo_actual[MAX_SIZE];

	if (flags&SDR_BEGIN) {
 8000b34:	07c2      	lsls	r2, r0, #31
static int sdr(int flags){
 8000b36:	b08b      	sub	sp, #44	; 0x2c
 8000b38:	4606      	mov	r6, r0
	if (flags&SDR_BEGIN) {
 8000b3a:	d464      	bmi.n	8000c06 <sdr+0xd6>
 8000b3c:	4b36      	ldr	r3, [pc, #216]	; (8000c18 <sdr+0xe8>)
 8000b3e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8000c28 <sdr+0xf8>
 8000b42:	681f      	ldr	r7, [r3, #0]
			else{
				/* TDO did not match the value expected */
				//chprintf(dbg, "TDO didn't match.\r\n");
				failTimes++;
				/* update failure count */
				if (failTimes>repeat){
 8000b44:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8000c2c <sdr+0xfc>
	if (p == TMS && val == 0) BSRR_TMS = (1 << (TMS_Pin+16));
 8000b48:	4c34      	ldr	r4, [pc, #208]	; (8000c1c <sdr+0xec>)
			for (i=0; i<BYTES(sdr_size); i++){
 8000b4a:	f107 0b07 	add.w	fp, r7, #7
 8000b4e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	f006 0310 	and.w	r3, r6, #16
 8000b58:	eb08 0bdb 	add.w	fp, r8, fp, lsr #3
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2500      	movs	r5, #0
 8000b60:	46ba      	mov	sl, r7
		shift(flags, tdi_value, tdo_actual, sdr_size);
 8000b62:	4652      	mov	r2, sl
 8000b64:	a902      	add	r1, sp, #8
 8000b66:	4630      	mov	r0, r6
 8000b68:	f7ff ff4a 	bl	8000a00 <shift.constprop.0>
		if (flags&SDR_CHECK){
 8000b6c:	9b00      	ldr	r3, [sp, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d03b      	beq.n	8000bea <sdr+0xba>
			for (i=0; i<BYTES(sdr_size); i++){
 8000b72:	9b01      	ldr	r3, [sp, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d038      	beq.n	8000bea <sdr+0xba>
 8000b78:	4f29      	ldr	r7, [pc, #164]	; (8000c20 <sdr+0xf0>)
 8000b7a:	a802      	add	r0, sp, #8
 8000b7c:	4641      	mov	r1, r8
 8000b7e:	e001      	b.n	8000b84 <sdr+0x54>
 8000b80:	4559      	cmp	r1, fp
 8000b82:	d032      	beq.n	8000bea <sdr+0xba>
				expected = tdo_expected[i] & tdo_mask[i];
 8000b84:	f817 3b01 	ldrb.w	r3, [r7], #1
 8000b88:	f811 2b01 	ldrb.w	r2, [r1], #1
				actual = tdo_actual[i] & tdo_mask[i];
 8000b8c:	f810 cb01 	ldrb.w	ip, [r0], #1
				if (expected!=actual) {
 8000b90:	401a      	ands	r2, r3
 8000b92:	ea03 030c 	and.w	r3, r3, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d0f2      	beq.n	8000b80 <sdr+0x50>
				if (failTimes>repeat){
 8000b9a:	f899 3000 	ldrb.w	r3, [r9]
				failTimes++;
 8000b9e:	3501      	adds	r5, #1
				if (failTimes>repeat){
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	db34      	blt.n	8000c0e <sdr+0xde>
	if (p == TMS && val == 0) BSRR_TMS = (1 << (TMS_Pin+16));
 8000ba4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	if (p == TMS && val == 1) BSRR_TMS = (1 << TMS_Pin);
 8000ba8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	if (p == TMS && val == 0) BSRR_TMS = (1 << (TMS_Pin+16));
 8000bac:	6027      	str	r7, [r4, #0]
	pulse_clock();
 8000bae:	f7ff ff0f 	bl	80009d0 <pulse_clock>
	if (tms==0) {
 8000bb2:	f7ff fed5 	bl	8000960 <state_ack.part.0>
	if (p == TMS && val == 1) BSRR_TMS = (1 << TMS_Pin);
 8000bb6:	6020      	str	r0, [r4, #0]
	pulse_clock();
 8000bb8:	f7ff ff0a 	bl	80009d0 <pulse_clock>
	if (tms==0) {
 8000bbc:	f7ff fec0 	bl	8000940 <state_step.part.0>
	if (p == TMS && val == 0) BSRR_TMS = (1 << (TMS_Pin+16));
 8000bc0:	6027      	str	r7, [r4, #0]
	pulse_clock();
 8000bc2:	f7ff ff05 	bl	80009d0 <pulse_clock>
	if (tms==0) {
 8000bc6:	f7ff fecb 	bl	8000960 <state_ack.part.0>
	if (p == TMS && val == 1) BSRR_TMS = (1 << TMS_Pin);
 8000bca:	6020      	str	r0, [r4, #0]
	pulse_clock();
 8000bcc:	f7ff ff00 	bl	80009d0 <pulse_clock>
	if (tms==0) {
 8000bd0:	f7ff feb6 	bl	8000940 <state_step.part.0>
	if (state==STATE_TLR) {
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff ff7b 	bl	8000ad0 <state_goto.part.0>
				state_step(1); /* Exit1-DR state */
				//chprintf(dbg, "Trying again....\r\n");

				state_goto(STATE_RTI);
				//chprintf(dbg, "State ch.1\r\n");
				delay(run_test);
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <sdr+0xf4>)
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	f7ff fedf 	bl	80009a0 <delay>
	if (state==STATE_TLR) {
 8000be2:	2004      	movs	r0, #4
 8000be4:	f7ff ff74 	bl	8000ad0 <state_goto.part.0>
 8000be8:	e7bb      	b.n	8000b62 <sdr+0x32>
		else{
			/* No TDO check - exit */
			break;
		}
	}
	if (flags&SDR_END){
 8000bea:	07b3      	lsls	r3, r6, #30
 8000bec:	d407      	bmi.n	8000bfe <sdr+0xce>
		state_goto(STATE_RTI);
	}

	delay(run_test);
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <sdr+0xf4>)
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	f7ff fed5 	bl	80009a0 <delay>
	return 0;
 8000bf6:	2000      	movs	r0, #0
}
 8000bf8:	b00b      	add	sp, #44	; 0x2c
 8000bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (state==STATE_TLR) {
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f7ff ff66 	bl	8000ad0 <state_goto.part.0>
 8000c04:	e7f3      	b.n	8000bee <sdr+0xbe>
 8000c06:	2004      	movs	r0, #4
 8000c08:	f7ff ff62 	bl	8000ad0 <state_goto.part.0>
 8000c0c:	e796      	b.n	8000b3c <sdr+0xc>
					return 1;
 8000c0e:	2001      	movs	r0, #1
}
 8000c10:	b00b      	add	sp, #44	; 0x2c
 8000c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c16:	bf00      	nop
 8000c18:	200017f4 	.word	0x200017f4
 8000c1c:	20000c3c 	.word	0x20000c3c
 8000c20:	2000183c 	.word	0x2000183c
 8000c24:	200017f0 	.word	0x200017f0
 8000c28:	2000181c 	.word	0x2000181c
 8000c2c:	200017ec 	.word	0x200017ec

08000c30 <requests_hook>:
 * Handling messages not implemented in the default handler nor in the
 * SerialUSB handler.
 */
static bool requests_hook(USBDriver *usbp) {

  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8000c30:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
static bool requests_hook(USBDriver *usbp) {
 8000c34:	4603      	mov	r3, r0
  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8000c36:	f002 001f 	and.w	r0, r2, #31
 8000c3a:	2801      	cmp	r0, #1
 8000c3c:	d103      	bne.n	8000c46 <requests_hook+0x16>
 8000c3e:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8000c42:	290b      	cmp	r1, #11
 8000c44:	d01b      	beq.n	8000c7e <requests_hook+0x4e>
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8000c46:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8000c4a:	2a20      	cmp	r2, #32
 8000c4c:	d001      	beq.n	8000c52 <requests_hook+0x22>
      return true;
    default:
      return false;
    }
  }
  return false;
 8000c4e:	2000      	movs	r0, #0
      (usbp->setup[1] == USB_REQ_SET_INTERFACE)) {
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  }
  return sduRequestsHook(usbp);
}
 8000c50:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000c52:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000c56:	2a21      	cmp	r2, #33	; 0x21
 8000c58:	d809      	bhi.n	8000c6e <requests_hook+0x3e>
 8000c5a:	2a1f      	cmp	r2, #31
 8000c5c:	d9f7      	bls.n	8000c4e <requests_hook+0x1e>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <requests_hook+0x58>)
 8000c60:	639a      	str	r2, [r3, #56]	; 0x38
 8000c62:	2107      	movs	r1, #7
 8000c64:	2200      	movs	r2, #0
 8000c66:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
      return true;
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000c6e:	2a22      	cmp	r2, #34	; 0x22
 8000c70:	d1ed      	bne.n	8000c4e <requests_hook+0x1e>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000c72:	2200      	movs	r2, #0
 8000c74:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8000c78:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	4770      	bx	lr
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8000c86:	4770      	bx	lr
 8000c88:	20000800 	.word	0x20000800
 8000c8c:	00000000 	.word	0x00000000

08000c90 <get_descriptor>:
  switch (dtype) {
 8000c90:	2902      	cmp	r1, #2
 8000c92:	d006      	beq.n	8000ca2 <get_descriptor+0x12>
 8000c94:	2903      	cmp	r1, #3
 8000c96:	d006      	beq.n	8000ca6 <get_descriptor+0x16>
 8000c98:	2901      	cmp	r1, #1
    return &vcom_device_descriptor;
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <get_descriptor+0x28>)
 8000c9c:	bf18      	it	ne
 8000c9e:	2000      	movne	r0, #0
 8000ca0:	4770      	bx	lr
  switch (dtype) {
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <get_descriptor+0x2c>)
 8000ca4:	4770      	bx	lr
    if (dindex < 4)
 8000ca6:	2a03      	cmp	r2, #3
 8000ca8:	d803      	bhi.n	8000cb2 <get_descriptor+0x22>
      return &vcom_strings[dindex];
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <get_descriptor+0x30>)
 8000cac:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8000cb0:	4770      	bx	lr
  return NULL;
 8000cb2:	2000      	movs	r0, #0
}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	080065dc 	.word	0x080065dc
 8000cbc:	08006588 	.word	0x08006588
 8000cc0:	08006664 	.word	0x08006664
	...

08000cd0 <_port_irq_epilogue>:
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <_port_irq_epilogue+0x3c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000cde:	d102      	bne.n	8000ce6 <_port_irq_epilogue+0x16>
 8000ce0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000ce4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000ce6:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 8000cea:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cf0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000cf2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000cf6:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <_port_irq_epilogue+0x40>)
 8000cf8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000cfa:	6952      	ldr	r2, [r2, #20]
    if (chSchIsPreemptionRequired()) {
 8000cfc:	6889      	ldr	r1, [r1, #8]
 8000cfe:	6892      	ldr	r2, [r2, #8]
 8000d00:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000d02:	bf8c      	ite	hi
 8000d04:	4a03      	ldrhi	r2, [pc, #12]	; (8000d14 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000d06:	4a04      	ldrls	r2, [pc, #16]	; (8000d18 <_port_irq_epilogue+0x48>)
 8000d08:	619a      	str	r2, [r3, #24]
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00
 8000d10:	200013b0 	.word	0x200013b0
 8000d14:	08000303 	.word	0x08000303
 8000d18:	08000306 	.word	0x08000306
 8000d1c:	00000000 	.word	0x00000000

08000d20 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000d20:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000d22:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000d24:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000d28:	4249      	negs	r1, r1
 8000d2a:	1a20      	subs	r0, r4, r0
 8000d2c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d304      	bcc.n	8000d3c <chCoreAllocAlignedI+0x1c>
 8000d32:	4284      	cmp	r4, r0
 8000d34:	d302      	bcc.n	8000d3c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000d36:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8000d38:	6050      	str	r0, [r2, #4]
 8000d3a:	4770      	bx	lr
    return NULL;
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	bc10      	pop	{r4}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20001548 	.word	0x20001548
	...

08000d50 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000d50:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <chTMStopMeasurementX+0x40>)
 8000d54:	6852      	ldr	r2, [r2, #4]
 8000d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  tmp->last = (now - tmp->last) - offset;
 8000d58:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000d5a:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 8000d5c:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8000d5e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000d62:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000d64:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000d66:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 8000d68:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8000d6a:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000d6c:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 8000d6e:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000d70:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000d72:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000d76:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000d78:	bf88      	it	hi
 8000d7a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8000d7c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000d7e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000d82:	bf38      	it	cc
 8000d84:	6003      	strcc	r3, [r0, #0]
}
 8000d86:	bc30      	pop	{r4, r5}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e0001000 	.word	0xe0001000
 8000d90:	200013b0 	.word	0x200013b0
	...

08000da0 <chTMStartMeasurementX>:
 8000da0:	4b01      	ldr	r3, [pc, #4]	; (8000da8 <chTMStartMeasurementX+0x8>)
 8000da2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000da4:	6083      	str	r3, [r0, #8]
}
 8000da6:	4770      	bx	lr
 8000da8:	e0001000 	.word	0xe0001000
 8000dac:	00000000 	.word	0x00000000

08000db0 <chThdCreateSuspendedI>:
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000db0:	6883      	ldr	r3, [r0, #8]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8000db2:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 8000db4:	4a1a      	ldr	r2, [pc, #104]	; (8000e20 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8000db6:	b4f0      	push	{r4, r5, r6, r7}
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000db8:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 8000dbc:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 8000dbe:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 8000dc2:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000dc4:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000dc6:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8000dca:	6805      	ldr	r5, [r0, #0]
 8000dcc:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000dce:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8000dd2:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8000dd6:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 8000dda:	f843 2c3c 	str.w	r2, [r3, #-60]
 8000dde:	6914      	ldr	r4, [r2, #16]
  tp->prio      = prio;
 8000de0:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8000de4:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 8000de8:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000dec:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8000df0:	4d0c      	ldr	r5, [pc, #48]	; (8000e24 <chThdCreateSuspendedI+0x74>)
 8000df2:	f843 0c34 	str.w	r0, [r3, #-52]
  tp->epending  = (eventmask_t)0;
 8000df6:	e943 1105 	strd	r1, r1, [r3, #-20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000dfa:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000dfe:	f843 5c4c 	str.w	r5, [r3, #-76]
  queue_init(&tp->msgqueue);
 8000e02:	f1a3 011c 	sub.w	r1, r3, #28
  list_init(&tp->waiting);
 8000e06:	f1a3 0520 	sub.w	r5, r3, #32
  REG_INSERT(tp);
 8000e0a:	f843 4c38 	str.w	r4, [r3, #-56]
 8000e0e:	60e0      	str	r0, [r4, #12]
 8000e10:	6110      	str	r0, [r2, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000e12:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8000e16:	f843 1c18 	str.w	r1, [r3, #-24]
}
 8000e1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200013b0 	.word	0x200013b0
 8000e24:	080002f1 	.word	0x080002f1
	...

08000e30 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000e30:	2320      	movs	r3, #32
 8000e32:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000e36:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000e3a:	2b07      	cmp	r3, #7
 8000e3c:	d80d      	bhi.n	8000e5a <wakeup+0x2a>
 8000e3e:	e8df f003 	tbb	[pc, r3]
 8000e42:	0c27      	.short	0x0c27
 8000e44:	0408230c 	.word	0x0408230c
 8000e48:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 8000e4a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000e4c:	6893      	ldr	r3, [r2, #8]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000e52:	e9d0 3200 	ldrd	r3, r2, [r0]
 8000e56:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000e58:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 8000e5a:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8000e5c:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000e5e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8000e62:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000e66:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8000e68:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000e6c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	428a      	cmp	r2, r1
 8000e72:	d2fb      	bcs.n	8000e6c <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000e7c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000e7e:	6058      	str	r0, [r3, #4]
 8000e80:	f381 8811 	msr	BASEPRI, r1
}
 8000e84:	bc10      	pop	{r4}
 8000e86:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8000e88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
    break;
 8000e8e:	e7e4      	b.n	8000e5a <wakeup+0x2a>
 8000e90:	2300      	movs	r3, #0
 8000e92:	f383 8811 	msr	BASEPRI, r3
 8000e96:	4770      	bx	lr
 8000e98:	200013b0 	.word	0x200013b0
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000ea0:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8000ea2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8000ea6:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000eaa:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	428a      	cmp	r2, r1
 8000eb0:	d2fb      	bcs.n	8000eaa <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000eb8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000eba:	6058      	str	r0, [r3, #4]
}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200013b0 	.word	0x200013b0
	...

08000ed0 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000ed0:	b538      	push	{r3, r4, r5, lr}
 8000ed2:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000ed4:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 8000ed6:	4284      	cmp	r4, r0
 8000ed8:	d00a      	beq.n	8000ef0 <chThdDequeueAllI.constprop.0+0x20>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000eda:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 8000ede:	6803      	ldr	r3, [r0, #0]
 8000ee0:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000ee2:	605c      	str	r4, [r3, #4]
 8000ee4:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000ee6:	f7ff ffdb 	bl	8000ea0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000eea:	6820      	ldr	r0, [r4, #0]
 8000eec:	42a0      	cmp	r0, r4
 8000eee:	d1f6      	bne.n	8000ede <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}
 8000ef2:	bf00      	nop
	...

08000f00 <chThdDequeueNextI.constprop.0>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000f00:	4603      	mov	r3, r0
 8000f02:	6800      	ldr	r0, [r0, #0]
  if (queue_notempty(tqp)) {
 8000f04:	4283      	cmp	r3, r0
 8000f06:	d006      	beq.n	8000f16 <chThdDequeueNextI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8000f08:	6802      	ldr	r2, [r0, #0]
 8000f0a:	601a      	str	r2, [r3, #0]
  tp->u.rdymsg = msg;
 8000f0c:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000f0e:	6053      	str	r3, [r2, #4]
 8000f10:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000f12:	f7ff bfc5 	b.w	8000ea0 <chSchReadyI>
}
 8000f16:	4770      	bx	lr
	...

08000f20 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000f22:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000f24:	42a0      	cmp	r0, r4
 8000f26:	d021      	beq.n	8000f6c <chEvtBroadcastFlagsI+0x4c>
 8000f28:	4607      	mov	r7, r0
 8000f2a:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000f2c:	2600      	movs	r6, #0
 8000f2e:	e004      	b.n	8000f3a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000f30:	2a0b      	cmp	r2, #11
 8000f32:	d01c      	beq.n	8000f6e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8000f34:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000f36:	42a7      	cmp	r7, r4
 8000f38:	d018      	beq.n	8000f6c <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 8000f3a:	68e3      	ldr	r3, [r4, #12]
 8000f3c:	432b      	orrs	r3, r5
 8000f3e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000f40:	b115      	cbz	r5, 8000f48 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000f42:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000f44:	421d      	tst	r5, r3
 8000f46:	d0f5      	beq.n	8000f34 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 8000f48:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8000f4c:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000f4e:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000f52:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000f54:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000f56:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000f58:	d1ea      	bne.n	8000f30 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000f5a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000f5c:	4213      	tst	r3, r2
 8000f5e:	d0e9      	beq.n	8000f34 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8000f60:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000f62:	f7ff ff9d 	bl	8000ea0 <chSchReadyI>
    elp = elp->next;
 8000f66:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000f68:	42a7      	cmp	r7, r4
 8000f6a:	d1e6      	bne.n	8000f3a <chEvtBroadcastFlagsI+0x1a>
}
 8000f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000f6e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000f70:	ea32 0303 	bics.w	r3, r2, r3
 8000f74:	d1de      	bne.n	8000f34 <chEvtBroadcastFlagsI+0x14>
 8000f76:	e7f3      	b.n	8000f60 <chEvtBroadcastFlagsI+0x40>
	...

08000f80 <chSysPolledDelayX>:
 8000f80:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <chSysPolledDelayX+0x10>)
 8000f82:	6851      	ldr	r1, [r2, #4]
 8000f84:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 8000f86:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8000f88:	4298      	cmp	r0, r3
 8000f8a:	d8fb      	bhi.n	8000f84 <chSysPolledDelayX+0x4>
  }
}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e0001000 	.word	0xe0001000
	...

08000fa0 <_idle_thread>:
}
 8000fa0:	e7fe      	b.n	8000fa0 <_idle_thread>
 8000fa2:	bf00      	nop
	...

08000fb0 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000fb0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8000fb4:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000fb6:	68dc      	ldr	r4, [r3, #12]
 8000fb8:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 8000fba:	6813      	ldr	r3, [r2, #0]
 8000fbc:	60d3      	str	r3, [r2, #12]
  if (isp->txsize == 0) {
 8000fbe:	b9f3      	cbnz	r3, 8000ffe <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8000fc0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8000fc2:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8000fc6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000fca:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d02a      	beq.n	800102e <usb_lld_start_in+0x7e>
 8000fd8:	b208      	sxth	r0, r1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8000fda:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8000fde:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8000fe0:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8000fe4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8000fe8:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8000fec:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
 8000ff0:	fa03 f101 	lsl.w	r1, r3, r1
 8000ff4:	4301      	orrs	r1, r0
}
 8000ff6:	bc30      	pop	{r4, r5}
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8000ff8:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 8000ffc:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8000ffe:	b919      	cbnz	r1, 8001008 <usb_lld_start_in+0x58>
 8001000:	2b40      	cmp	r3, #64	; 0x40
      isp->txsize = EP0_MAX_INSIZE;
 8001002:	bf84      	itt	hi
 8001004:	2340      	movhi	r3, #64	; 0x40
 8001006:	6013      	strhi	r3, [r2, #0]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8001008:	8a25      	ldrh	r5, [r4, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800100a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800100c:	1e68      	subs	r0, r5, #1
 800100e:	4418      	add	r0, r3
 8001010:	fbb0 f0f5 	udiv	r0, r0, r5
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8001014:	eb02 1541 	add.w	r5, r2, r1, lsl #5
 8001018:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 800101c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001020:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d1d4      	bne.n	8000fd8 <usb_lld_start_in+0x28>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800102e:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8001032:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001036:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 800103a:	b208      	sxth	r0, r1
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 800103c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8001040:	bf14      	ite	ne
 8001042:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8001046:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
 800104a:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 800104e:	e7c4      	b.n	8000fda <usb_lld_start_in+0x2a>

08001050 <otg_epin_handler.constprop.0>:
  stm32_otg_t *otgp = usbp->otg;
 8001050:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <otg_epin_handler.constprop.0+0x84>)
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8001052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001054:	6d56      	ldr	r6, [r2, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8001056:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800105a:	4604      	mov	r4, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800105c:	f8d3 5908 	ldr.w	r5, [r3, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8001060:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8001064:	07e8      	lsls	r0, r5, #31
 8001066:	d503      	bpl.n	8001070 <otg_epin_handler.constprop.0+0x20>
 8001068:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 800106c:	07d9      	lsls	r1, r3, #31
 800106e:	d408      	bmi.n	8001082 <otg_epin_handler.constprop.0+0x32>
  if ((epint & DIEPINT_TXFE) &&
 8001070:	062b      	lsls	r3, r5, #24
 8001072:	d505      	bpl.n	8001080 <otg_epin_handler.constprop.0+0x30>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8001074:	f8d6 2834 	ldr.w	r2, [r6, #2100]	; 0x834
 8001078:	2301      	movs	r3, #1
 800107a:	40a3      	lsls	r3, r4
  if ((epint & DIEPINT_TXFE) &&
 800107c:	4213      	tst	r3, r2
 800107e:	d115      	bne.n	80010ac <otg_epin_handler.constprop.0+0x5c>
}
 8001080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001082:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8001086:	68d8      	ldr	r0, [r3, #12]
 8001088:	6943      	ldr	r3, [r0, #20]
    if (isp->txsize < isp->totsize) {
 800108a:	681f      	ldr	r7, [r3, #0]
 800108c:	68d9      	ldr	r1, [r3, #12]
 800108e:	428f      	cmp	r7, r1
 8001090:	d311      	bcc.n	80010b6 <otg_epin_handler.constprop.0+0x66>
      _usb_isr_invoke_in_cb(usbp, ep);
 8001092:	8913      	ldrh	r3, [r2, #8]
 8001094:	6887      	ldr	r7, [r0, #8]
 8001096:	2101      	movs	r1, #1
 8001098:	40a1      	lsls	r1, r4
 800109a:	ea23 0301 	bic.w	r3, r3, r1
 800109e:	8113      	strh	r3, [r2, #8]
 80010a0:	2f00      	cmp	r7, #0
 80010a2:	d0e5      	beq.n	8001070 <otg_epin_handler.constprop.0+0x20>
 80010a4:	4610      	mov	r0, r2
 80010a6:	4621      	mov	r1, r4
 80010a8:	47b8      	blx	r7
 80010aa:	e7e1      	b.n	8001070 <otg_epin_handler.constprop.0+0x20>
    otg_txfifo_handler(usbp, ep);
 80010ac:	4620      	mov	r0, r4
}
 80010ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    otg_txfifo_handler(usbp, ep);
 80010b2:	f7ff bbb5 	b.w	8000820 <otg_txfifo_handler.constprop.0>
      isp->txsize = isp->totsize - isp->txsize;
 80010b6:	1bc9      	subs	r1, r1, r7
      isp->txcnt  = 0;
 80010b8:	2700      	movs	r7, #0
 80010ba:	e9c3 1700 	strd	r1, r7, [r3]
 80010be:	2320      	movs	r3, #32
 80010c0:	f383 8811 	msr	BASEPRI, r3
      usb_lld_start_in(usbp, ep);
 80010c4:	4610      	mov	r0, r2
 80010c6:	4621      	mov	r1, r4
 80010c8:	f7ff ff72 	bl	8000fb0 <usb_lld_start_in>
 80010cc:	f387 8811 	msr	BASEPRI, r7
 80010d0:	e7ce      	b.n	8001070 <otg_epin_handler.constprop.0+0x20>
 80010d2:	bf00      	nop
 80010d4:	2000132c 	.word	0x2000132c
	...

080010e0 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80010e0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 80010e4:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80010e6:	68dd      	ldr	r5, [r3, #12]
 80010e8:	69ab      	ldr	r3, [r5, #24]
  osp->totsize = osp->rxsize;
 80010ea:	681c      	ldr	r4, [r3, #0]
 80010ec:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 80010ee:	b919      	cbnz	r1, 80010f8 <usb_lld_start_out+0x18>
 80010f0:	2c40      	cmp	r4, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 80010f2:	bf84      	itt	hi
 80010f4:	2440      	movhi	r4, #64	; 0x40
 80010f6:	601c      	strhi	r4, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 80010f8:	8a6b      	ldrh	r3, [r5, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80010fa:	6d40      	ldr	r0, [r0, #84]	; 0x54
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80010fc:	682d      	ldr	r5, [r5, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 80010fe:	1e5a      	subs	r2, r3, #1
 8001100:	4422      	add	r2, r4
 8001102:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	3303      	adds	r3, #3
 800110c:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8001110:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8001114:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001118:	f005 0203 	and.w	r2, r5, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800111c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001120:	2a01      	cmp	r2, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8001122:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001126:	d00a      	beq.n	800113e <usb_lld_start_out+0x5e>
 8001128:	b209      	sxth	r1, r1
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 800112a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 800112e:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8001130:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8001134:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001138:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 800113c:	4770      	bx	lr
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800113e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001142:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8001146:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 800114a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800114e:	bf14      	ite	ne
 8001150:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8001154:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8001158:	b209      	sxth	r1, r1
 800115a:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 800115e:	e7e4      	b.n	800112a <usb_lld_start_out+0x4a>

08001160 <otg_epout_handler.constprop.0>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8001160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001164:	4f24      	ldr	r7, [pc, #144]	; (80011f8 <otg_epout_handler.constprop.0+0x98>)
 8001166:	6d7e      	ldr	r6, [r7, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8001168:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800116c:	4604      	mov	r4, r0
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800116e:	f8d3 5b08 	ldr.w	r5, [r3, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8001172:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8001176:	0728      	lsls	r0, r5, #28
 8001178:	d503      	bpl.n	8001182 <otg_epout_handler.constprop.0+0x22>
 800117a:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 800117e:	0719      	lsls	r1, r3, #28
 8001180:	d431      	bmi.n	80011e6 <otg_epout_handler.constprop.0+0x86>
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8001182:	07ea      	lsls	r2, r5, #31
 8001184:	d52d      	bpl.n	80011e2 <otg_epout_handler.constprop.0+0x82>
 8001186:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 800118a:	07db      	lsls	r3, r3, #31
 800118c:	d529      	bpl.n	80011e2 <otg_epout_handler.constprop.0+0x82>
    osp = usbp->epc[ep]->out_state;
 800118e:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8001192:	68d9      	ldr	r1, [r3, #12]
    if (ep == 0) {
 8001194:	b95c      	cbnz	r4, 80011ae <otg_epout_handler.constprop.0+0x4e>
    osp = usbp->epc[ep]->out_state;
 8001196:	698a      	ldr	r2, [r1, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8001198:	8a48      	ldrh	r0, [r1, #18]
 800119a:	6855      	ldr	r5, [r2, #4]
 800119c:	fbb5 f3f0 	udiv	r3, r5, r0
 80011a0:	fb00 5313 	mls	r3, r0, r3, r5
 80011a4:	b91b      	cbnz	r3, 80011ae <otg_epout_handler.constprop.0+0x4e>
          (osp->rxsize < osp->totsize)) {
 80011a6:	6810      	ldr	r0, [r2, #0]
 80011a8:	68d3      	ldr	r3, [r2, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 80011aa:	4298      	cmp	r0, r3
 80011ac:	d30d      	bcc.n	80011ca <otg_epout_handler.constprop.0+0x6a>
    _usb_isr_invoke_out_cb(usbp, ep);
 80011ae:	897b      	ldrh	r3, [r7, #10]
 80011b0:	68cd      	ldr	r5, [r1, #12]
 80011b2:	2201      	movs	r2, #1
 80011b4:	40a2      	lsls	r2, r4
 80011b6:	ea23 0302 	bic.w	r3, r3, r2
 80011ba:	817b      	strh	r3, [r7, #10]
 80011bc:	b18d      	cbz	r5, 80011e2 <otg_epout_handler.constprop.0+0x82>
 80011be:	4621      	mov	r1, r4
 80011c0:	462b      	mov	r3, r5
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <otg_epout_handler.constprop.0+0x98>)
}
 80011c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _usb_isr_invoke_out_cb(usbp, ep);
 80011c8:	4718      	bx	r3
        osp->rxsize = osp->totsize - osp->rxsize;
 80011ca:	1a1b      	subs	r3, r3, r0
        osp->rxcnt  = 0;
 80011cc:	e9c2 3400 	strd	r3, r4, [r2]
 80011d0:	2320      	movs	r3, #32
 80011d2:	f383 8811 	msr	BASEPRI, r3
        usb_lld_start_out(usbp, ep);
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <otg_epout_handler.constprop.0+0x98>)
 80011d8:	4621      	mov	r1, r4
 80011da:	f7ff ff81 	bl	80010e0 <usb_lld_start_out>
 80011de:	f384 8811 	msr	BASEPRI, r4
}
 80011e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _usb_isr_invoke_setup_cb(usbp, ep);
 80011e6:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 80011ea:	4621      	mov	r1, r4
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	4638      	mov	r0, r7
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4798      	blx	r3
 80011f4:	e7c5      	b.n	8001182 <otg_epout_handler.constprop.0+0x22>
 80011f6:	bf00      	nop
 80011f8:	2000132c 	.word	0x2000132c
 80011fc:	00000000 	.word	0x00000000

08001200 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8001200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001204:	f002 0803 	and.w	r8, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8001208:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800120c:	4647      	mov	r7, r8
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800120e:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001212:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
  uint32_t bit     = 0;
 8001216:	2400      	movs	r4, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8001218:	f04f 0b0f 	mov.w	fp, #15
      m1 = 1 << bit;
 800121c:	f04f 0a01 	mov.w	sl, #1
      m2 = 3 << (bit * 2);
 8001220:	46ae      	mov	lr, r5
 8001222:	e013      	b.n	800124c <_pal_lld_setgroupmode+0x4c>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8001224:	f8d0 9000 	ldr.w	r9, [r0]
 8001228:	ea03 0309 	and.w	r3, r3, r9
 800122c:	433b      	orrs	r3, r7
        if (bit < 8)
 800122e:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8001230:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8001232:	d83e      	bhi.n	80012b2 <_pal_lld_setgroupmode+0xb2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001234:	6a03      	ldr	r3, [r0, #32]
 8001236:	ea23 0202 	bic.w	r2, r3, r2
 800123a:	4315      	orrs	r5, r2
 800123c:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800123e:	0849      	lsrs	r1, r1, #1
 8001240:	d035      	beq.n	80012ae <_pal_lld_setgroupmode+0xae>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
 8001242:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 8001244:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
 8001248:	00bf      	lsls	r7, r7, #2
    bit++;
 800124a:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 800124c:	07cb      	lsls	r3, r1, #31
 800124e:	d5f6      	bpl.n	800123e <_pal_lld_setgroupmode+0x3e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001250:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8001252:	fa0a f204 	lsl.w	r2, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001256:	ea23 0302 	bic.w	r3, r3, r2
 800125a:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800125c:	6882      	ldr	r2, [r0, #8]
      m2 = 3 << (bit * 2);
 800125e:	2503      	movs	r5, #3
 8001260:	0063      	lsls	r3, r4, #1
 8001262:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001266:	ea22 0203 	bic.w	r2, r2, r3
 800126a:	4332      	orrs	r2, r6
 800126c:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800126e:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8001270:	f004 0207 	and.w	r2, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001274:	ea25 0503 	bic.w	r5, r5, r3
 8001278:	ea45 050e 	orr.w	r5, r5, lr
      altrmask = altr << ((bit & 7) * 4);
 800127c:	0092      	lsls	r2, r2, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 800127e:	f1b8 0f02 	cmp.w	r8, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001282:	60c5      	str	r5, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001284:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8001288:	fa0c f502 	lsl.w	r5, ip, r2
      m4 = 15 << ((bit & 7) * 4);
 800128c:	fa0b f202 	lsl.w	r2, fp, r2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001290:	d1c8      	bne.n	8001224 <_pal_lld_setgroupmode+0x24>
        if (bit < 8)
 8001292:	2c07      	cmp	r4, #7
 8001294:	d813      	bhi.n	80012be <_pal_lld_setgroupmode+0xbe>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001296:	f8d0 9020 	ldr.w	r9, [r0, #32]
 800129a:	ea29 0202 	bic.w	r2, r9, r2
 800129e:	4315      	orrs	r5, r2
 80012a0:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 80012a2:	6802      	ldr	r2, [r0, #0]
 80012a4:	4013      	ands	r3, r2
 80012a6:	433b      	orrs	r3, r7
    if (!mask)
 80012a8:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 80012aa:	6003      	str	r3, [r0, #0]
    if (!mask)
 80012ac:	d1c9      	bne.n	8001242 <_pal_lld_setgroupmode+0x42>
  }
}
 80012ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80012b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012b4:	ea23 0202 	bic.w	r2, r3, r2
 80012b8:	4315      	orrs	r5, r2
 80012ba:	6245      	str	r5, [r0, #36]	; 0x24
 80012bc:	e7bf      	b.n	800123e <_pal_lld_setgroupmode+0x3e>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80012be:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 80012c2:	ea29 0202 	bic.w	r2, r9, r2
 80012c6:	4315      	orrs	r5, r2
 80012c8:	6245      	str	r5, [r0, #36]	; 0x24
 80012ca:	e7ea      	b.n	80012a2 <_pal_lld_setgroupmode+0xa2>
 80012cc:	0000      	movs	r0, r0
	...

080012d0 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80012d6:	4604      	mov	r4, r0
 80012d8:	2b15      	cmp	r3, #21
 80012da:	d816      	bhi.n	800130a <_usb_ep0out+0x3a>
 80012dc:	e8df f003 	tbb	[pc, r3]
 80012e0:	15151516 	.word	0x15151516
 80012e4:	15161515 	.word	0x15161515
 80012e8:	16161615 	.word	0x16161615
 80012ec:	15151515 	.word	0x15151515
 80012f0:	15151515 	.word	0x15151515
 80012f4:	2c0b      	.short	0x2c0b
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 80012f6:	68c3      	ldr	r3, [r0, #12]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	b92b      	cbnz	r3, 800130a <_usb_ep0out+0x3a>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 80012fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001300:	b103      	cbz	r3, 8001304 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 8001302:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001304:	2300      	movs	r3, #0
 8001306:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 800130a:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 800130c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800130e:	6841      	ldr	r1, [r0, #4]
 8001310:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001314:	680d      	ldr	r5, [r1, #0]
 8001316:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800131a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800131e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001322:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001326:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800132a:	b10d      	cbz	r5, 8001330 <_usb_ep0out+0x60>
 800132c:	2106      	movs	r1, #6
 800132e:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001330:	2306      	movs	r3, #6
 8001332:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001336:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001338:	230b      	movs	r3, #11
 800133a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 800133e:	2320      	movs	r3, #32
 8001340:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001344:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001346:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001348:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 800134a:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800134c:	f042 0201 	orr.w	r2, r2, #1
 8001350:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8001352:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 8001354:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001358:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 800135a:	f7ff fe29 	bl	8000fb0 <usb_lld_start_in>
 800135e:	f385 8811 	msr	BASEPRI, r5
}
 8001362:	bd38      	pop	{r3, r4, r5, pc}
	...

08001370 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001376:	4604      	mov	r4, r0
 8001378:	2b15      	cmp	r3, #21
 800137a:	d821      	bhi.n	80013c0 <_usb_ep0in+0x50>
 800137c:	e8df f003 	tbb	[pc, r3]
 8001380:	2020200b 	.word	0x2020200b
 8001384:	200b2020 	.word	0x200b2020
 8001388:	48312120 	.word	0x48312120
 800138c:	20202020 	.word	0x20202020
 8001390:	20202020 	.word	0x20202020
 8001394:	0b0b      	.short	0x0b0b
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001396:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001398:	6841      	ldr	r1, [r0, #4]
 800139a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800139e:	680d      	ldr	r5, [r1, #0]
 80013a0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80013a4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80013a8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80013ac:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80013b0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80013b4:	b10d      	cbz	r5, 80013ba <_usb_ep0in+0x4a>
 80013b6:	2106      	movs	r1, #6
 80013b8:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80013ba:	2306      	movs	r3, #6
 80013bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80013c0:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 80013c2:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 80013c6:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 80013ca:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    max = (size_t)get_hword(&usbp->setup[6]);
 80013cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if ((usbp->ep0n < max) &&
 80013d0:	4299      	cmp	r1, r3
 80013d2:	d206      	bcs.n	80013e2 <_usb_ep0in+0x72>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 80013d4:	68c3      	ldr	r3, [r0, #12]
 80013d6:	8a1b      	ldrh	r3, [r3, #16]
 80013d8:	fbb1 f5f3 	udiv	r5, r1, r3
 80013dc:	fb03 1515 	mls	r5, r3, r5, r1
    if ((usbp->ep0n < max) &&
 80013e0:	b1ed      	cbz	r5, 800141e <_usb_ep0in+0xae>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 80013e2:	2314      	movs	r3, #20
 80013e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80013e8:	2320      	movs	r3, #32
 80013ea:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 80013ee:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80013f0:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 80013f2:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 80013f4:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 80013fc:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 80013fe:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 8001402:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 8001404:	4629      	mov	r1, r5
 8001406:	f7ff fe6b 	bl	80010e0 <usb_lld_start_out>
 800140a:	f385 8811 	msr	BASEPRI, r5
}
 800140e:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8001410:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001412:	b103      	cbz	r3, 8001416 <_usb_ep0in+0xa6>
      usbp->ep0endcb(usbp);
 8001414:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001416:	2300      	movs	r3, #0
 8001418:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800141c:	bd38      	pop	{r3, r4, r5, pc}
 800141e:	2320      	movs	r3, #32
 8001420:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001424:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001426:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001428:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8001430:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 8001432:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001436:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8001438:	f7ff fdba 	bl	8000fb0 <usb_lld_start_in>
 800143c:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8001440:	230a      	movs	r3, #10
 8001442:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001446:	bd38      	pop	{r3, r4, r5, pc}
	...

08001450 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 8001450:	b4f0      	push	{r4, r5, r6, r7}
  isp = usbp->epc[ep]->in_state;
 8001452:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001456:	8907      	ldrh	r7, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001458:	f8d5 c00c 	ldr.w	ip, [r5, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800145c:	2501      	movs	r5, #1
  isp = usbp->epc[ep]->in_state;
 800145e:	f8dc 6014 	ldr.w	r6, [ip, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001462:	408d      	lsls	r5, r1
 8001464:	433d      	orrs	r5, r7
  isp->txcnt  = 0;
 8001466:	2700      	movs	r7, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001468:	8105      	strh	r5, [r0, #8]
  isp->txcnt  = 0;
 800146a:	e9c6 3700 	strd	r3, r7, [r6]
  isp->txbuf  = buf;
 800146e:	60b2      	str	r2, [r6, #8]
}
 8001470:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_in(usbp, ep);
 8001472:	f7ff bd9d 	b.w	8000fb0 <usb_lld_start_in>
 8001476:	bf00      	nop
	...

08001480 <usbDisableEndpointsI>:
  otg_ram_reset(usbp);
 8001480:	6d81      	ldr	r1, [r0, #88]	; 0x58
  usbp->transmitting &= 1U;
 8001482:	6883      	ldr	r3, [r0, #8]
void usbDisableEndpointsI(USBDriver *usbp) {
 8001484:	b4f0      	push	{r4, r5, r6, r7}
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8001486:	680c      	ldr	r4, [r1, #0]
 8001488:	65c4      	str	r4, [r0, #92]	; 0x5c
    usbp->epc[i] = NULL;
 800148a:	2200      	movs	r2, #0
  usbp->transmitting &= 1U;
 800148c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001490:	688f      	ldr	r7, [r1, #8]
  otg_disable_ep(usbp);
 8001492:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001494:	6083      	str	r3, [r0, #8]
    usbp->epc[i] = NULL;
 8001496:	e9c0 2204 	strd	r2, r2, [r0, #16]
 800149a:	6182      	str	r2, [r0, #24]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800149c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80014a0:	e000      	b.n	80014a4 <usbDisableEndpointsI+0x24>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80014a2:	4632      	mov	r2, r6
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80014a4:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 80014a8:	460b      	mov	r3, r1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80014aa:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 80014ae:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80014b0:	f102 0601 	add.w	r6, r2, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80014b4:	da05      	bge.n	80014c2 <usbDisableEndpointsI+0x42>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 80014b6:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 80014ba:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80014be:	f8c1 0900 	str.w	r0, [r1, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 80014c2:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 80014c6:	2800      	cmp	r0, #0
 80014c8:	da05      	bge.n	80014d6 <usbDisableEndpointsI+0x56>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 80014ca:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 80014ce:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80014d2:	f8c1 0b00 	str.w	r0, [r1, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80014d6:	42ba      	cmp	r2, r7
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80014d8:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80014dc:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80014e0:	d1df      	bne.n	80014a2 <usbDisableEndpointsI+0x22>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80014e2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80014e6:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
}
 80014ea:	bcf0      	pop	{r4, r5, r6, r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
	...

08001500 <_ctl.lto_priv.0>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8001500:	2000      	movs	r0, #0
 8001502:	4770      	bx	lr
	...

08001510 <_ctl.lto_priv.1>:
 8001510:	2000      	movs	r0, #0
 8001512:	4770      	bx	lr
	...

08001520 <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001522:	f8d0 148c 	ldr.w	r1, [r0, #1164]	; 0x48c
 8001526:	680a      	ldr	r2, [r1, #0]
 8001528:	7813      	ldrb	r3, [r2, #0]
 800152a:	2b04      	cmp	r3, #4
 800152c:	d102      	bne.n	8001534 <sdu_start_receive+0x14>
 800152e:	7a03      	ldrb	r3, [r0, #8]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d001      	beq.n	8001538 <sdu_start_receive+0x18>
    return true;
 8001534:	2001      	movs	r0, #1
}
 8001536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001538:	790c      	ldrb	r4, [r1, #4]
 800153a:	8955      	ldrh	r5, [r2, #10]
 800153c:	2301      	movs	r3, #1
 800153e:	fa03 f404 	lsl.w	r4, r3, r4
 8001542:	4225      	tst	r5, r4
 8001544:	d1f6      	bne.n	8001534 <sdu_start_receive+0x14>
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8001546:	e9d0 4607 	ldrd	r4, r6, [r0, #28]
 800154a:	42b4      	cmp	r4, r6
 800154c:	d014      	beq.n	8001578 <sdu_start_receive+0x58>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800154e:	7949      	ldrb	r1, [r1, #5]
  osp = usbp->epc[ep]->out_state;
 8001550:	eb02 0381 	add.w	r3, r2, r1, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001554:	2001      	movs	r0, #1
  osp = usbp->epc[ep]->out_state;
 8001556:	68db      	ldr	r3, [r3, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001558:	4088      	lsls	r0, r1
  osp = usbp->epc[ep]->out_state;
 800155a:	699e      	ldr	r6, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800155c:	4305      	orrs	r5, r0
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 800155e:	1d23      	adds	r3, r4, #4
  osp->rxsize = n;
 8001560:	f44f 7780 	mov.w	r7, #256	; 0x100
  osp->rxcnt  = 0;
 8001564:	2400      	movs	r4, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001566:	8155      	strh	r5, [r2, #10]
  usb_lld_start_out(usbp, ep);
 8001568:	4610      	mov	r0, r2
  osp->rxcnt  = 0;
 800156a:	e9c6 7400 	strd	r7, r4, [r6]
  osp->rxbuf  = buf;
 800156e:	60b3      	str	r3, [r6, #8]
  usb_lld_start_out(usbp, ep);
 8001570:	f7ff fdb6 	bl	80010e0 <usb_lld_start_out>
  return false;
 8001574:	4620      	mov	r0, r4
}
 8001576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ibqIsFullI(ibqp)) {
 8001578:	6980      	ldr	r0, [r0, #24]
 800157a:	2800      	cmp	r0, #0
 800157c:	d0e7      	beq.n	800154e <sdu_start_receive+0x2e>
 800157e:	e7d9      	b.n	8001534 <sdu_start_receive+0x14>

08001580 <ibnotify>:
  (void) sdu_start_receive(sdup);
 8001580:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001582:	f7ff bfcd 	b.w	8001520 <sdu_start_receive>
 8001586:	bf00      	nop
	...

08001590 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001590:	3109      	adds	r1, #9
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8001592:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001594:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8001598:	b194      	cbz	r4, 80015c0 <sduDataReceived+0x30>
 800159a:	2320      	movs	r3, #32
 800159c:	f383 8811 	msr	BASEPRI, r3
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 80015a0:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80015a4:	6813      	ldr	r3, [r2, #0]
 80015a6:	7952      	ldrb	r2, [r2, #5]
 80015a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 80015b2:	b935      	cbnz	r5, 80015c2 <sduDataReceived+0x32>
  (void) sdu_start_receive(sdup);
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff ffb3 	bl	8001520 <sdu_start_receive>
 80015ba:	2300      	movs	r3, #0
 80015bc:	f383 8811 	msr	BASEPRI, r3
}
 80015c0:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80015c2:	2104      	movs	r1, #4
 80015c4:	1860      	adds	r0, r4, r1
 80015c6:	f7ff fcab 	bl	8000f20 <chEvtBroadcastFlagsI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 80015ca:	69e3      	ldr	r3, [r4, #28]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 80015cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  *((size_t *)ibqp->bwrptr) = size;
 80015ce:	601d      	str	r5, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 80015d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  ibqp->bcounter++;
 80015d2:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 80015d4:	4403      	add	r3, r0
  if (ibqp->bwrptr >= ibqp->btop) {
 80015d6:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 80015d8:	61e3      	str	r3, [r4, #28]
  ibqp->bcounter++;
 80015da:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 80015de:	bf28      	it	cs
 80015e0:	6b23      	ldrcs	r3, [r4, #48]	; 0x30
  ibqp->bcounter++;
 80015e2:	61a2      	str	r2, [r4, #24]
    ibqPostFullBufferI(&sdup->ibqueue, size);
 80015e4:	f104 000c 	add.w	r0, r4, #12
    ibqp->bwrptr = ibqp->buffers;
 80015e8:	bf28      	it	cs
 80015ea:	61e3      	strcs	r3, [r4, #28]
  chThdDequeueNextI(tqp, msg);
 80015ec:	f7ff fc88 	bl	8000f00 <chThdDequeueNextI.constprop.0>
 80015f0:	e7e0      	b.n	80015b4 <sduDataReceived+0x24>
 80015f2:	bf00      	nop
	...

08001600 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 8001600:	4603      	mov	r3, r0

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001602:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 8001606:	4282      	cmp	r2, r0
 8001608:	d003      	beq.n	8001612 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 800160a:	f850 3b04 	ldr.w	r3, [r0], #4
 800160e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8001610:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f8      	beq.n	800160a <obqGetFullBufferI+0xa>
    return NULL;
 8001618:	2000      	movs	r0, #0
 800161a:	4770      	bx	lr
 800161c:	0000      	movs	r0, r0
	...

08001620 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 8001620:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8001622:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001624:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001628:	6813      	ldr	r3, [r2, #0]
 800162a:	7819      	ldrb	r1, [r3, #0]
 800162c:	2904      	cmp	r1, #4
static void obnotify(io_buffers_queue_t *bqp) {
 800162e:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001630:	d102      	bne.n	8001638 <obnotify+0x18>
 8001632:	7a21      	ldrb	r1, [r4, #8]
 8001634:	2902      	cmp	r1, #2
 8001636:	d001      	beq.n	800163c <obnotify+0x1c>
}
 8001638:	b002      	add	sp, #8
 800163a:	bd10      	pop	{r4, pc}
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800163c:	7911      	ldrb	r1, [r2, #4]
 800163e:	891a      	ldrh	r2, [r3, #8]
 8001640:	2301      	movs	r3, #1
 8001642:	408b      	lsls	r3, r1
 8001644:	4213      	tst	r3, r2
 8001646:	d1f7      	bne.n	8001638 <obnotify+0x18>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001648:	a901      	add	r1, sp, #4
 800164a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800164e:	f7ff ffd7 	bl	8001600 <obqGetFullBufferI>
 8001652:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001654:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	7901      	ldrb	r1, [r0, #4]
 800165c:	6800      	ldr	r0, [r0, #0]
 800165e:	f7ff fef7 	bl	8001450 <usbStartTransmitI>
 8001662:	e7e9      	b.n	8001638 <obnotify+0x18>
	...

08001670 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8001670:	b510      	push	{r4, lr}
 8001672:	2320      	movs	r3, #32
 8001674:	b082      	sub	sp, #8
 8001676:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800167a:	4c1e      	ldr	r4, [pc, #120]	; (80016f4 <sof_handler+0x84>)
 800167c:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001680:	6813      	ldr	r3, [r2, #0]
 8001682:	7819      	ldrb	r1, [r3, #0]
 8001684:	2904      	cmp	r1, #4
 8001686:	d102      	bne.n	800168e <sof_handler+0x1e>
 8001688:	7a21      	ldrb	r1, [r4, #8]
 800168a:	2902      	cmp	r1, #2
 800168c:	d004      	beq.n	8001698 <sof_handler+0x28>
 800168e:	2300      	movs	r3, #0
 8001690:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&OSTRICHPORT);
  osalSysUnlockFromISR();
}
 8001694:	b002      	add	sp, #8
 8001696:	bd10      	pop	{r4, pc}
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001698:	7911      	ldrb	r1, [r2, #4]
 800169a:	891a      	ldrh	r2, [r3, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	408b      	lsls	r3, r1
 80016a0:	4213      	tst	r3, r2
 80016a2:	d1f4      	bne.n	800168e <sof_handler+0x1e>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 80016a4:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d1f0      	bne.n	800168e <sof_handler+0x1e>
 80016ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d0ed      	beq.n	800168e <sof_handler+0x1e>
 80016b2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80016b4:	2a00      	cmp	r2, #0
 80016b6:	d0ea      	beq.n	800168e <sof_handler+0x1e>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 80016b8:	3a04      	subs	r2, #4

    if (size > 0U) {
 80016ba:	1ad2      	subs	r2, r2, r3
 80016bc:	d0e7      	beq.n	800168e <sof_handler+0x1e>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 80016be:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
 80016c0:	e9d4 1017 	ldrd	r1, r0, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 80016c4:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 80016c6:	428b      	cmp	r3, r1
      obqp->bcounter--;
 80016c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 80016ca:	6563      	str	r3, [r4, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 80016cc:	bf24      	itt	cs
 80016ce:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
 80016d0:	6563      	strcs	r3, [r4, #84]	; 0x54
      obqp->bcounter--;
 80016d2:	3a01      	subs	r2, #1
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 80016d4:	2300      	movs	r3, #0
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80016d6:	a901      	add	r1, sp, #4
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <sof_handler+0x88>)
      obqp->bcounter--;
 80016da:	6522      	str	r2, [r4, #80]	; 0x50
      obqp->ptr = NULL;
 80016dc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80016de:	f7ff ff8f 	bl	8001600 <obqGetFullBufferI>
 80016e2:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80016e4:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 80016e8:	9b01      	ldr	r3, [sp, #4]
 80016ea:	7901      	ldrb	r1, [r0, #4]
 80016ec:	6800      	ldr	r0, [r0, #0]
 80016ee:	f7ff feaf 	bl	8001450 <usbStartTransmitI>
 80016f2:	e7cc      	b.n	800168e <sof_handler+0x1e>
 80016f4:	20000e9c 	.word	0x20000e9c
 80016f8:	20000ee0 	.word	0x20000ee0
 80016fc:	00000000 	.word	0x00000000

08001700 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001704:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001708:	b082      	sub	sp, #8
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800170a:	699e      	ldr	r6, [r3, #24]
  if (sdup == NULL) {
 800170c:	b1f6      	cbz	r6, 800174c <sduDataTransmitted+0x4c>
 800170e:	4604      	mov	r4, r0
 8001710:	460d      	mov	r5, r1
 8001712:	2320      	movs	r3, #32
 8001714:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8001718:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 800171c:	1d30      	adds	r0, r6, #4
 800171e:	2108      	movs	r1, #8
 8001720:	f7ff fbfe 	bl	8000f20 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	b993      	cbnz	r3, 8001752 <sduDataTransmitted+0x52>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800172c:	f106 0844 	add.w	r8, r6, #68	; 0x44
 8001730:	4640      	mov	r0, r8
 8001732:	a901      	add	r1, sp, #4
 8001734:	f7ff ff64 	bl	8001600 <obqGetFullBufferI>
  if (buf != NULL) {
 8001738:	4602      	mov	r2, r0
 800173a:	b320      	cbz	r0, 8001786 <sduDataTransmitted+0x86>
    usbStartTransmitI(usbp, ep, buf, n);
 800173c:	9b01      	ldr	r3, [sp, #4]
 800173e:	4629      	mov	r1, r5
 8001740:	4620      	mov	r0, r4
 8001742:	f7ff fe85 	bl	8001450 <usbStartTransmitI>
 8001746:	2300      	movs	r3, #0
 8001748:	f383 8811 	msr	BASEPRI, r3
}
 800174c:	b002      	add	sp, #8
 800174e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (obqp->brdptr >= obqp->btop) {
 8001752:	e9d6 2017 	ldrd	r2, r0, [r6, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8001756:	6db3      	ldr	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8001758:	6d31      	ldr	r1, [r6, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 800175a:	4403      	add	r3, r0
  if (obqp->brdptr >= obqp->btop) {
 800175c:	4293      	cmp	r3, r2
  obqp->brdptr += obqp->bsize;
 800175e:	65b3      	str	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8001760:	f101 0101 	add.w	r1, r1, #1
    obqp->brdptr = obqp->buffers;
 8001764:	bf28      	it	cs
 8001766:	6eb3      	ldrcs	r3, [r6, #104]	; 0x68
  obqp->bcounter++;
 8001768:	6531      	str	r1, [r6, #80]	; 0x50
    obqReleaseEmptyBufferI(&sdup->obqueue);
 800176a:	f106 0844 	add.w	r8, r6, #68	; 0x44
    obqp->brdptr = obqp->buffers;
 800176e:	bf28      	it	cs
 8001770:	65b3      	strcs	r3, [r6, #88]	; 0x58
  chThdDequeueNextI(tqp, msg);
 8001772:	4640      	mov	r0, r8
 8001774:	f7ff fbc4 	bl	8000f00 <chThdDequeueNextI.constprop.0>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001778:	4640      	mov	r0, r8
 800177a:	a901      	add	r1, sp, #4
 800177c:	f7ff ff40 	bl	8001600 <obqGetFullBufferI>
  if (buf != NULL) {
 8001780:	4602      	mov	r2, r0
 8001782:	2800      	cmp	r0, #0
 8001784:	d1da      	bne.n	800173c <sduDataTransmitted+0x3c>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	2a00      	cmp	r2, #0
 800178e:	d0da      	beq.n	8001746 <sduDataTransmitted+0x46>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8001790:	8a1b      	ldrh	r3, [r3, #16]
 8001792:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001794:	4013      	ands	r3, r2
 8001796:	d1d6      	bne.n	8001746 <sduDataTransmitted+0x46>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8001798:	4629      	mov	r1, r5
 800179a:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff fe56 	bl	8001450 <usbStartTransmitI>
 80017a4:	e7cf      	b.n	8001746 <sduDataTransmitted+0x46>
 80017a6:	bf00      	nop
	...

080017b0 <chSchWakeupS.constprop.0>:
  thread_t *otp = currp;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <chSchWakeupS.constprop.0+0x54>)
 80017b2:	6959      	ldr	r1, [r3, #20]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80017b4:	b430      	push	{r4, r5}
  if (ntp->prio <= otp->prio) {
 80017b6:	688d      	ldr	r5, [r1, #8]
 80017b8:	6884      	ldr	r4, [r0, #8]
  ntp->u.rdymsg = msg;
 80017ba:	2200      	movs	r2, #0
  if (ntp->prio <= otp->prio) {
 80017bc:	42ac      	cmp	r4, r5
  ntp->u.rdymsg = msg;
 80017be:	6242      	str	r2, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80017c0:	d80c      	bhi.n	80017dc <chSchWakeupS.constprop.0+0x2c>
  tp->state = CH_STATE_READY;
 80017c2:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80017c6:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	4294      	cmp	r4, r2
 80017cc:	d9fb      	bls.n	80017c6 <chSchWakeupS.constprop.0+0x16>
  tp->queue.prev             = cp->queue.prev;
 80017ce:	685a      	ldr	r2, [r3, #4]
}
 80017d0:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 80017d2:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80017d6:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80017d8:	6058      	str	r0, [r3, #4]
}
 80017da:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 80017dc:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80017e0:	461a      	mov	r2, r3
    cp = cp->queue.next;
 80017e2:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 80017e4:	6894      	ldr	r4, [r2, #8]
 80017e6:	42a5      	cmp	r5, r4
 80017e8:	d3fb      	bcc.n	80017e2 <chSchWakeupS.constprop.0+0x32>
  tp->queue.prev             = cp->queue.prev;
 80017ea:	6854      	ldr	r4, [r2, #4]
 80017ec:	604c      	str	r4, [r1, #4]
    ntp->state = CH_STATE_CURRENT;
 80017ee:	2501      	movs	r5, #1
  tp->queue.next             = cp;
 80017f0:	600a      	str	r2, [r1, #0]
  tp->queue.prev->queue.next = tp;
 80017f2:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 80017f4:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 80017f6:	f880 5020 	strb.w	r5, [r0, #32]
}
 80017fa:	bc30      	pop	{r4, r5}
    currp = ntp;
 80017fc:	6158      	str	r0, [r3, #20]
    chSysSwitch(ntp, otp);
 80017fe:	f7fe bd6f 	b.w	80002e0 <_port_switch>
 8001802:	bf00      	nop
 8001804:	200013b0 	.word	0x200013b0
	...

08001810 <chSchGoSleepS>:
  thread_t *otp = currp;
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <chSchGoSleepS+0x24>)
 8001812:	6959      	ldr	r1, [r3, #20]
  thread_t *tp = tqp->next;
 8001814:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8001816:	b410      	push	{r4}
  otp->state = newstate;
 8001818:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800181c:	6810      	ldr	r0, [r2, #0]
 800181e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8001820:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8001822:	6043      	str	r3, [r0, #4]
 8001824:	f882 4020 	strb.w	r4, [r2, #32]
}
 8001828:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800182a:	615a      	str	r2, [r3, #20]
  chSysSwitch(currp, otp);
 800182c:	4610      	mov	r0, r2
 800182e:	f7fe bd57 	b.w	80002e0 <_port_switch>
 8001832:	bf00      	nop
 8001834:	200013b0 	.word	0x200013b0
	...

08001840 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001840:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <chMtxLockS+0xbc>)
void chMtxLockS(mutex_t *mp) {
 8001844:	4604      	mov	r4, r0

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8001846:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 8001848:	695d      	ldr	r5, [r3, #20]
  if (mp->owner != NULL) {
 800184a:	b330      	cbz	r0, 800189a <chMtxLockS+0x5a>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 800184c:	68aa      	ldr	r2, [r5, #8]
 800184e:	6883      	ldr	r3, [r0, #8]
 8001850:	4293      	cmp	r3, r2
 8001852:	d207      	bcs.n	8001864 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8001854:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8001858:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 800185a:	2b06      	cmp	r3, #6
 800185c:	d035      	beq.n	80018ca <chMtxLockS+0x8a>
 800185e:	2b07      	cmp	r3, #7
 8001860:	d020      	beq.n	80018a4 <chMtxLockS+0x64>
 8001862:	b19b      	cbz	r3, 800188c <chMtxLockS+0x4c>
  thread_t *cp = (thread_t *)tqp;
 8001864:	4623      	mov	r3, r4
 8001866:	e003      	b.n	8001870 <chMtxLockS+0x30>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001868:	6899      	ldr	r1, [r3, #8]
 800186a:	68aa      	ldr	r2, [r5, #8]
 800186c:	4291      	cmp	r1, r2
 800186e:	d302      	bcc.n	8001876 <chMtxLockS+0x36>
    cp = cp->queue.next;
 8001870:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001872:	429c      	cmp	r4, r3
 8001874:	d1f8      	bne.n	8001868 <chMtxLockS+0x28>
  tp->queue.prev             = cp->queue.prev;
 8001876:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8001878:	2006      	movs	r0, #6
 800187a:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 800187e:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8001880:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 8001882:	626c      	str	r4, [r5, #36]	; 0x24
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 8001884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8001888:	f7ff bfc2 	b.w	8001810 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 800188c:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001890:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001892:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8001894:	f7ff fb04 	bl	8000ea0 <chSchReadyI>
          break;
 8001898:	e7e4      	b.n	8001864 <chMtxLockS+0x24>
    mp->next = ctp->mtxlist;
 800189a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800189c:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 80018a0:	63ac      	str	r4, [r5, #56]	; 0x38
}
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 80018a4:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80018a8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80018aa:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80018ac:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 80018ae:	4633      	mov	r3, r6
 80018b0:	e002      	b.n	80018b8 <chMtxLockS+0x78>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80018b2:	6899      	ldr	r1, [r3, #8]
 80018b4:	428a      	cmp	r2, r1
 80018b6:	d802      	bhi.n	80018be <chMtxLockS+0x7e>
    cp = cp->queue.next;
 80018b8:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80018ba:	429e      	cmp	r6, r3
 80018bc:	d1f9      	bne.n	80018b2 <chMtxLockS+0x72>
  tp->queue.prev             = cp->queue.prev;
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80018c4:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80018c6:	6058      	str	r0, [r3, #4]
 80018c8:	e7cc      	b.n	8001864 <chMtxLockS+0x24>
  tp->queue.prev->queue.next = tp->queue.next;
 80018ca:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80018ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80018d0:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80018d2:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 80018d4:	4633      	mov	r3, r6
 80018d6:	e002      	b.n	80018de <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	428a      	cmp	r2, r1
 80018dc:	d802      	bhi.n	80018e4 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 80018de:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80018e0:	429e      	cmp	r6, r3
 80018e2:	d1f9      	bne.n	80018d8 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80018ea:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80018ec:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 80018ee:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 80018f0:	68aa      	ldr	r2, [r5, #8]
 80018f2:	6883      	ldr	r3, [r0, #8]
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d3ad      	bcc.n	8001854 <chMtxLockS+0x14>
 80018f8:	e7b4      	b.n	8001864 <chMtxLockS+0x24>
 80018fa:	bf00      	nop
 80018fc:	200013b0 	.word	0x200013b0

08001900 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8001900:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <chThdExitS+0x44>)
 8001904:	695c      	ldr	r4, [r3, #20]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001908:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 800190a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800190e:	42ab      	cmp	r3, r5
 8001910:	d007      	beq.n	8001922 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fac2 	bl	8000ea0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800191c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800191e:	42ab      	cmp	r3, r5
 8001920:	d1f7      	bne.n	8001912 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 8001922:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001926:	b93b      	cbnz	r3, 8001938 <chThdExitS+0x38>
 8001928:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800192c:	079b      	lsls	r3, r3, #30
 800192e:	d103      	bne.n	8001938 <chThdExitS+0x38>
    REG_REMOVE(tp);
 8001930:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 8001934:	60d3      	str	r3, [r2, #12]
 8001936:	611a      	str	r2, [r3, #16]
}
 8001938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800193c:	200f      	movs	r0, #15
 800193e:	f7ff bf67 	b.w	8001810 <chSchGoSleepS>
 8001942:	bf00      	nop
 8001944:	200013b0 	.word	0x200013b0
	...

08001950 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8001952:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001954:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8001956:	d049      	beq.n	80019ec <chSchGoSleepTimeoutS+0x9c>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8001958:	4c3f      	ldr	r4, [pc, #252]	; (8001a58 <chSchGoSleepTimeoutS+0x108>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 800195a:	4f40      	ldr	r7, [pc, #256]	; (8001a5c <chSchGoSleepTimeoutS+0x10c>)
  vtp->par = par;
 800195c:	6963      	ldr	r3, [r4, #20]
 800195e:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001960:	4626      	mov	r6, r4
 8001962:	2902      	cmp	r1, #2
 8001964:	f856 3f18 	ldr.w	r3, [r6, #24]!
 8001968:	4605      	mov	r5, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800196a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800196e:	bf38      	it	cc
 8001970:	2102      	movcc	r1, #2
 8001972:	42b3      	cmp	r3, r6
 8001974:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vtp->func = vtfunc;
 8001976:	9704      	str	r7, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001978:	d05b      	beq.n	8001a32 <chSchGoSleepTimeoutS+0xe2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800197a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800197c:	1bd2      	subs	r2, r2, r7
 800197e:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001980:	d32e      	bcc.n	80019e0 <chSchGoSleepTimeoutS+0x90>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8001982:	6898      	ldr	r0, [r3, #8]
      p = p->next;
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
      delta -= p->delta;
 8001988:	1a09      	subs	r1, r1, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800198a:	4291      	cmp	r1, r2
 800198c:	d904      	bls.n	8001998 <chSchGoSleepTimeoutS+0x48>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 800198e:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8001990:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	428a      	cmp	r2, r1
 8001996:	d3fa      	bcc.n	800198e <chSchGoSleepTimeoutS+0x3e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 800199c:	af01      	add	r7, sp, #4
  vtp->next = p;
 800199e:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 80019a0:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 80019a2:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 80019a4:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80019aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 80019ae:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80019b0:	6222      	str	r2, [r4, #32]
    chSchGoSleepS(newstate);
 80019b2:	4628      	mov	r0, r5
 80019b4:	f7ff ff2c 	bl	8001810 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80019b8:	9b04      	ldr	r3, [sp, #16]
 80019ba:	b16b      	cbz	r3, 80019d8 <chSchGoSleepTimeoutS+0x88>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80019bc:	69a3      	ldr	r3, [r4, #24]
 80019be:	42bb      	cmp	r3, r7
 80019c0:	d01b      	beq.n	80019fa <chSchGoSleepTimeoutS+0xaa>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80019c2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80019c6:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 80019c8:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80019ca:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 80019cc:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80019ce:	d003      	beq.n	80019d8 <chSchGoSleepTimeoutS+0x88>
      vtp->next->delta += vtp->delta;
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	9903      	ldr	r1, [sp, #12]
 80019d4:	440a      	add	r2, r1
 80019d6:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 80019d8:	6963      	ldr	r3, [r4, #20]
}
 80019da:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80019dc:	b007      	add	sp, #28
 80019de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	4291      	cmp	r1, r2
 80019e4:	d2d1      	bcs.n	800198a <chSchGoSleepTimeoutS+0x3a>
  return systime + (systime_t)interval;
 80019e6:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80019e8:	6347      	str	r7, [r0, #52]	; 0x34
 80019ea:	e7ce      	b.n	800198a <chSchGoSleepTimeoutS+0x3a>
    chSchGoSleepS(newstate);
 80019ec:	4c1a      	ldr	r4, [pc, #104]	; (8001a58 <chSchGoSleepTimeoutS+0x108>)
 80019ee:	f7ff ff0f 	bl	8001810 <chSchGoSleepS>
  return currp->u.rdymsg;
 80019f2:	6963      	ldr	r3, [r4, #20]
}
 80019f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80019f6:	b007      	add	sp, #28
 80019f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80019fa:	9b01      	ldr	r3, [sp, #4]
 80019fc:	61a3      	str	r3, [r4, #24]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80019fe:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001a00:	42b3      	cmp	r3, r6
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001a02:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8001a04:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001a06:	d022      	beq.n	8001a4e <chSchGoSleepTimeoutS+0xfe>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8001a0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  ch.vtlist.next->delta += vtp->delta;
 8001a0e:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 8001a10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001a18:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8001a1a:	4282      	cmp	r2, r0
 8001a1c:	d9dc      	bls.n	80019d8 <chSchGoSleepTimeoutS+0x88>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8001a1e:	1acb      	subs	r3, r1, r3
 8001a20:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001a22:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001a24:	bf98      	it	ls
 8001a26:	1c82      	addls	r2, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8001a2c:	440a      	add	r2, r1
 8001a2e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a30:	e7d2      	b.n	80019d8 <chSchGoSleepTimeoutS+0x88>
 8001a32:	188b      	adds	r3, r1, r2
      ch.vtlist.next = vtp;
 8001a34:	af01      	add	r7, sp, #4
      ch.vtlist.lasttime = now;
 8001a36:	6262      	str	r2, [r4, #36]	; 0x24
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001a38:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 8001a3c:	e9c4 7706 	strd	r7, r7, [r4, #24]
      vtp->delta = delay;
 8001a40:	9103      	str	r1, [sp, #12]
  STM32_ST_TIM->SR     = 0;
 8001a42:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001a44:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001a46:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8001a48:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001a4a:	60c3      	str	r3, [r0, #12]
 8001a4c:	e7b1      	b.n	80019b2 <chSchGoSleepTimeoutS+0x62>
  STM32_ST_TIM->DIER = 0U;
 8001a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a52:	60da      	str	r2, [r3, #12]
    return;
 8001a54:	e7c0      	b.n	80019d8 <chSchGoSleepTimeoutS+0x88>
 8001a56:	bf00      	nop
 8001a58:	200013b0 	.word	0x200013b0
 8001a5c:	08000e31 	.word	0x08000e31

08001a60 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001a60:	b161      	cbz	r1, 8001a7c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8001a62:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001a64:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8001a66:	6952      	ldr	r2, [r2, #20]
  tp->queue.prev             = tqp->prev;
 8001a68:	6844      	ldr	r4, [r0, #4]
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001a70:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8001a72:	6022      	str	r2, [r4, #0]
}
 8001a74:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8001a76:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001a78:	f7ff bf6a 	b.w	8001950 <chSchGoSleepTimeoutS>
}
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200013b0 	.word	0x200013b0
	...

08001a90 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	4604      	mov	r4, r0
 8001a94:	460f      	mov	r7, r1
 8001a96:	4616      	mov	r6, r2
 8001a98:	2320      	movs	r3, #32
 8001a9a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001a9e:	e003      	b.n	8001aa8 <oqPutTimeout+0x18>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8001aa0:	f7ff ffde 	bl	8001a60 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	db18      	blt.n	8001ada <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8001aa8:	68a5      	ldr	r5, [r4, #8]
 8001aaa:	4631      	mov	r1, r6
 8001aac:	4620      	mov	r0, r4
 8001aae:	2d00      	cmp	r5, #0
 8001ab0:	d0f6      	beq.n	8001aa0 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001ab2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001ab4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001ab6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001ab8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8001aba:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8001abc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001abe:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001ac0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001ac4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001ac6:	bf24      	itt	cs
 8001ac8:	68e3      	ldrcs	r3, [r4, #12]
 8001aca:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8001acc:	69e3      	ldr	r3, [r4, #28]
 8001ace:	b103      	cbz	r3, 8001ad2 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8001ad0:	4798      	blx	r3
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8001ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ada:	f385 8811 	msr	BASEPRI, r5
 8001ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ae0 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001ae0:	3030      	adds	r0, #48	; 0x30
 8001ae2:	f7ff bfd5 	b.w	8001a90 <oqPutTimeout>
 8001ae6:	bf00      	nop
	...

08001af0 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001af0:	3030      	adds	r0, #48	; 0x30
 8001af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001af6:	f7ff bfcb 	b.w	8001a90 <oqPutTimeout>
 8001afa:	bf00      	nop
 8001afc:	0000      	movs	r0, r0
	...

08001b00 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	2320      	movs	r3, #32
 8001b04:	4605      	mov	r5, r0
 8001b06:	460e      	mov	r6, r1
 8001b08:	f383 8811 	msr	BASEPRI, r3
 8001b0c:	e003      	b.n	8001b16 <iqGetTimeout+0x16>
 8001b0e:	f7ff ffa7 	bl	8001a60 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001b12:	2800      	cmp	r0, #0
 8001b14:	db1a      	blt.n	8001b4c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8001b16:	68ac      	ldr	r4, [r5, #8]
 8001b18:	4631      	mov	r1, r6
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	2c00      	cmp	r4, #0
 8001b1e:	d0f6      	beq.n	8001b0e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8001b20:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8001b22:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001b24:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8001b26:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001b28:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001b2a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8001b2c:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8001b2e:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001b30:	bf28      	it	cs
 8001b32:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8001b34:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001b36:	bf28      	it	cs
 8001b38:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8001b3a:	69eb      	ldr	r3, [r5, #28]
 8001b3c:	b10b      	cbz	r3, 8001b42 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8001b3e:	4628      	mov	r0, r5
 8001b40:	4798      	blx	r3
 8001b42:	2300      	movs	r3, #0
 8001b44:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001b48:	4620      	mov	r0, r4
}
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
 8001b4c:	f384 8811 	msr	BASEPRI, r4
 8001b50:	bd70      	pop	{r4, r5, r6, pc}
 8001b52:	bf00      	nop
	...

08001b60 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001b60:	300c      	adds	r0, #12
 8001b62:	f7ff bfcd 	b.w	8001b00 <iqGetTimeout>
 8001b66:	bf00      	nop
	...

08001b70 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001b70:	300c      	adds	r0, #12
 8001b72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b76:	f7ff bfc3 	b.w	8001b00 <iqGetTimeout>
 8001b7a:	bf00      	nop
 8001b7c:	0000      	movs	r0, r0
	...

08001b80 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 8001b80:	b538      	push	{r3, r4, r5, lr}
 8001b82:	4604      	mov	r4, r0
 8001b84:	460d      	mov	r5, r1
 8001b86:	e005      	b.n	8001b94 <obqGetEmptyBufferTimeoutS+0x14>
    if (obqp->suspended) {
 8001b88:	7a23      	ldrb	r3, [r4, #8]
 8001b8a:	b983      	cbnz	r3, 8001bae <obqGetEmptyBufferTimeoutS+0x2e>
 8001b8c:	f7ff ff68 	bl	8001a60 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001b90:	2800      	cmp	r0, #0
 8001b92:	db0b      	blt.n	8001bac <obqGetEmptyBufferTimeoutS+0x2c>
  while (obqIsFullI(obqp)) {
 8001b94:	68e3      	ldr	r3, [r4, #12]
 8001b96:	4629      	mov	r1, r5
 8001b98:	4620      	mov	r0, r4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f4      	beq.n	8001b88 <obqGetEmptyBufferTimeoutS+0x8>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001b9e:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001ba0:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001ba2:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001ba4:	440b      	add	r3, r1
 8001ba6:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8001baa:	2000      	movs	r0, #0
}
 8001bac:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8001bae:	f06f 0001 	mvn.w	r0, #1
}
 8001bb2:	bd38      	pop	{r3, r4, r5, pc}
	...

08001bc0 <obqPutTimeout>:
                    sysinterval_t timeout) {
 8001bc0:	b570      	push	{r4, r5, r6, lr}
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	460d      	mov	r5, r1
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 8001bcc:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8001bce:	b1fe      	cbz	r6, 8001c10 <obqPutTimeout+0x50>
  *obqp->ptr = b;
 8001bd0:	7035      	strb	r5, [r6, #0]
  if (obqp->ptr >= obqp->top) {
 8001bd2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8001bd6:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8001bd8:	4293      	cmp	r3, r2
  obqp->ptr++;
 8001bda:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 8001bdc:	d314      	bcc.n	8001c08 <obqPutTimeout+0x48>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001bde:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8001be0:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8001be2:	69a1      	ldr	r1, [r4, #24]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001be4:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8001be6:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8001be8:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 8001bea:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 8001bec:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 8001bee:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8001bf0:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8001bf2:	bf24      	itt	cs
 8001bf4:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001bf6:	6123      	strcs	r3, [r4, #16]
  obqp->bcounter--;
 8001bf8:	3a01      	subs	r2, #1
  if (obqp->notify != NULL) {
 8001bfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 8001bfc:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 8001c02:	b10b      	cbz	r3, 8001c08 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 8001c04:	4620      	mov	r0, r4
 8001c06:	4798      	blx	r3
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f380 8811 	msr	BASEPRI, r0
}
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001c10:	4611      	mov	r1, r2
 8001c12:	f7ff ffb5 	bl	8001b80 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8001c16:	b908      	cbnz	r0, 8001c1c <obqPutTimeout+0x5c>
 8001c18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c1a:	e7d9      	b.n	8001bd0 <obqPutTimeout+0x10>
 8001c1c:	f386 8811 	msr	BASEPRI, r6
}
 8001c20:	bd70      	pop	{r4, r5, r6, pc}
 8001c22:	bf00      	nop
	...

08001c30 <_putt.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8001c30:	3044      	adds	r0, #68	; 0x44
 8001c32:	f7ff bfc5 	b.w	8001bc0 <obqPutTimeout>
 8001c36:	bf00      	nop
	...

08001c40 <_put.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8001c40:	3044      	adds	r0, #68	; 0x44
 8001c42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c46:	f7ff bfbb 	b.w	8001bc0 <obqPutTimeout>
 8001c4a:	bf00      	nop
 8001c4c:	0000      	movs	r0, r0
	...

08001c50 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 8001c50:	b538      	push	{r3, r4, r5, lr}
 8001c52:	4604      	mov	r4, r0
 8001c54:	460d      	mov	r5, r1
 8001c56:	e005      	b.n	8001c64 <ibqGetFullBufferTimeoutS+0x14>
    if (ibqp->suspended) {
 8001c58:	7a23      	ldrb	r3, [r4, #8]
 8001c5a:	b983      	cbnz	r3, 8001c7e <ibqGetFullBufferTimeoutS+0x2e>
 8001c5c:	f7ff ff00 	bl	8001a60 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001c60:	2800      	cmp	r0, #0
 8001c62:	db0b      	blt.n	8001c7c <ibqGetFullBufferTimeoutS+0x2c>
  while (ibqIsEmptyI(ibqp)) {
 8001c64:	68e3      	ldr	r3, [r4, #12]
 8001c66:	4629      	mov	r1, r5
 8001c68:	4620      	mov	r0, r4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f4      	beq.n	8001c58 <ibqGetFullBufferTimeoutS+0x8>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001c6e:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001c70:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001c72:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001c74:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001c76:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001c7a:	2000      	movs	r0, #0
}
 8001c7c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8001c7e:	f06f 0001 	mvn.w	r0, #1
}
 8001c82:	bd38      	pop	{r3, r4, r5, pc}
	...

08001c90 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	2320      	movs	r3, #32
 8001c94:	4604      	mov	r4, r0
 8001c96:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 8001c9a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8001c9c:	b1e5      	cbz	r5, 8001cd8 <ibqGetTimeout+0x48>
  msg = (msg_t)*ibqp->ptr;
 8001c9e:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (ibqp->ptr >= ibqp->top) {
 8001ca2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 8001ca4:	62a5      	str	r5, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8001ca6:	4295      	cmp	r5, r2
 8001ca8:	d311      	bcc.n	8001cce <ibqGetTimeout+0x3e>
  if (ibqp->brdptr >= ibqp->btop) {
 8001caa:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 8001cae:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8001cb0:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8001cb2:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8001cb4:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8001cb6:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8001cb8:	bf24      	itt	cs
 8001cba:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001cbc:	6163      	strcs	r3, [r4, #20]
  ibqp->bcounter--;
 8001cbe:	3a01      	subs	r2, #1
  if (ibqp->notify != NULL) {
 8001cc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8001cc2:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8001cc8:	b10b      	cbz	r3, 8001cce <ibqGetTimeout+0x3e>
    ibqp->notify(ibqp);
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4798      	blx	r3
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f383 8811 	msr	BASEPRI, r3
}
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001cd8:	f7ff ffba 	bl	8001c50 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8001cdc:	4606      	mov	r6, r0
 8001cde:	b908      	cbnz	r0, 8001ce4 <ibqGetTimeout+0x54>
 8001ce0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001ce2:	e7dc      	b.n	8001c9e <ibqGetTimeout+0xe>
 8001ce4:	f385 8811 	msr	BASEPRI, r5
      return msg;
 8001ce8:	e7f4      	b.n	8001cd4 <ibqGetTimeout+0x44>
 8001cea:	bf00      	nop
 8001cec:	0000      	movs	r0, r0
	...

08001cf0 <_gett.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8001cf0:	300c      	adds	r0, #12
 8001cf2:	f7ff bfcd 	b.w	8001c90 <ibqGetTimeout>
 8001cf6:	bf00      	nop
	...

08001d00 <_get.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8001d00:	300c      	adds	r0, #12
 8001d02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d06:	f7ff bfc3 	b.w	8001c90 <ibqGetTimeout>
 8001d0a:	bf00      	nop
 8001d0c:	0000      	movs	r0, r0
	...

08001d10 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001d10:	b508      	push	{r3, lr}
 8001d12:	4601      	mov	r1, r0
 8001d14:	2320      	movs	r3, #32
 8001d16:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001d1a:	2008      	movs	r0, #8
 8001d1c:	f7ff fe18 	bl	8001950 <chSchGoSleepTimeoutS>
 8001d20:	2300      	movs	r3, #0
 8001d22:	f383 8811 	msr	BASEPRI, r3
}
 8001d26:	bd08      	pop	{r3, pc}
	...

08001d30 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001d30:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001d32:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001d36:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001d38:	b113      	cbz	r3, 8001d40 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8001d40:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001d44:	6862      	ldr	r2, [r4, #4]
 8001d46:	68cb      	ldr	r3, [r1, #12]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	6819      	ldr	r1, [r3, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	64a3      	str	r3, [r4, #72]	; 0x48
 8001d50:	6461      	str	r1, [r4, #68]	; 0x44
 8001d52:	6893      	ldr	r3, [r2, #8]
 8001d54:	b36b      	cbz	r3, 8001db2 <_usb_ep0setup+0x82>
      !(usbp->config->requests_hook_cb(usbp))) {
 8001d56:	4620      	mov	r0, r4
 8001d58:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001d5a:	b350      	cbz	r0, 8001db2 <_usb_ep0setup+0x82>
 8001d5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d5e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 8001d62:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8001d66:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  max = (size_t)get_hword(&usbp->setup[6]);
 8001d6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if (usbp->ep0n > max) {
 8001d6e:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 8001d70:	bf3c      	itt	cc
 8001d72:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 8001d74:	4613      	movcc	r3, r2
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001d76:	0602      	lsls	r2, r0, #24
 8001d78:	f100 80df 	bmi.w	8001f3a <_usb_ep0setup+0x20a>
    if (usbp->ep0n != 0U) {
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 808f 	beq.w	8001ea0 <_usb_ep0setup+0x170>
      usbp->ep0state = USB_EP0_OUT_RX;
 8001d82:	2315      	movs	r3, #21
 8001d84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001d88:	2320      	movs	r3, #32
 8001d8a:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8001d8e:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d90:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001d92:	699b      	ldr	r3, [r3, #24]
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8001d94:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d98:	f042 0201 	orr.w	r2, r2, #1
  osp->rxcnt  = 0;
 8001d9c:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d9e:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8001da0:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8001da2:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7ff f99a 	bl	80010e0 <usb_lld_start_out>
 8001dac:	f385 8811 	msr	BASEPRI, r5
}
 8001db0:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8001db2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001db6:	f010 0660 	ands.w	r6, r0, #96	; 0x60
 8001dba:	d11c      	bne.n	8001df6 <_usb_ep0setup+0xc6>
           ((uint32_t)usbp->setup[1] << 8U))) {
 8001dbc:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001dc0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8001dc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001dc8:	f240 3202 	movw	r2, #770	; 0x302
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	f000 8113 	beq.w	8001ff8 <_usb_ep0setup+0x2c8>
 8001dd2:	d844      	bhi.n	8001e5e <_usb_ep0setup+0x12e>
 8001dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd8:	f000 8125 	beq.w	8002026 <_usb_ep0setup+0x2f6>
 8001ddc:	d922      	bls.n	8001e24 <_usb_ep0setup+0xf4>
 8001dde:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001de2:	f000 812f 	beq.w	8002044 <_usb_ep0setup+0x314>
 8001de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dea:	d104      	bne.n	8001df6 <_usb_ep0setup+0xc6>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001dec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	f000 80d2 	beq.w	8001f9a <_usb_ep0setup+0x26a>
 8001df6:	6d62      	ldr	r2, [r4, #84]	; 0x54
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001df8:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001dfc:	6861      	ldr	r1, [r4, #4]
 8001dfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e02:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001e06:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8001e0a:	680d      	ldr	r5, [r1, #0]
 8001e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e10:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8001e14:	b115      	cbz	r5, 8001e1c <_usb_ep0setup+0xec>
 8001e16:	2106      	movs	r1, #6
 8001e18:	4620      	mov	r0, r4
 8001e1a:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8001e1c:	2306      	movs	r3, #6
 8001e1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d060      	beq.n	8001eea <_usb_ep0setup+0x1ba>
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d150      	bne.n	8001ece <_usb_ep0setup+0x19e>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8001e2c:	f994 1048 	ldrsb.w	r1, [r4, #72]	; 0x48
 8001e30:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8001e34:	2900      	cmp	r1, #0
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8001e36:	f002 010f 	and.w	r1, r2, #15
 8001e3a:	bfb4      	ite	lt
 8001e3c:	3148      	addlt	r1, #72	; 0x48
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8001e3e:	3158      	addge	r1, #88	; 0x58
 8001e40:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e42:	0149      	lsls	r1, r1, #5
 8001e44:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8001e46:	040d      	lsls	r5, r1, #16
 8001e48:	d5d6      	bpl.n	8001df8 <_usb_ep0setup+0xc8>
  if (ctl & DOEPCTL_STALL)
 8001e4a:	0289      	lsls	r1, r1, #10
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8001e4c:	bf4c      	ite	mi
 8001e4e:	4a9c      	ldrmi	r2, [pc, #624]	; (80020c0 <_usb_ep0setup+0x390>)
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001e50:	4a9c      	ldrpl	r2, [pc, #624]	; (80020c4 <_usb_ep0setup+0x394>)
 8001e52:	63a2      	str	r2, [r4, #56]	; 0x38
 8001e54:	2102      	movs	r1, #2
 8001e56:	2200      	movs	r2, #0
 8001e58:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
        return true;
 8001e5c:	e781      	b.n	8001d62 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e62:	f000 80c2 	beq.w	8001fea <_usb_ep0setup+0x2ba>
 8001e66:	d947      	bls.n	8001ef8 <_usb_ep0setup+0x1c8>
 8001e68:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8001e6c:	d139      	bne.n	8001ee2 <_usb_ep0setup+0x1b2>
      if (usbp->state == USB_ACTIVE) {
 8001e6e:	7823      	ldrb	r3, [r4, #0]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	f000 809c 	beq.w	8001fae <_usb_ep0setup+0x27e>
      if (usbp->setup[2] != 0U) {
 8001e76:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001e7a:	b14b      	cbz	r3, 8001e90 <_usb_ep0setup+0x160>
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001e7c:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8001e7e:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
        usbp->state = USB_ACTIVE;
 8001e82:	2104      	movs	r1, #4
 8001e84:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001e86:	6813      	ldr	r3, [r2, #0]
 8001e88:	b113      	cbz	r3, 8001e90 <_usb_ep0setup+0x160>
 8001e8a:	2102      	movs	r1, #2
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001e90:	2300      	movs	r3, #0
 8001e92:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8001e96:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001e9a:	6423      	str	r3, [r4, #64]	; 0x40
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001e9c:	0603      	lsls	r3, r0, #24
 8001e9e:	d465      	bmi.n	8001f6c <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001ea0:	230b      	movs	r3, #11
 8001ea2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001eac:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001eae:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8001eb0:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 8001eb2:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8001eba:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8001ebc:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001ec0:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	f7ff f874 	bl	8000fb0 <usb_lld_start_in>
 8001ec8:	f385 8811 	msr	BASEPRI, r5
}
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d191      	bne.n	8001df6 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8001ed8:	6423      	str	r3, [r4, #64]	; 0x40
 8001eda:	e9c4 120e 	strd	r1, r2, [r4, #56]	; 0x38
 8001ede:	4613      	mov	r3, r2
 8001ee0:	e73f      	b.n	8001d62 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001ee2:	f640 4202 	movw	r2, #3074	; 0xc02
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d185      	bne.n	8001df6 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8001eea:	4b77      	ldr	r3, [pc, #476]	; (80020c8 <_usb_ep0setup+0x398>)
 8001eec:	63a3      	str	r3, [r4, #56]	; 0x38
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
    return true;
 8001ef6:	e734      	b.n	8001d62 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001ef8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001efc:	d06b      	beq.n	8001fd6 <_usb_ep0setup+0x2a6>
 8001efe:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	f63f af77 	bhi.w	8001df6 <_usb_ep0setup+0xc6>
  hw |= (uint16_t)*p << 8U;
 8001f08:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8001f0c:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8001f0e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8001f12:	684d      	ldr	r5, [r1, #4]
 8001f14:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8001f18:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8001f1c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001f20:	4620      	mov	r0, r4
 8001f22:	47a8      	blx	r5
    if (dp == NULL) {
 8001f24:	2800      	cmp	r0, #0
 8001f26:	f43f af66 	beq.w	8001df6 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8001f2a:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001f2e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001f32:	6426      	str	r6, [r4, #64]	; 0x40
 8001f34:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return true;
 8001f38:	e713      	b.n	8001d62 <_usb_ep0setup+0x32>
    if (usbp->ep0n != 0U) {
 8001f3a:	b1bb      	cbz	r3, 8001f6c <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_TX;
 8001f3c:	2309      	movs	r3, #9
 8001f3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001f42:	2320      	movs	r3, #32
 8001f44:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001f48:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f4a:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8001f4c:	695b      	ldr	r3, [r3, #20]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001f4e:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f52:	f042 0201 	orr.w	r2, r2, #1
  isp->txcnt  = 0;
 8001f56:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f58:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8001f5a:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8001f5c:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7ff f825 	bl	8000fb0 <usb_lld_start_in>
 8001f66:	f385 8811 	msr	BASEPRI, r5
}
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001f6c:	2314      	movs	r3, #20
 8001f6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001f72:	2320      	movs	r3, #32
 8001f74:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8001f78:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f7a:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001f7c:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8001f7e:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8001f86:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8001f88:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 8001f8c:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 8001f8e:	4629      	mov	r1, r5
 8001f90:	f7ff f8a6 	bl	80010e0 <usb_lld_start_out>
 8001f94:	f385 8811 	msr	BASEPRI, r5
}
 8001f98:	bd70      	pop	{r4, r5, r6, pc}
      usbp->status |= 2U;
 8001f9a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001f9e:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status |= 2U;
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001fa4:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status |= 2U;
 8001fa8:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 8001fac:	e776      	b.n	8001e9c <_usb_ep0setup+0x16c>
 8001fae:	2320      	movs	r3, #32
 8001fb0:	f383 8811 	msr	BASEPRI, r3
        usbDisableEndpointsI(usbp);
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7ff fa63 	bl	8001480 <usbDisableEndpointsI>
 8001fba:	f386 8811 	msr	BASEPRI, r6
        usbp->state = USB_SELECTED;
 8001fbe:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001fc0:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 8001fc2:	f884 604f 	strb.w	r6, [r4, #79]	; 0x4f
        usbp->state = USB_SELECTED;
 8001fc6:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f43f af53 	beq.w	8001e76 <_usb_ep0setup+0x146>
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4798      	blx	r3
 8001fd4:	e74f      	b.n	8001e76 <_usb_ep0setup+0x146>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8001fd6:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8001fda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001fde:	d048      	beq.n	8002072 <_usb_ep0setup+0x342>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8001fe6:	6423      	str	r3, [r4, #64]	; 0x40
    return true;
 8001fe8:	e758      	b.n	8001e9c <_usb_ep0setup+0x16c>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8001fea:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 8001ff4:	6426      	str	r6, [r4, #64]	; 0x40
 8001ff6:	e6b4      	b.n	8001d62 <_usb_ep0setup+0x32>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001ff8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f47f aefa 	bne.w	8001df6 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8002002:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002006:	f013 020f 	ands.w	r2, r3, #15
 800200a:	d0e9      	beq.n	8001fe0 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800200c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002010:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002012:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002016:	d144      	bne.n	80020a2 <_usb_ep0setup+0x372>
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8002018:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800201c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002020:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002024:	e7dc      	b.n	8001fe0 <_usb_ep0setup+0x2b0>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8002026:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800202a:	2b01      	cmp	r3, #1
 800202c:	f47f aee3 	bne.w	8001df6 <_usb_ep0setup+0xc6>
      usbp->status &= ~2U;
 8002030:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002034:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status &= ~2U;
 8002036:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800203a:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status &= ~2U;
 800203e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 8002042:	e72b      	b.n	8001e9c <_usb_ep0setup+0x16c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8002044:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002048:	2b00      	cmp	r3, #0
 800204a:	f47f aed4 	bne.w	8001df6 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800204e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002052:	f013 020f 	ands.w	r2, r3, #15
 8002056:	d0c3      	beq.n	8001fe0 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8002058:	f013 0f80 	tst.w	r3, #128	; 0x80
 800205c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800205e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002062:	d125      	bne.n	80020b0 <_usb_ep0setup+0x380>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8002064:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002068:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800206c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8002070:	e7b6      	b.n	8001fe0 <_usb_ep0setup+0x2b0>
  usbp->address = usbp->setup[2];
 8002072:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
  stm32_otg_t *otgp = usbp->otg;
 8002076:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002078:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 800207c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8002080:	6865      	ldr	r5, [r4, #4]
 8002082:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002086:	682d      	ldr	r5, [r5, #0]
 8002088:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800208c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8002090:	b125      	cbz	r5, 800209c <_usb_ep0setup+0x36c>
 8002092:	4620      	mov	r0, r4
 8002094:	2101      	movs	r1, #1
 8002096:	47a8      	blx	r5
 8002098:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  usbp->state = USB_SELECTED;
 800209c:	2303      	movs	r3, #3
 800209e:	7023      	strb	r3, [r4, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80020a0:	e79e      	b.n	8001fe0 <_usb_ep0setup+0x2b0>
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 80020a2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80020a6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80020aa:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80020ae:	e797      	b.n	8001fe0 <_usb_ep0setup+0x2b0>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 80020b0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80020b4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80020b8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80020bc:	e790      	b.n	8001fe0 <_usb_ep0setup+0x2b0>
 80020be:	bf00      	nop
 80020c0:	08006428 	.word	0x08006428
 80020c4:	08006384 	.word	0x08006384
 80020c8:	080066d4 	.word	0x080066d4
 80020cc:	00000000 	.word	0x00000000

080020d0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80020d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020d4:	b085      	sub	sp, #20
 80020d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 80020da:	69c7      	ldr	r7, [r0, #28]
 80020dc:	f04f 0920 	mov.w	r9, #32
 80020e0:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 80020e4:	b3a2      	cbz	r2, 8002150 <oqWriteTimeout+0x80>
 80020e6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80020ea:	4604      	mov	r4, r0
 80020ec:	460e      	mov	r6, r1
 80020ee:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 80020f2:	68a2      	ldr	r2, [r4, #8]
 80020f4:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80020f6:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 80020fa:	bf8c      	ite	hi
 80020fc:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 80020fe:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002100:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8002104:	45a8      	cmp	r8, r5
 8002106:	d844      	bhi.n	8002192 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 8002108:	d229      	bcs.n	800215e <oqWriteTimeout+0x8e>
    s2 = n - s1;
 800210a:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800210e:	4642      	mov	r2, r8
 8002110:	4631      	mov	r1, r6
    s2 = n - s1;
 8002112:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002114:	f7fe f8fa 	bl	800030c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002118:	eb06 0108 	add.w	r1, r6, r8
 800211c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002120:	68e0      	ldr	r0, [r4, #12]
 8002122:	4642      	mov	r2, r8
 8002124:	f7fe f8f2 	bl	800030c <memcpy>
  oqp->q_counter -= n;
 8002128:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 800212a:	68e1      	ldr	r1, [r4, #12]
 800212c:	4643      	mov	r3, r8
 800212e:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 8002130:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002132:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8002134:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002136:	b10f      	cbz	r7, 800213c <oqWriteTimeout+0x6c>
        nfy(oqp);
 8002138:	4620      	mov	r0, r4
 800213a:	47b8      	blx	r7
 800213c:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8002140:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002144:	442e      	add	r6, r5
 8002146:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800214a:	f1bb 0f00 	cmp.w	fp, #0
 800214e:	d1d0      	bne.n	80020f2 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8002150:	9803      	ldr	r0, [sp, #12]
 8002152:	2300      	movs	r3, #0
 8002154:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002158:	b005      	add	sp, #20
 800215a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800215e:	462a      	mov	r2, r5
 8002160:	4631      	mov	r1, r6
 8002162:	f7fe f8d3 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002166:	68e2      	ldr	r2, [r4, #12]
 8002168:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 800216a:	68a2      	ldr	r2, [r4, #8]
 800216c:	1b52      	subs	r2, r2, r5
 800216e:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002170:	2d00      	cmp	r5, #0
 8002172:	d1e0      	bne.n	8002136 <oqWriteTimeout+0x66>
 8002174:	9902      	ldr	r1, [sp, #8]
 8002176:	4620      	mov	r0, r4
 8002178:	f7ff fc72 	bl	8001a60 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800217c:	2800      	cmp	r0, #0
 800217e:	d0b8      	beq.n	80020f2 <oqWriteTimeout+0x22>
 8002180:	9b03      	ldr	r3, [sp, #12]
 8002182:	eba3 000b 	sub.w	r0, r3, fp
 8002186:	2300      	movs	r3, #0
 8002188:	f383 8811 	msr	BASEPRI, r3
}
 800218c:	b005      	add	sp, #20
 800218e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002192:	462a      	mov	r2, r5
 8002194:	4631      	mov	r1, r6
 8002196:	f7fe f8b9 	bl	800030c <memcpy>
    oqp->q_wrptr += n;
 800219a:	6962      	ldr	r2, [r4, #20]
 800219c:	442a      	add	r2, r5
 800219e:	6162      	str	r2, [r4, #20]
 80021a0:	e7e3      	b.n	800216a <oqWriteTimeout+0x9a>
 80021a2:	bf00      	nop
	...

080021b0 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80021b0:	3030      	adds	r0, #48	; 0x30
 80021b2:	f7ff bf8d 	b.w	80020d0 <oqWriteTimeout>
 80021b6:	bf00      	nop
	...

080021c0 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80021c0:	3030      	adds	r0, #48	; 0x30
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c6:	f7ff bf83 	b.w	80020d0 <oqWriteTimeout>
 80021ca:	bf00      	nop
 80021cc:	0000      	movs	r0, r0
	...

080021d0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80021d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021d4:	b085      	sub	sp, #20
 80021d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 80021da:	69c7      	ldr	r7, [r0, #28]
 80021dc:	f04f 0920 	mov.w	r9, #32
 80021e0:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80021e4:	2a00      	cmp	r2, #0
 80021e6:	d034      	beq.n	8002252 <iqReadTimeout+0x82>
 80021e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80021ec:	4604      	mov	r4, r0
 80021ee:	460e      	mov	r6, r1
 80021f0:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 80021f4:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80021f6:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 80021f8:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80021fa:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 80021fc:	bf8c      	ite	hi
 80021fe:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8002200:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002202:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8002206:	45a8      	cmp	r8, r5
 8002208:	d844      	bhi.n	8002294 <iqReadTimeout+0xc4>
  else if (n > s1) {
 800220a:	d229      	bcs.n	8002260 <iqReadTimeout+0x90>
    s2 = n - s1;
 800220c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002210:	4642      	mov	r2, r8
 8002212:	4630      	mov	r0, r6
    s2 = n - s1;
 8002214:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002216:	f7fe f879 	bl	800030c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800221a:	eb06 0008 	add.w	r0, r6, r8
 800221e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002222:	68e1      	ldr	r1, [r4, #12]
 8002224:	4642      	mov	r2, r8
 8002226:	f7fe f871 	bl	800030c <memcpy>
  iqp->q_counter -= n;
 800222a:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 800222c:	68e1      	ldr	r1, [r4, #12]
 800222e:	4643      	mov	r3, r8
 8002230:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 8002232:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002234:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8002236:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8002238:	b10f      	cbz	r7, 800223e <iqReadTimeout+0x6e>
        nfy(iqp);
 800223a:	4620      	mov	r0, r4
 800223c:	47b8      	blx	r7
 800223e:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8002242:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002246:	442e      	add	r6, r5
 8002248:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800224c:	f1bb 0f00 	cmp.w	fp, #0
 8002250:	d1d0      	bne.n	80021f4 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 8002252:	9803      	ldr	r0, [sp, #12]
 8002254:	2300      	movs	r3, #0
 8002256:	f383 8811 	msr	BASEPRI, r3
}
 800225a:	b005      	add	sp, #20
 800225c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002260:	462a      	mov	r2, r5
 8002262:	4630      	mov	r0, r6
 8002264:	f7fe f852 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002268:	68e2      	ldr	r2, [r4, #12]
 800226a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800226c:	68a2      	ldr	r2, [r4, #8]
 800226e:	1b52      	subs	r2, r2, r5
 8002270:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002272:	2d00      	cmp	r5, #0
 8002274:	d1e0      	bne.n	8002238 <iqReadTimeout+0x68>
 8002276:	9902      	ldr	r1, [sp, #8]
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff fbf1 	bl	8001a60 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800227e:	2800      	cmp	r0, #0
 8002280:	d0b8      	beq.n	80021f4 <iqReadTimeout+0x24>
 8002282:	9b03      	ldr	r3, [sp, #12]
 8002284:	eba3 000b 	sub.w	r0, r3, fp
 8002288:	2300      	movs	r3, #0
 800228a:	f383 8811 	msr	BASEPRI, r3
}
 800228e:	b005      	add	sp, #20
 8002290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002294:	462a      	mov	r2, r5
 8002296:	4630      	mov	r0, r6
 8002298:	f7fe f838 	bl	800030c <memcpy>
    iqp->q_rdptr += n;
 800229c:	69a2      	ldr	r2, [r4, #24]
 800229e:	442a      	add	r2, r5
 80022a0:	61a2      	str	r2, [r4, #24]
 80022a2:	e7e3      	b.n	800226c <iqReadTimeout+0x9c>
	...

080022b0 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80022b0:	300c      	adds	r0, #12
 80022b2:	f7ff bf8d 	b.w	80021d0 <iqReadTimeout>
 80022b6:	bf00      	nop
	...

080022c0 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80022c0:	300c      	adds	r0, #12
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c6:	f7ff bf83 	b.w	80021d0 <iqReadTimeout>
 80022ca:	bf00      	nop
 80022cc:	0000      	movs	r0, r0
	...

080022d0 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 80022d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d4:	4605      	mov	r5, r0
 80022d6:	b083      	sub	sp, #12
 80022d8:	460c      	mov	r4, r1
 80022da:	4692      	mov	sl, r2
 80022dc:	4699      	mov	r9, r3
 80022de:	f04f 0820 	mov.w	r8, #32
 80022e2:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 80022e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  size_t w = 0;
 80022e8:	2600      	movs	r6, #0
  obqp->ptr = NULL;
 80022ea:	4637      	mov	r7, r6
    if (obqp->ptr == NULL) {
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d041      	beq.n	8002374 <obqWriteTimeout+0xa4>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 80022f0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    if (size > (n - w)) {
 80022f2:	ebaa 0b06 	sub.w	fp, sl, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 80022f6:	1aca      	subs	r2, r1, r3
    if (size > (n - w)) {
 80022f8:	4593      	cmp	fp, r2
 80022fa:	bf28      	it	cs
 80022fc:	4693      	movcs	fp, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 80022fe:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8002302:	d940      	bls.n	8002386 <obqWriteTimeout+0xb6>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8002304:	4621      	mov	r1, r4
 8002306:	4618      	mov	r0, r3
 8002308:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800230c:	680c      	ldr	r4, [r1, #0]
 800230e:	684a      	ldr	r2, [r1, #4]
 8002310:	688b      	ldr	r3, [r1, #8]
 8002312:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002316:	f8c0 c00c 	str.w	ip, [r0, #12]
 800231a:	3110      	adds	r1, #16
 800231c:	4571      	cmp	r1, lr
 800231e:	6004      	str	r4, [r0, #0]
 8002320:	6042      	str	r2, [r0, #4]
 8002322:	6083      	str	r3, [r0, #8]
 8002324:	f100 0010 	add.w	r0, r0, #16
 8002328:	d1f0      	bne.n	800230c <obqWriteTimeout+0x3c>
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800232a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800232c:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 800232e:	460c      	mov	r4, r1
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8002330:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002332:	62ab      	str	r3, [r5, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8002334:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002336:	429a      	cmp	r2, r3
 8002338:	d813      	bhi.n	8002362 <obqWriteTimeout+0x92>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800233a:	69ea      	ldr	r2, [r5, #28]
  *((size_t *)obqp->bwrptr) = size;
 800233c:	692b      	ldr	r3, [r5, #16]
  if (obqp->bwrptr >= obqp->btop) {
 800233e:	69a8      	ldr	r0, [r5, #24]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002340:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8002342:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8002344:	69e9      	ldr	r1, [r5, #28]
  obqp->bcounter--;
 8002346:	68ea      	ldr	r2, [r5, #12]
  obqp->ptr = NULL;
 8002348:	62af      	str	r7, [r5, #40]	; 0x28
  obqp->bwrptr += obqp->bsize;
 800234a:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 800234c:	4283      	cmp	r3, r0
  obqp->bwrptr += obqp->bsize;
 800234e:	612b      	str	r3, [r5, #16]
    obqp->bwrptr = obqp->buffers;
 8002350:	bf24      	itt	cs
 8002352:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 8002354:	612b      	strcs	r3, [r5, #16]
  if (obqp->notify != NULL) {
 8002356:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  obqp->bcounter--;
 8002358:	3a01      	subs	r2, #1
 800235a:	60ea      	str	r2, [r5, #12]
  if (obqp->notify != NULL) {
 800235c:	b10b      	cbz	r3, 8002362 <obqWriteTimeout+0x92>
    obqp->notify(obqp);
 800235e:	4628      	mov	r0, r5
 8002360:	4798      	blx	r3
 8002362:	f387 8811 	msr	BASEPRI, r7
    if (w >= n) {
 8002366:	4556      	cmp	r6, sl
 8002368:	d21a      	bcs.n	80023a0 <obqWriteTimeout+0xd0>
 800236a:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 800236e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1bd      	bne.n	80022f0 <obqWriteTimeout+0x20>
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8002374:	4649      	mov	r1, r9
 8002376:	4628      	mov	r0, r5
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	f7ff fc01 	bl	8001b80 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 800237e:	9b01      	ldr	r3, [sp, #4]
 8002380:	b960      	cbnz	r0, 800239c <obqWriteTimeout+0xcc>
 8002382:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002384:	e7b4      	b.n	80022f0 <obqWriteTimeout+0x20>
      memcpy(obqp->ptr, bp, size);
 8002386:	4618      	mov	r0, r3
 8002388:	4621      	mov	r1, r4
 800238a:	465a      	mov	r2, fp
 800238c:	f7fd ffbe 	bl	800030c <memcpy>
      obqp->ptr += size;
 8002390:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002392:	445b      	add	r3, fp
      w         += size;
 8002394:	445e      	add	r6, fp
      bp        += size;
 8002396:	445c      	add	r4, fp
      obqp->ptr += size;
 8002398:	62ab      	str	r3, [r5, #40]	; 0x28
      w         += size;
 800239a:	e7cb      	b.n	8002334 <obqWriteTimeout+0x64>
 800239c:	f383 8811 	msr	BASEPRI, r3
}
 80023a0:	4630      	mov	r0, r6
 80023a2:	b003      	add	sp, #12
 80023a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023b0 <_writet.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 80023b0:	3044      	adds	r0, #68	; 0x44
 80023b2:	f7ff bf8d 	b.w	80022d0 <obqWriteTimeout>
 80023b6:	bf00      	nop
	...

080023c0 <_write.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 80023c0:	3044      	adds	r0, #68	; 0x44
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c6:	f7ff bf83 	b.w	80022d0 <obqWriteTimeout>
 80023ca:	bf00      	nop
 80023cc:	0000      	movs	r0, r0
	...

080023d0 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 80023d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d4:	b083      	sub	sp, #12
 80023d6:	4605      	mov	r5, r0
 80023d8:	460f      	mov	r7, r1
 80023da:	4693      	mov	fp, r2
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	f04f 0920 	mov.w	r9, #32
 80023e2:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 80023e6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  size_t r = 0;
 80023e8:	2600      	movs	r6, #0
  ibqp->ptr = NULL;
 80023ea:	46b0      	mov	r8, r6
    if (ibqp->ptr == NULL) {
 80023ec:	2c00      	cmp	r4, #0
 80023ee:	d03f      	beq.n	8002470 <ibqReadTimeout+0xa0>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80023f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if (size > (n - r)) {
 80023f2:	ebab 0206 	sub.w	r2, fp, r6
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80023f6:	1b1b      	subs	r3, r3, r4
    if (size > (n - r)) {
 80023f8:	429a      	cmp	r2, r3
 80023fa:	bf28      	it	cs
 80023fc:	461a      	movcs	r2, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 80023fe:	2a40      	cmp	r2, #64	; 0x40
 8002400:	4692      	mov	sl, r2
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8002402:	4621      	mov	r1, r4
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8002404:	d93b      	bls.n	800247e <ibqReadTimeout+0xae>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8002406:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800240a:	463b      	mov	r3, r7
 800240c:	680c      	ldr	r4, [r1, #0]
 800240e:	6848      	ldr	r0, [r1, #4]
 8002410:	688a      	ldr	r2, [r1, #8]
 8002412:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002416:	f8c3 c00c 	str.w	ip, [r3, #12]
 800241a:	3110      	adds	r1, #16
 800241c:	4571      	cmp	r1, lr
 800241e:	601c      	str	r4, [r3, #0]
 8002420:	6058      	str	r0, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	f103 0310 	add.w	r3, r3, #16
 8002428:	d1f0      	bne.n	800240c <ibqReadTimeout+0x3c>
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800242a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800242c:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 800242e:	3740      	adds	r7, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 8002430:	3640      	adds	r6, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002432:	62ab      	str	r3, [r5, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8002434:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002436:	429a      	cmp	r2, r3
 8002438:	d811      	bhi.n	800245e <ibqReadTimeout+0x8e>
  if (ibqp->brdptr >= ibqp->btop) {
 800243a:	e9d5 2106 	ldrd	r2, r1, [r5, #24]
  ibqp->brdptr += ibqp->bsize;
 800243e:	696b      	ldr	r3, [r5, #20]
  ibqp->bcounter--;
 8002440:	68e8      	ldr	r0, [r5, #12]
  ibqp->ptr = NULL;
 8002442:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  ibqp->brdptr += ibqp->bsize;
 8002446:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 8002448:	4293      	cmp	r3, r2
  ibqp->brdptr += ibqp->bsize;
 800244a:	616b      	str	r3, [r5, #20]
    ibqp->brdptr = ibqp->buffers;
 800244c:	bf24      	itt	cs
 800244e:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 8002450:	616b      	strcs	r3, [r5, #20]
  if (ibqp->notify != NULL) {
 8002452:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  ibqp->bcounter--;
 8002454:	3801      	subs	r0, #1
 8002456:	60e8      	str	r0, [r5, #12]
  if (ibqp->notify != NULL) {
 8002458:	b10b      	cbz	r3, 800245e <ibqReadTimeout+0x8e>
    ibqp->notify(ibqp);
 800245a:	4628      	mov	r0, r5
 800245c:	4798      	blx	r3
 800245e:	f388 8811 	msr	BASEPRI, r8
    if (r >= n) {
 8002462:	455e      	cmp	r6, fp
 8002464:	d216      	bcs.n	8002494 <ibqReadTimeout+0xc4>
 8002466:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 800246a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800246c:	2c00      	cmp	r4, #0
 800246e:	d1bf      	bne.n	80023f0 <ibqReadTimeout+0x20>
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8002470:	9901      	ldr	r1, [sp, #4]
 8002472:	4628      	mov	r0, r5
 8002474:	f7ff fbec 	bl	8001c50 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8002478:	b950      	cbnz	r0, 8002490 <ibqReadTimeout+0xc0>
 800247a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800247c:	e7b8      	b.n	80023f0 <ibqReadTimeout+0x20>
      memcpy(bp, ibqp->ptr, size);
 800247e:	4638      	mov	r0, r7
 8002480:	f7fd ff44 	bl	800030c <memcpy>
      ibqp->ptr += size;
 8002484:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002486:	4453      	add	r3, sl
      r         += size;
 8002488:	4456      	add	r6, sl
      bp        += size;
 800248a:	4457      	add	r7, sl
      ibqp->ptr += size;
 800248c:	62ab      	str	r3, [r5, #40]	; 0x28
      r         += size;
 800248e:	e7d1      	b.n	8002434 <ibqReadTimeout+0x64>
 8002490:	f384 8811 	msr	BASEPRI, r4
}
 8002494:	4630      	mov	r0, r6
 8002496:	b003      	add	sp, #12
 8002498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800249c:	0000      	movs	r0, r0
	...

080024a0 <_readt.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 80024a0:	300c      	adds	r0, #12
 80024a2:	f7ff bf95 	b.w	80023d0 <ibqReadTimeout>
 80024a6:	bf00      	nop
	...

080024b0 <_read.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 80024b0:	300c      	adds	r0, #12
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024b6:	f7ff bf8b 	b.w	80023d0 <ibqReadTimeout>
 80024ba:	bf00      	nop
 80024bc:	0000      	movs	r0, r0
	...

080024c0 <get_history>:
    shp->sh_end -= shp->sh_size;
  *(shp->sh_buffer + shp->sh_end) = 0;
  shp->sh_cur = 0;
}

static int get_history(ShellHistory *shp, char *line, int dir) {
 80024c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (shp == NULL)
    return -1;

  /* Count the number of lines saved in the buffer */
  int idx = shp->sh_beg;
  while (idx != shp->sh_end) {
 80024c4:	e9d0 4602 	ldrd	r4, r6, [r0, #8]
 80024c8:	42b4      	cmp	r4, r6
static int get_history(ShellHistory *shp, char *line, int dir) {
 80024ca:	4607      	mov	r7, r0
 80024cc:	4688      	mov	r8, r1
  while (idx != shp->sh_end) {
 80024ce:	d053      	beq.n	8002578 <get_history+0xb8>
    idx += *(shp->sh_buffer + idx) + 1;
    if (idx >= shp->sh_size)
 80024d0:	e9d0 c000 	ldrd	ip, r0, [r0]
 80024d4:	4623      	mov	r3, r4
  int count=0;
 80024d6:	2100      	movs	r1, #0
    idx += *(shp->sh_buffer + idx) + 1;
 80024d8:	f81c 5003 	ldrb.w	r5, [ip, r3]
 80024dc:	3501      	adds	r5, #1
 80024de:	442b      	add	r3, r5
    if (idx >= shp->sh_size)
 80024e0:	4298      	cmp	r0, r3
      idx -= shp->sh_size;
 80024e2:	bfd8      	it	le
 80024e4:	1a1b      	suble	r3, r3, r0
  while (idx != shp->sh_end) {
 80024e6:	42b3      	cmp	r3, r6
    count++;
 80024e8:	f101 0101 	add.w	r1, r1, #1
  while (idx != shp->sh_end) {
 80024ec:	d1f4      	bne.n	80024d8 <get_history+0x18>
  }

  if (dir == SHELL_HIST_DIR_FW) {
 80024ee:	2a01      	cmp	r2, #1
    if (shp->sh_cur > 0)
 80024f0:	693d      	ldr	r5, [r7, #16]
  if (dir == SHELL_HIST_DIR_FW) {
 80024f2:	d03c      	beq.n	800256e <get_history+0xae>
      shp->sh_cur -= 2;
    else
      return 0;
  }

  if (count >= shp->sh_cur) {
 80024f4:	42a9      	cmp	r1, r5
 80024f6:	db53      	blt.n	80025a0 <get_history+0xe0>
    idx = shp->sh_beg;
    int i = 0;
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80024f8:	42b4      	cmp	r4, r6
 80024fa:	d054      	beq.n	80025a6 <get_history+0xe6>
 80024fc:	1e4b      	subs	r3, r1, #1
 80024fe:	429d      	cmp	r5, r3
 8002500:	d054      	beq.n	80025ac <get_history+0xec>
      idx += *(shp->sh_buffer + idx) + 1;
      if (idx >= shp->sh_size)
 8002502:	e9d7 ec00 	ldrd	lr, ip, [r7]
    int i = 0;
 8002506:	2000      	movs	r0, #0
 8002508:	e001      	b.n	800250e <get_history+0x4e>
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 800250a:	429d      	cmp	r5, r3
 800250c:	d017      	beq.n	800253e <get_history+0x7e>
      idx += *(shp->sh_buffer + idx) + 1;
 800250e:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8002512:	3301      	adds	r3, #1
 8002514:	441c      	add	r4, r3
      if (idx >= shp->sh_size)
 8002516:	45a4      	cmp	ip, r4
        idx -= shp->sh_size;
      i++;
 8002518:	f100 0001 	add.w	r0, r0, #1
        idx -= shp->sh_size;
 800251c:	bfd8      	it	le
 800251e:	eba4 040c 	suble.w	r4, r4, ip
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8002522:	43c3      	mvns	r3, r0
 8002524:	42b4      	cmp	r4, r6
 8002526:	440b      	add	r3, r1
 8002528:	d1ef      	bne.n	800250a <get_history+0x4a>
    }

    int length = *(shp->sh_buffer + idx);
 800252a:	f81e 4006 	ldrb.w	r4, [lr, r6]

    if (length > 0) {
 800252e:	b95c      	cbnz	r4, 8002548 <get_history+0x88>
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
      }
      return length;
    }
    else if (dir == SHELL_HIST_DIR_FW) {
 8002530:	2a01      	cmp	r2, #1
 8002532:	d135      	bne.n	80025a0 <get_history+0xe0>
      shp->sh_cur++;
 8002534:	3501      	adds	r5, #1
 8002536:	613d      	str	r5, [r7, #16]
      return 0;
    }
  }
  return -1;
}
 8002538:	4620      	mov	r0, r4
 800253a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 800253e:	4626      	mov	r6, r4
    int length = *(shp->sh_buffer + idx);
 8002540:	f81e 4006 	ldrb.w	r4, [lr, r6]
    if (length > 0) {
 8002544:	2c00      	cmp	r4, #0
 8002546:	d0f3      	beq.n	8002530 <get_history+0x70>
      shp->sh_cur++;
 8002548:	3501      	adds	r5, #1
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 800254a:	2240      	movs	r2, #64	; 0x40
      shp->sh_cur++;
 800254c:	613d      	str	r5, [r7, #16]
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 800254e:	2100      	movs	r1, #0
 8002550:	4640      	mov	r0, r8
 8002552:	f003 f981 	bl	8005858 <memset>
      if ((idx + length) < shp->sh_size) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	19a2      	adds	r2, r4, r6
 800255a:	429a      	cmp	r2, r3
 800255c:	da10      	bge.n	8002580 <get_history+0xc0>
        memcpy(line, (shp->sh_buffer + idx + 1), length);
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	3601      	adds	r6, #1
 8002562:	4431      	add	r1, r6
 8002564:	4640      	mov	r0, r8
 8002566:	4622      	mov	r2, r4
 8002568:	f7fd fed0 	bl	800030c <memcpy>
 800256c:	e7e4      	b.n	8002538 <get_history+0x78>
    if (shp->sh_cur > 0)
 800256e:	2d00      	cmp	r5, #0
 8002570:	dd04      	ble.n	800257c <get_history+0xbc>
      shp->sh_cur -= 2;
 8002572:	3d02      	subs	r5, #2
 8002574:	613d      	str	r5, [r7, #16]
 8002576:	e7bd      	b.n	80024f4 <get_history+0x34>
  int count=0;
 8002578:	2100      	movs	r1, #0
 800257a:	e7b8      	b.n	80024ee <get_history+0x2e>
      return 0;
 800257c:	2400      	movs	r4, #0
 800257e:	e7db      	b.n	8002538 <get_history+0x78>
        int part_len = shp->sh_size - idx - 1;
 8002580:	1b9b      	subs	r3, r3, r6
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8002582:	6839      	ldr	r1, [r7, #0]
        int part_len = shp->sh_size - idx - 1;
 8002584:	1e5d      	subs	r5, r3, #1
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8002586:	3601      	adds	r6, #1
 8002588:	4431      	add	r1, r6
 800258a:	462a      	mov	r2, r5
 800258c:	4640      	mov	r0, r8
 800258e:	f7fd febd 	bl	800030c <memcpy>
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 8002592:	6839      	ldr	r1, [r7, #0]
 8002594:	eb08 0005 	add.w	r0, r8, r5
 8002598:	1b62      	subs	r2, r4, r5
 800259a:	f7fd feb7 	bl	800030c <memcpy>
 800259e:	e7cb      	b.n	8002538 <get_history+0x78>
  return -1;
 80025a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80025a4:	e7c8      	b.n	8002538 <get_history+0x78>
 80025a6:	f8d7 e000 	ldr.w	lr, [r7]
 80025aa:	e7be      	b.n	800252a <get_history+0x6a>
 80025ac:	f8d7 e000 	ldr.w	lr, [r7]
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80025b0:	4626      	mov	r6, r4
 80025b2:	e7ba      	b.n	800252a <get_history+0x6a>
	...

080025c0 <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
 80025c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (epcp->in_state != NULL) {
 80025c4:	6953      	ldr	r3, [r2, #20]
 80025c6:	eb00 0781 	add.w	r7, r0, r1, lsl #2
                      const USBEndpointConfig *epcp) {
 80025ca:	460c      	mov	r4, r1
  usbp->epc[ep] = epcp;
 80025cc:	60fa      	str	r2, [r7, #12]
  if (epcp->in_state != NULL) {
 80025ce:	fa0f f881 	sxth.w	r8, r1
 80025d2:	b123      	cbz	r3, 80025de <usbInitEndpointI+0x1e>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80025d4:	2100      	movs	r1, #0
 80025d6:	6019      	str	r1, [r3, #0]
 80025d8:	6059      	str	r1, [r3, #4]
 80025da:	6099      	str	r1, [r3, #8]
 80025dc:	60d9      	str	r1, [r3, #12]
  if (epcp->out_state != NULL) {
 80025de:	6993      	ldr	r3, [r2, #24]
 80025e0:	b123      	cbz	r3, 80025ec <usbInitEndpointI+0x2c>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80025ec:	68fb      	ldr	r3, [r7, #12]
  stm32_otg_t *otgp = usbp->otg;
 80025ee:	6d45      	ldr	r5, [r0, #84]	; 0x54
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80025f0:	681e      	ldr	r6, [r3, #0]
  if (usbp->epc[ep]->out_state != NULL) {
 80025f2:	f8d3 c018 	ldr.w	ip, [r3, #24]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80025f6:	f006 0603 	and.w	r6, r6, #3
 80025fa:	1e72      	subs	r2, r6, #1
 80025fc:	2a02      	cmp	r2, #2
 80025fe:	bf98      	it	ls
 8002600:	04b6      	lslls	r6, r6, #18
  otgp->oe[ep].DOEPTSIZ = 0;
 8002602:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 8002606:	f04f 0100 	mov.w	r1, #0
 800260a:	bf98      	it	ls
 800260c:	f106 5680 	addls.w	r6, r6, #268435456	; 0x10000000
 8002610:	f8c2 1b10 	str.w	r1, [r2, #2832]	; 0xb10
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8002614:	bf8c      	ite	hi
 8002616:	4e45      	ldrhi	r6, [pc, #276]	; (800272c <usbInitEndpointI+0x16c>)
 8002618:	f506 4600 	addls.w	r6, r6, #32768	; 0x8000
  otgp->oe[ep].DOEPTSIZ = 0;
 800261c:	0161      	lsls	r1, r4, #5
  if (usbp->epc[ep]->out_state != NULL) {
 800261e:	f1bc 0f00 	cmp.w	ip, #0
 8002622:	d04b      	beq.n	80026bc <usbInitEndpointI+0xfc>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8002624:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8002628:	f104 0258 	add.w	r2, r4, #88	; 0x58
 800262c:	0152      	lsls	r2, r2, #5
 800262e:	ea4c 0c06 	orr.w	ip, ip, r6
 8002632:	f845 c002 	str.w	ip, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8002636:	f104 0e10 	add.w	lr, r4, #16
 800263a:	f8d5 c81c 	ldr.w	ip, [r5, #2076]	; 0x81c
 800263e:	2201      	movs	r2, #1
 8002640:	fa02 f20e 	lsl.w	r2, r2, lr
 8002644:	ea42 020c 	orr.w	r2, r2, ip
 8002648:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 800264c:	186a      	adds	r2, r5, r1
  if (usbp->epc[ep]->in_state != NULL) {
 800264e:	6959      	ldr	r1, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
 8002650:	f04f 0c00 	mov.w	ip, #0
 8002654:	f8c2 c910 	str.w	ip, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 8002658:	2900      	cmp	r1, #0
 800265a:	d044      	beq.n	80026e6 <usbInitEndpointI+0x126>
    if (usbp->epc[ep]->in_multiplier > 1)
 800265c:	8b99      	ldrh	r1, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800265e:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8002660:	2901      	cmp	r1, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8002662:	ea4f 0392 	mov.w	r3, r2, lsr #2
  next = usbp->pmnext;
 8002666:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
      fsize *= usbp->epc[ep]->in_multiplier;
 8002668:	bf88      	it	hi
 800266a:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800266c:	f104 013f 	add.w	r1, r4, #63	; 0x3f
  usbp->pmnext += size;
 8002670:	eb03 0c02 	add.w	ip, r3, r2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8002674:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002678:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800267c:	01a2      	lsls	r2, r4, #6
 800267e:	f042 0220 	orr.w	r2, r2, #32
  usbp->pmnext += size;
 8002682:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8002686:	604b      	str	r3, [r1, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002688:	612a      	str	r2, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800268a:	692b      	ldr	r3, [r5, #16]
 800268c:	069a      	lsls	r2, r3, #26
 800268e:	d4fc      	bmi.n	800268a <usbInitEndpointI+0xca>
  chSysPolledDelayX(cycles);
 8002690:	2012      	movs	r0, #18
 8002692:	f7fe fc75 	bl	8000f80 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8a1b      	ldrh	r3, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 800269a:	f104 0248 	add.w	r2, r4, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 800269e:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 80026a2:	0152      	lsls	r2, r2, #5
                           DIEPCTL_TXFNUM(ep) |
 80026a4:	431e      	orrs	r6, r3
    otgp->ie[ep].DIEPCTL = ctl |
 80026a6:	50ae      	str	r6, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 80026a8:	2101      	movs	r1, #1
 80026aa:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 80026ae:	fa01 f404 	lsl.w	r4, r1, r4
 80026b2:	431c      	orrs	r4, r3
 80026b4:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
}
 80026b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 80026bc:	eb05 1248 	add.w	r2, r5, r8, lsl #5
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80026c0:	f104 0910 	add.w	r9, r4, #16
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 80026c4:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 80026c8:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 80026cc:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80026d0:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 80026d4:	f04f 0c01 	mov.w	ip, #1
 80026d8:	fa0c fc09 	lsl.w	ip, ip, r9
 80026dc:	ea22 020c 	bic.w	r2, r2, ip
 80026e0:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
 80026e4:	e7b2      	b.n	800264c <usbInitEndpointI+0x8c>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80026e6:	f104 023f 	add.w	r2, r4, #63	; 0x3f
 80026ea:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80026ee:	01a3      	lsls	r3, r4, #6
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80026f0:	490f      	ldr	r1, [pc, #60]	; (8002730 <usbInitEndpointI+0x170>)
 80026f2:	6051      	str	r1, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80026f4:	f043 0320 	orr.w	r3, r3, #32
 80026f8:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80026fa:	692b      	ldr	r3, [r5, #16]
 80026fc:	069b      	lsls	r3, r3, #26
 80026fe:	d4fc      	bmi.n	80026fa <usbInitEndpointI+0x13a>
 8002700:	eb05 1848 	add.w	r8, r5, r8, lsl #5
 8002704:	2012      	movs	r0, #18
 8002706:	f7fe fc3b 	bl	8000f80 <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 800270a:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 800270e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002712:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8002716:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f404 	lsl.w	r4, r1, r4
 8002720:	ea23 0404 	bic.w	r4, r3, r4
 8002724:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
 8002728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800272c:	10008000 	.word	0x10008000
 8002730:	02000400 	.word	0x02000400
	...

08002740 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8002740:	b530      	push	{r4, r5, lr}
 8002742:	b083      	sub	sp, #12
 8002744:	2905      	cmp	r1, #5
 8002746:	d80f      	bhi.n	8002768 <usb_event+0x28>
 8002748:	e8df f001 	tbb	[pc, r1]
 800274c:	10030e10 	.word	0x10030e10
 8002750:	2910      	.short	0x2910
 8002752:	2320      	movs	r3, #32
 8002754:	f383 8811 	msr	BASEPRI, r3
    if (usbp->state == USB_ACTIVE) {
 8002758:	7803      	ldrb	r3, [r0, #0]
 800275a:	2b04      	cmp	r3, #4
 800275c:	d02f      	beq.n	80027be <usb_event+0x7e>
    else if (usbp->state == USB_SELECTED) {
 800275e:	2b03      	cmp	r3, #3
 8002760:	d059      	beq.n	8002816 <usb_event+0xd6>
 8002762:	2300      	movs	r3, #0
 8002764:	f383 8811 	msr	BASEPRI, r3
}
 8002768:	b003      	add	sp, #12
 800276a:	bd30      	pop	{r4, r5, pc}
 800276c:	2320      	movs	r3, #32
 800276e:	f383 8811 	msr	BASEPRI, r3
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 8002772:	4c2a      	ldr	r4, [pc, #168]	; (800281c <usb_event+0xdc>)
 8002774:	7d23      	ldrb	r3, [r4, #20]
 8002776:	b11b      	cbz	r3, 8002780 <usb_event+0x40>
 8002778:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <usb_event+0x22>
  chEvtBroadcastFlagsI(esp, flags);
 8002780:	2102      	movs	r1, #2
 8002782:	4827      	ldr	r0, [pc, #156]	; (8002820 <usb_event+0xe0>)
 8002784:	f7fe fbcc 	bl	8000f20 <chEvtBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 8002788:	2501      	movs	r5, #1
  chThdDequeueAllI(tqp, msg);
 800278a:	4826      	ldr	r0, [pc, #152]	; (8002824 <usb_event+0xe4>)
 800278c:	7525      	strb	r5, [r4, #20]
 800278e:	f7fe fb9f 	bl	8000ed0 <chThdDequeueAllI.constprop.0>
 8002792:	4825      	ldr	r0, [pc, #148]	; (8002828 <usb_event+0xe8>)
  bqSuspendI(&sdup->obqueue);
 8002794:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8002798:	f7fe fb9a 	bl	8000ed0 <chThdDequeueAllI.constprop.0>
 800279c:	e7e1      	b.n	8002762 <usb_event+0x22>
 800279e:	2320      	movs	r3, #32
 80027a0:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 80027a4:	4c1d      	ldr	r4, [pc, #116]	; (800281c <usb_event+0xdc>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	1d20      	adds	r0, r4, #4
 80027aa:	f7fe fbb9 	bl	8000f20 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 80027ae:	2300      	movs	r3, #0
 80027b0:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 80027b2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	b003      	add	sp, #12
 80027bc:	bd30      	pop	{r4, r5, pc}
  ibqp->bcounter  = 0;
 80027be:	4c17      	ldr	r4, [pc, #92]	; (800281c <usb_event+0xdc>)
      usbInitEndpointI(usbp, USB_INTERRUPT_REQUEST_EP_A, &ep1config);
 80027c0:	4a1a      	ldr	r2, [pc, #104]	; (800282c <usb_event+0xec>)
 80027c2:	9001      	str	r0, [sp, #4]
 80027c4:	2101      	movs	r1, #1
 80027c6:	f7ff fefb 	bl	80025c0 <usbInitEndpointI>
      usbInitEndpointI(usbp, USB_DATA_REQUEST_EP_A, &ep2config);
 80027ca:	2102      	movs	r1, #2
 80027cc:	9801      	ldr	r0, [sp, #4]
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <usb_event+0xf0>)
 80027d0:	f7ff fef6 	bl	80025c0 <usbInitEndpointI>
 80027d4:	2500      	movs	r5, #0
  ibqp->brdptr    = ibqp->buffers;
 80027d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027d8:	6223      	str	r3, [r4, #32]
  chThdDequeueAllI(tqp, msg);
 80027da:	f104 000c 	add.w	r0, r4, #12
  ibqp->bwrptr    = ibqp->buffers;
 80027de:	61e3      	str	r3, [r4, #28]
  ibqp->top       = NULL;
 80027e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  ibqp->bcounter  = 0;
 80027e4:	61a5      	str	r5, [r4, #24]
 80027e6:	f7fe fb73 	bl	8000ed0 <chThdDequeueAllI.constprop.0>
  obqp->brdptr    = obqp->buffers;
 80027ea:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 80027ee:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->bwrptr    = obqp->buffers;
 80027f2:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->bcounter  = bqSizeX(obqp);
 80027f6:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->top       = NULL;
 80027f8:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  bqResumeX(&sdup->ibqueue);
 80027fc:	7525      	strb	r5, [r4, #20]
 80027fe:	f7fe fb67 	bl	8000ed0 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 8002802:	1d20      	adds	r0, r4, #4
 8002804:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 8002806:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 800280a:	f7fe fb89 	bl	8000f20 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 800280e:	4620      	mov	r0, r4
 8002810:	f7fe fe86 	bl	8001520 <sdu_start_receive>
 8002814:	e7a5      	b.n	8002762 <usb_event+0x22>
      usbDisableEndpointsI(usbp);
 8002816:	f7fe fe33 	bl	8001480 <usbDisableEndpointsI>
 800281a:	e7a2      	b.n	8002762 <usb_event+0x22>
 800281c:	20000e9c 	.word	0x20000e9c
 8002820:	20000ea0 	.word	0x20000ea0
 8002824:	20000ea8 	.word	0x20000ea8
 8002828:	20000ee0 	.word	0x20000ee0
 800282c:	080063d4 	.word	0x080063d4
 8002830:	080063f8 	.word	0x080063f8
	...

08002840 <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	460d      	mov	r5, r1
  if (str != NULL)
 8002844:	b1b8      	cbz	r0, 8002876 <parse_arguments+0x36>
 8002846:	4604      	mov	r4, r0
    *saveptr = str;
 8002848:	6028      	str	r0, [r5, #0]
  p += strspn(p, " \t");
 800284a:	4912      	ldr	r1, [pc, #72]	; (8002894 <parse_arguments+0x54>)
 800284c:	4620      	mov	r0, r4
 800284e:	f003 f8d7 	bl	8005a00 <strspn>
  if (*p == '"') {
 8002852:	5c21      	ldrb	r1, [r4, r0]
 8002854:	2922      	cmp	r1, #34	; 0x22
  p += strspn(p, " \t");
 8002856:	eb04 0600 	add.w	r6, r4, r0
  if (*p == '"') {
 800285a:	d012      	beq.n	8002882 <parse_arguments+0x42>
    *saveptr = strpbrk(p, " \t");
 800285c:	490d      	ldr	r1, [pc, #52]	; (8002894 <parse_arguments+0x54>)
 800285e:	4630      	mov	r0, r6
 8002860:	f003 f8b2 	bl	80059c8 <strpbrk>
  if (*saveptr != NULL) {
 8002864:	b198      	cbz	r0, 800288e <parse_arguments+0x4e>
    *(*saveptr)++ = '\0';
 8002866:	1c42      	adds	r2, r0, #1
 8002868:	2300      	movs	r3, #0
 800286a:	602a      	str	r2, [r5, #0]
 800286c:	7003      	strb	r3, [r0, #0]
  return *p != '\0' ? p : NULL;
 800286e:	7833      	ldrb	r3, [r6, #0]
 8002870:	b123      	cbz	r3, 800287c <parse_arguments+0x3c>
}
 8002872:	4630      	mov	r0, r6
 8002874:	bd70      	pop	{r4, r5, r6, pc}
  p = *saveptr;
 8002876:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8002878:	2c00      	cmp	r4, #0
 800287a:	d1e6      	bne.n	800284a <parse_arguments+0xa>
    return NULL;
 800287c:	2600      	movs	r6, #0
}
 800287e:	4630      	mov	r0, r6
 8002880:	bd70      	pop	{r4, r5, r6, pc}
    p++;
 8002882:	3601      	adds	r6, #1
    *saveptr = strpbrk(p, "\"");
 8002884:	4630      	mov	r0, r6
 8002886:	f003 f837 	bl	80058f8 <strchr>
  if (*saveptr != NULL) {
 800288a:	2800      	cmp	r0, #0
 800288c:	d1eb      	bne.n	8002866 <parse_arguments+0x26>
 800288e:	6028      	str	r0, [r5, #0]
 8002890:	e7ed      	b.n	800286e <parse_arguments+0x2e>
 8002892:	bf00      	nop
 8002894:	08005ed0 	.word	0x08005ed0
	...

080028a0 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80028a0:	b40e      	push	{r1, r2, r3}
 80028a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	ab0f      	add	r3, sp, #60	; 0x3c
 80028aa:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80028ae:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 80028b0:	4625      	mov	r5, r4
 80028b2:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 80028b6:	2900      	cmp	r1, #0
 80028b8:	f000 823b 	beq.w	8002d32 <chprintf+0x492>
 80028bc:	4607      	mov	r7, r0
 80028be:	4699      	mov	r9, r3
  int n = 0;
 80028c0:	f04f 0800 	mov.w	r8, #0
 80028c4:	e00c      	b.n	80028e0 <chprintf+0x40>
      streamPut(chp, (uint8_t)c);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	4638      	mov	r0, r7
 80028ca:	68db      	ldr	r3, [r3, #12]
      n++;
 80028cc:	f108 0801 	add.w	r8, r8, #1
 80028d0:	462c      	mov	r4, r5
      streamPut(chp, (uint8_t)c);
 80028d2:	4798      	blx	r3
    c = *fmt++;
 80028d4:	4625      	mov	r5, r4
 80028d6:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 80028da:	2900      	cmp	r1, #0
 80028dc:	f000 80be 	beq.w	8002a5c <chprintf+0x1bc>
    if (c != '%') {
 80028e0:	2925      	cmp	r1, #37	; 0x25
 80028e2:	d1f0      	bne.n	80028c6 <chprintf+0x26>
    if (*fmt == '-') {
 80028e4:	7863      	ldrb	r3, [r4, #1]
 80028e6:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 80028e8:	bf04      	itt	eq
 80028ea:	1ca5      	addeq	r5, r4, #2
      left_align = true;
 80028ec:	2001      	moveq	r0, #1
    if (*fmt == '+') {
 80028ee:	782b      	ldrb	r3, [r5, #0]
    left_align = false;
 80028f0:	bf18      	it	ne
 80028f2:	2000      	movne	r0, #0
    if (*fmt == '+') {
 80028f4:	2b2b      	cmp	r3, #43	; 0x2b
 80028f6:	bf03      	ittte	eq
 80028f8:	786b      	ldrbeq	r3, [r5, #1]
      do_sign = true;
 80028fa:	f04f 0e01 	moveq.w	lr, #1
      fmt++;
 80028fe:	4475      	addeq	r5, lr
    do_sign = false;
 8002900:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '0') {
 8002904:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 8002906:	bf05      	ittet	eq
 8002908:	461e      	moveq	r6, r3
      fmt++;
 800290a:	786b      	ldrbeq	r3, [r5, #1]
    filler = ' ';
 800290c:	2620      	movne	r6, #32
      fmt++;
 800290e:	3501      	addeq	r5, #1
    if ( *fmt == '*') {
 8002910:	2b2a      	cmp	r3, #42	; 0x2a
 8002912:	f040 80ac 	bne.w	8002a6e <chprintf+0x1ce>
      width = va_arg(ap, int);
 8002916:	f859 1b04 	ldr.w	r1, [r9], #4
      c = *fmt++;
 800291a:	786b      	ldrb	r3, [r5, #1]
 800291c:	1cac      	adds	r4, r5, #2
    if (c == '.') {
 800291e:	2b2e      	cmp	r3, #46	; 0x2e
 8002920:	f000 8130 	beq.w	8002b84 <chprintf+0x2e4>
    precision = 0;
 8002924:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 8002926:	f003 05df 	and.w	r5, r3, #223	; 0xdf
 800292a:	2d4c      	cmp	r5, #76	; 0x4c
 800292c:	f000 80b2 	beq.w	8002a94 <chprintf+0x1f4>
      is_long = (c >= 'A') && (c <= 'Z');
 8002930:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
    switch (c) {
 8002934:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 8002938:	f200 8198 	bhi.w	8002c6c <chprintf+0x3cc>
 800293c:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8002940:	0196015e 	.word	0x0196015e
 8002944:	01960196 	.word	0x01960196
 8002948:	015e0196 	.word	0x015e0196
 800294c:	01960196 	.word	0x01960196
 8002950:	01960196 	.word	0x01960196
 8002954:	019a0196 	.word	0x019a0196
 8002958:	01960035 	.word	0x01960035
 800295c:	01960196 	.word	0x01960196
 8002960:	00940196 	.word	0x00940196
 8002964:	01960196 	.word	0x01960196
 8002968:	01960035 	.word	0x01960035
 800296c:	01960196 	.word	0x01960196
 8002970:	01960196 	.word	0x01960196
 8002974:	01960196 	.word	0x01960196
 8002978:	01960196 	.word	0x01960196
 800297c:	014d0196 	.word	0x014d0196
 8002980:	0196015e 	.word	0x0196015e
 8002984:	01960196 	.word	0x01960196
 8002988:	015e0196 	.word	0x015e0196
 800298c:	01960196 	.word	0x01960196
 8002990:	01960196 	.word	0x01960196
 8002994:	019a0196 	.word	0x019a0196
 8002998:	01960035 	.word	0x01960035
 800299c:	012d0196 	.word	0x012d0196
 80029a0:	00940196 	.word	0x00940196
 80029a4:	01960196 	.word	0x01960196
 80029a8:	0035      	.short	0x0035
      if (c == 0) {
 80029aa:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 80029ae:	f859 5b04 	ldr.w	r5, [r9], #4
  q = p + MAX_FILLER;
 80029b2:	f10d 0317 	add.w	r3, sp, #23
 80029b6:	e000      	b.n	80029ba <chprintf+0x11a>
  } while ((ll /= radix) != 0);
 80029b8:	4663      	mov	r3, ip
    i = (int)(l % radix);
 80029ba:	46aa      	mov	sl, r5
 80029bc:	fbb5 f5fe 	udiv	r5, r5, lr
 80029c0:	fb0e ab15 	mls	fp, lr, r5, sl
    i += '0';
 80029c4:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    if (i > '9') {
 80029c8:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 80029ca:	bfc8      	it	gt
 80029cc:	f10b 0237 	addgt.w	r2, fp, #55	; 0x37
    *--q = i;
 80029d0:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 80029d2:	45f2      	cmp	sl, lr
    *--q = i;
 80029d4:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80029d8:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 80029dc:	d2ec      	bcs.n	80029b8 <chprintf+0x118>
  i = (int)(p + MAX_FILLER - q);
 80029de:	f10d 0a0c 	add.w	sl, sp, #12
 80029e2:	f10d 0517 	add.w	r5, sp, #23
 80029e6:	eba5 050c 	sub.w	r5, r5, ip
 80029ea:	46d6      	mov	lr, sl
 80029ec:	f10d 0c17 	add.w	ip, sp, #23
 80029f0:	e001      	b.n	80029f6 <chprintf+0x156>
 80029f2:	f813 2b01 	ldrb.w	r2, [r3], #1
    *p++ = *q++;
 80029f6:	f80e 2b01 	strb.w	r2, [lr], #1
  while (--i);
 80029fa:	4563      	cmp	r3, ip
 80029fc:	d1f9      	bne.n	80029f2 <chprintf+0x152>
 80029fe:	1b49      	subs	r1, r1, r5
 8002a00:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 8002a02:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002a06:	b920      	cbnz	r0, 8002a12 <chprintf+0x172>
    if (width < 0) {
 8002a08:	2900      	cmp	r1, #0
      width = -width;
 8002a0a:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002a0e:	f300 8145 	bgt.w	8002c9c <chprintf+0x3fc>
    while (--i >= 0) {
 8002a12:	2d00      	cmp	r5, #0
 8002a14:	db0f      	blt.n	8002a36 <chprintf+0x196>
 8002a16:	1c6b      	adds	r3, r5, #1
 8002a18:	4453      	add	r3, sl
 8002a1a:	9401      	str	r4, [sp, #4]
 8002a1c:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	4638      	mov	r0, r7
 8002a28:	4790      	blx	r2
    while (--i >= 0) {
 8002a2a:	45a2      	cmp	sl, r4
 8002a2c:	d1f7      	bne.n	8002a1e <chprintf+0x17e>
 8002a2e:	f108 0801 	add.w	r8, r8, #1
 8002a32:	9c01      	ldr	r4, [sp, #4]
 8002a34:	44a8      	add	r8, r5
    while (width) {
 8002a36:	f1bb 0f00 	cmp.w	fp, #0
 8002a3a:	f43f af4b 	beq.w	80028d4 <chprintf+0x34>
 8002a3e:	465d      	mov	r5, fp
      streamPut(chp, (uint8_t)filler);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4631      	mov	r1, r6
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	4638      	mov	r0, r7
 8002a48:	4798      	blx	r3
    while (width) {
 8002a4a:	3d01      	subs	r5, #1
 8002a4c:	d1f8      	bne.n	8002a40 <chprintf+0x1a0>
    c = *fmt++;
 8002a4e:	4625      	mov	r5, r4
 8002a50:	44d8      	add	r8, fp
 8002a52:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8002a56:	2900      	cmp	r1, #0
 8002a58:	f47f af42 	bne.w	80028e0 <chprintf+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002a5c:	4640      	mov	r0, r8
 8002a5e:	b006      	add	sp, #24
 8002a60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a64:	b003      	add	sp, #12
 8002a66:	4770      	bx	lr
      if (c == 0) {
 8002a68:	f04f 0e0a 	mov.w	lr, #10
 8002a6c:	e79f      	b.n	80029ae <chprintf+0x10e>
        c = *fmt++;
 8002a6e:	1c6c      	adds	r4, r5, #1
        if (c == 0) {
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f3      	beq.n	8002a5c <chprintf+0x1bc>
      width = 0;
 8002a74:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 8002a76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 8002a7e:	eb01 0581 	add.w	r5, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 8002a82:	f63f af4c 	bhi.w	800291e <chprintf+0x7e>
        c = *fmt++;
 8002a86:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 8002a8a:	eb02 0145 	add.w	r1, r2, r5, lsl #1
        if (c == 0) {
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f1      	bne.n	8002a76 <chprintf+0x1d6>
 8002a92:	e7e3      	b.n	8002a5c <chprintf+0x1bc>
      c = *fmt++;
 8002a94:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0df      	beq.n	8002a5c <chprintf+0x1bc>
    switch (c) {
 8002a9c:	f1a3 0544 	sub.w	r5, r3, #68	; 0x44
 8002aa0:	2d34      	cmp	r5, #52	; 0x34
 8002aa2:	f200 80e3 	bhi.w	8002c6c <chprintf+0x3cc>
 8002aa6:	f20f 0c08 	addw	ip, pc, #8
 8002aaa:	f85c f025 	ldr.w	pc, [ip, r5, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002bfd 	.word	0x08002bfd
 8002ab4:	08002c6d 	.word	0x08002c6d
 8002ab8:	08002c6d 	.word	0x08002c6d
 8002abc:	08002c6d 	.word	0x08002c6d
 8002ac0:	08002c6d 	.word	0x08002c6d
 8002ac4:	08002bfd 	.word	0x08002bfd
 8002ac8:	08002c6d 	.word	0x08002c6d
 8002acc:	08002c6d 	.word	0x08002c6d
 8002ad0:	08002c6d 	.word	0x08002c6d
 8002ad4:	08002c6d 	.word	0x08002c6d
 8002ad8:	08002c6d 	.word	0x08002c6d
 8002adc:	08002c75 	.word	0x08002c75
 8002ae0:	080029ab 	.word	0x080029ab
 8002ae4:	08002c6d 	.word	0x08002c6d
 8002ae8:	08002c6d 	.word	0x08002c6d
 8002aec:	08002c6d 	.word	0x08002c6d
 8002af0:	08002c6d 	.word	0x08002c6d
 8002af4:	08002a69 	.word	0x08002a69
 8002af8:	08002c6d 	.word	0x08002c6d
 8002afc:	08002c6d 	.word	0x08002c6d
 8002b00:	080029ab 	.word	0x080029ab
 8002b04:	08002c6d 	.word	0x08002c6d
 8002b08:	08002c6d 	.word	0x08002c6d
 8002b0c:	08002c6d 	.word	0x08002c6d
 8002b10:	08002c6d 	.word	0x08002c6d
 8002b14:	08002c6d 	.word	0x08002c6d
 8002b18:	08002c6d 	.word	0x08002c6d
 8002b1c:	08002c6d 	.word	0x08002c6d
 8002b20:	08002c6d 	.word	0x08002c6d
 8002b24:	08002c6d 	.word	0x08002c6d
 8002b28:	08002c6d 	.word	0x08002c6d
 8002b2c:	08002bdb 	.word	0x08002bdb
 8002b30:	08002bfd 	.word	0x08002bfd
 8002b34:	08002c6d 	.word	0x08002c6d
 8002b38:	08002c6d 	.word	0x08002c6d
 8002b3c:	08002c6d 	.word	0x08002c6d
 8002b40:	08002c6d 	.word	0x08002c6d
 8002b44:	08002bfd 	.word	0x08002bfd
 8002b48:	08002c6d 	.word	0x08002c6d
 8002b4c:	08002c6d 	.word	0x08002c6d
 8002b50:	08002c6d 	.word	0x08002c6d
 8002b54:	08002c6d 	.word	0x08002c6d
 8002b58:	08002c6d 	.word	0x08002c6d
 8002b5c:	08002c75 	.word	0x08002c75
 8002b60:	080029ab 	.word	0x080029ab
 8002b64:	08002c6d 	.word	0x08002c6d
 8002b68:	08002c6d 	.word	0x08002c6d
 8002b6c:	08002b9b 	.word	0x08002b9b
 8002b70:	08002c6d 	.word	0x08002c6d
 8002b74:	08002a69 	.word	0x08002a69
 8002b78:	08002c6d 	.word	0x08002c6d
 8002b7c:	08002c6d 	.word	0x08002c6d
 8002b80:	080029ab 	.word	0x080029ab
      c = *fmt++;
 8002b84:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f43f af68 	beq.w	8002a5c <chprintf+0x1bc>
      if (c == '*') {
 8002b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b8e:	d174      	bne.n	8002c7a <chprintf+0x3da>
        c = *fmt++;
 8002b90:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8002b92:	f859 2b04 	ldr.w	r2, [r9], #4
        c = *fmt++;
 8002b96:	3402      	adds	r4, #2
 8002b98:	e6c5      	b.n	8002926 <chprintf+0x86>
      if ((s = va_arg(ap, char *)) == 0) {
 8002b9a:	f859 ab04 	ldr.w	sl, [r9], #4
 8002b9e:	f1ba 0f00 	cmp.w	sl, #0
 8002ba2:	f000 80bc 	beq.w	8002d1e <chprintf+0x47e>
 8002ba6:	f89a 3000 	ldrb.w	r3, [sl]
      if (precision == 0) {
 8002baa:	2a00      	cmp	r2, #0
 8002bac:	f040 80aa 	bne.w	8002d04 <chprintf+0x464>
      for (p = s; *p && (--precision >= 0); p++)
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80ab 	beq.w	8002d0c <chprintf+0x46c>
 8002bb6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8002bba:	4655      	mov	r5, sl
 8002bbc:	e001      	b.n	8002bc2 <chprintf+0x322>
 8002bbe:	42d3      	cmn	r3, r2
 8002bc0:	d405      	bmi.n	8002bce <chprintf+0x32e>
 8002bc2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002bc6:	ebaa 0305 	sub.w	r3, sl, r5
 8002bca:	2e00      	cmp	r6, #0
 8002bcc:	d1f7      	bne.n	8002bbe <chprintf+0x31e>
 8002bce:	eba5 050a 	sub.w	r5, r5, sl
 8002bd2:	1b49      	subs	r1, r1, r5
      filler = ' ';
 8002bd4:	2620      	movs	r6, #32
 8002bd6:	3d01      	subs	r5, #1
 8002bd8:	e713      	b.n	8002a02 <chprintf+0x162>
      *p++ = va_arg(ap, int);
 8002bda:	f859 3b04 	ldr.w	r3, [r9], #4
 8002bde:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8002be2:	3901      	subs	r1, #1
      filler = ' ';
 8002be4:	2620      	movs	r6, #32
    if ((width -= i) < 0) {
 8002be6:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002bea:	b918      	cbnz	r0, 8002bf4 <chprintf+0x354>
    if (width < 0) {
 8002bec:	2900      	cmp	r1, #0
      width = -width;
 8002bee:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002bf2:	dc72      	bgt.n	8002cda <chprintf+0x43a>
    if (left_align == false) {
 8002bf4:	2500      	movs	r5, #0
 8002bf6:	f10d 0a0c 	add.w	sl, sp, #12
 8002bfa:	e70c      	b.n	8002a16 <chprintf+0x176>
        l = va_arg(ap, int);
 8002bfc:	f859 cb04 	ldr.w	ip, [r9], #4
      if (l < 0) {
 8002c00:	f1bc 0f00 	cmp.w	ip, #0
 8002c04:	db5f      	blt.n	8002cc6 <chprintf+0x426>
        if (do_sign) {
 8002c06:	f1be 0f00 	cmp.w	lr, #0
 8002c0a:	f000 808e 	beq.w	8002d2a <chprintf+0x48a>
          *p++ = '+';
 8002c0e:	232b      	movs	r3, #43	; 0x2b
 8002c10:	f88d 300c 	strb.w	r3, [sp, #12]
 8002c14:	f10d 050d 	add.w	r5, sp, #13
 8002c18:	f10d 0a0c 	add.w	sl, sp, #12
  q = p + MAX_FILLER;
 8002c1c:	f105 030b 	add.w	r3, r5, #11
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	461a      	mov	r2, r3
    i = (int)(l % radix);
 8002c24:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <chprintf+0x4a4>)
 8002c26:	fba3 e30c 	umull	lr, r3, r3, ip
 8002c2a:	08db      	lsrs	r3, r3, #3
 8002c2c:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8002c30:	469e      	mov	lr, r3
 8002c32:	ebac 034b 	sub.w	r3, ip, fp, lsl #1
    i += '0';
 8002c36:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 8002c38:	46e3      	mov	fp, ip
    *--q = i;
 8002c3a:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8002c3c:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 8002c40:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8002c44:	46f4      	mov	ip, lr
  } while ((ll /= radix) != 0);
 8002c46:	dced      	bgt.n	8002c24 <chprintf+0x384>
 8002c48:	469e      	mov	lr, r3
  i = (int)(p + MAX_FILLER - q);
 8002c4a:	9b01      	ldr	r3, [sp, #4]
 8002c4c:	eba3 0c02 	sub.w	ip, r3, r2
 8002c50:	44ac      	add	ip, r5
 8002c52:	4673      	mov	r3, lr
 8002c54:	e001      	b.n	8002c5a <chprintf+0x3ba>
 8002c56:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8002c5a:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 8002c5e:	4565      	cmp	r5, ip
 8002c60:	d1f9      	bne.n	8002c56 <chprintf+0x3b6>
 8002c62:	eba5 050a 	sub.w	r5, r5, sl
 8002c66:	1b49      	subs	r1, r1, r5
 8002c68:	3d01      	subs	r5, #1
 8002c6a:	e6ca      	b.n	8002a02 <chprintf+0x162>
      *p++ = c;
 8002c6c:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8002c70:	3901      	subs	r1, #1
 8002c72:	e7b8      	b.n	8002be6 <chprintf+0x346>
      if (c == 0) {
 8002c74:	f04f 0e08 	mov.w	lr, #8
 8002c78:	e699      	b.n	80029ae <chprintf+0x10e>
      c = *fmt++;
 8002c7a:	3401      	adds	r4, #1
    precision = 0;
 8002c7c:	2200      	movs	r2, #0
        while (c >= '0' && c <= '9') {
 8002c7e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8002c82:	b2ed      	uxtb	r5, r5
 8002c84:	2d09      	cmp	r5, #9
          precision = precision * 10 + c;
 8002c86:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 8002c8a:	f63f ae4c 	bhi.w	8002926 <chprintf+0x86>
          c = *fmt++;
 8002c8e:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8002c92:	eb05 024c 	add.w	r2, r5, ip, lsl #1
          if (c == 0) {
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f1      	bne.n	8002c7e <chprintf+0x3de>
 8002c9a:	e6df      	b.n	8002a5c <chprintf+0x1bc>
      width = -width;
 8002c9c:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002ca0:	f89a 1000 	ldrb.w	r1, [sl]
 8002ca4:	292d      	cmp	r1, #45	; 0x2d
 8002ca6:	d021      	beq.n	8002cec <chprintf+0x44c>
        streamPut(chp, (uint8_t)filler);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4631      	mov	r1, r6
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4638      	mov	r0, r7
 8002cb0:	4798      	blx	r3
      } while (++width != 0);
 8002cb2:	f11b 0b01 	adds.w	fp, fp, #1
 8002cb6:	d1f7      	bne.n	8002ca8 <chprintf+0x408>
 8002cb8:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 8002cba:	2d00      	cmp	r5, #0
 8002cbc:	eba8 0803 	sub.w	r8, r8, r3
 8002cc0:	f6bf aea9 	bge.w	8002a16 <chprintf+0x176>
 8002cc4:	e606      	b.n	80028d4 <chprintf+0x34>
        *p++ = '-';
 8002cc6:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002cc8:	f1cc 0c00 	rsb	ip, ip, #0
        *p++ = '-';
 8002ccc:	f88d 300c 	strb.w	r3, [sp, #12]
 8002cd0:	f10d 050d 	add.w	r5, sp, #13
 8002cd4:	f10d 0a0c 	add.w	sl, sp, #12
 8002cd8:	e7a0      	b.n	8002c1c <chprintf+0x37c>
      if (*s == '-' && filler == '0') {
 8002cda:	f89d 100c 	ldrb.w	r1, [sp, #12]
      width = -width;
 8002cde:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002ce2:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 8002ce4:	f10d 0a0c 	add.w	sl, sp, #12
 8002ce8:	4605      	mov	r5, r0
      if (*s == '-' && filler == '0') {
 8002cea:	d1dd      	bne.n	8002ca8 <chprintf+0x408>
 8002cec:	2e30      	cmp	r6, #48	; 0x30
 8002cee:	d1db      	bne.n	8002ca8 <chprintf+0x408>
        streamPut(chp, (uint8_t)*s++);
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	4790      	blx	r2
 8002cf8:	f10a 0a01 	add.w	sl, sl, #1
        n++;
 8002cfc:	f108 0801 	add.w	r8, r8, #1
        i--;
 8002d00:	3d01      	subs	r5, #1
 8002d02:	e7d1      	b.n	8002ca8 <chprintf+0x408>
      for (p = s; *p && (--precision >= 0); p++)
 8002d04:	b113      	cbz	r3, 8002d0c <chprintf+0x46c>
 8002d06:	3a01      	subs	r2, #1
 8002d08:	f57f af57 	bpl.w	8002bba <chprintf+0x31a>
    if ((width -= i) < 0) {
 8002d0c:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002d10:	b918      	cbnz	r0, 8002d1a <chprintf+0x47a>
    if (width < 0) {
 8002d12:	2900      	cmp	r1, #0
      width = -width;
 8002d14:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002d18:	dc0d      	bgt.n	8002d36 <chprintf+0x496>
    if (left_align == false) {
 8002d1a:	2620      	movs	r6, #32
 8002d1c:	e68b      	b.n	8002a36 <chprintf+0x196>
        s = "(null)";
 8002d1e:	f8df a028 	ldr.w	sl, [pc, #40]	; 8002d48 <chprintf+0x4a8>
      if (precision == 0) {
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	f43f af47 	beq.w	8002bb6 <chprintf+0x316>
 8002d28:	e7ed      	b.n	8002d06 <chprintf+0x466>
    p = tmpbuf;
 8002d2a:	f10d 0a0c 	add.w	sl, sp, #12
 8002d2e:	4655      	mov	r5, sl
 8002d30:	e774      	b.n	8002c1c <chprintf+0x37c>
  int n = 0;
 8002d32:	4688      	mov	r8, r1
  return formatted_bytes;
 8002d34:	e692      	b.n	8002a5c <chprintf+0x1bc>
      width = -width;
 8002d36:	f8cd b004 	str.w	fp, [sp, #4]
    if (width < 0) {
 8002d3a:	2620      	movs	r6, #32
 8002d3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002d40:	e7ae      	b.n	8002ca0 <chprintf+0x400>
 8002d42:	bf00      	nop
 8002d44:	cccccccd 	.word	0xcccccccd
 8002d48:	08005ed4 	.word	0x08005ed4
 8002d4c:	00000000 	.word	0x00000000

08002d50 <CharacterInputThread>:
  }
}

//extern uint8_t buffer[256];
static THD_WORKING_AREA(waCharacterInputThread, 40000);
static THD_FUNCTION(CharacterInputThread, arg) {
 8002d50:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  uint8_t c;
  uint8_t tbuf[32768];
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 8002d54:	4bb0      	ldr	r3, [pc, #704]	; (8003018 <CharacterInputThread+0x2c8>)
 8002d56:	4db1      	ldr	r5, [pc, #708]	; (800301c <CharacterInputThread+0x2cc>)
 8002d58:	4fb1      	ldr	r7, [pc, #708]	; (8003020 <CharacterInputThread+0x2d0>)
 8002d5a:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 8003044 <CharacterInputThread+0x2f4>
 8002d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
static THD_FUNCTION(CharacterInputThread, arg) {
 8002d62:	f5ad 4d00 	sub.w	sp, sp, #32768	; 0x8000
 8002d66:	b087      	sub	sp, #28
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 8002d68:	f10d 0b18 	add.w	fp, sp, #24
 8002d6c:	f1ab 030c 	sub.w	r3, fp, #12
 8002d70:	c303      	stmia	r3!, {r0, r1}
#ifdef OSTRICHUSB
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
#else
    if (1){
#endif
      c=streamGet(&OSTRICHPORT);
 8002d72:	46a8      	mov	r8, r5
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 8002d74:	701a      	strb	r2, [r3, #0]
  char_state_t state = IDLE;
 8002d76:	2600      	movs	r6, #0
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002d78:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d15a      	bne.n	8002e3a <CharacterInputThread+0xea>
      c=streamGet(&OSTRICHPORT);
 8002d84:	682b      	ldr	r3, [r5, #0]
 8002d86:	4640      	mov	r0, r8
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	4798      	blx	r3
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	b2c0      	uxtb	r0, r0
 8002d90:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 8002d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d98:	2200      	movs	r2, #0
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f382 8811 	msr	BASEPRI, r2
      start = chVTGetSystemTime();

      if (start > end){
 8002da0:	429c      	cmp	r4, r3
 8002da2:	f503 549c 	add.w	r4, r3, #4992	; 0x1380
 8002da6:	f104 0408 	add.w	r4, r4, #8
 8002daa:	d34b      	bcc.n	8002e44 <CharacterInputThread+0xf4>
      //sdAsynchronousRead(&OSTRICHPORT, (uint8_t *)&c, 1);
      if (state == IDLE){
        debug_print_state("------------ State0: ------------ ", state);
      }

      switch (state){
 8002dac:	2e32      	cmp	r6, #50	; 0x32
 8002dae:	d8e3      	bhi.n	8002d78 <CharacterInputThread+0x28>
 8002db0:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002db4:	00e20048 	.word	0x00e20048
 8002db8:	00ff00d4 	.word	0x00ff00d4
 8002dbc:	010900f4 	.word	0x010900f4
 8002dc0:	027c00ed 	.word	0x027c00ed
 8002dc4:	028a0276 	.word	0x028a0276
 8002dc8:	019401a5 	.word	0x019401a5
 8002dcc:	0033018f 	.word	0x0033018f
 8002dd0:	01ff00cd 	.word	0x01ff00cd
 8002dd4:	01eb01f0 	.word	0x01eb01f0
 8002dd8:	01d501e6 	.word	0x01d501e6
 8002ddc:	01bb0033 	.word	0x01bb0033
 8002de0:	025501b6 	.word	0x025501b6
 8002de4:	025a0232 	.word	0x025a0232
 8002de8:	022d0221 	.word	0x022d0221
 8002dec:	014a016f 	.word	0x014a016f
 8002df0:	02bc0125 	.word	0x02bc0125
 8002df4:	02c102b4 	.word	0x02c102b4
 8002df8:	02aa0033 	.word	0x02aa0033
 8002dfc:	00330299 	.word	0x00330299
 8002e00:	00c30110 	.word	0x00c30110
 8002e04:	00a300b4 	.word	0x00a300b4
 8002e08:	01850033 	.word	0x01850033
 8002e0c:	00330174 	.word	0x00330174
 8002e10:	011b0098 	.word	0x011b0098
 8002e14:	01c70265 	.word	0x01c70265
 8002e18:	003b      	.short	0x003b
        }
        break;
      case PINS_CnCs:
        debug_print_state("State3: ", state);
        state = IDLE;
        if (c == cs){
 8002e1a:	783b      	ldrb	r3, [r7, #0]
 8002e1c:	4283      	cmp	r3, r0
 8002e1e:	f000 82b7 	beq.w	8003390 <CharacterInputThread+0x640>
          }
          //write_pins(tbuf[0]);
          chprintf(ost, "O");
        }
        else{
          chprintf(dbg, "Checksum ERROR\r\n");
 8002e22:	4980      	ldr	r1, [pc, #512]	; (8003024 <CharacterInputThread+0x2d4>)
 8002e24:	4880      	ldr	r0, [pc, #512]	; (8003028 <CharacterInputThread+0x2d8>)
 8002e26:	f7ff fd3b 	bl	80028a0 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002e2a:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b04      	cmp	r3, #4
        state = IDLE;
 8002e34:	f04f 0600 	mov.w	r6, #0
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002e38:	d0a4      	beq.n	8002d84 <CharacterInputThread+0x34>
        state = IDLE;
        break;
      }
    }
    else{
      chThdSleepMilliseconds(100);
 8002e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e3e:	f7fe ff67 	bl	8001d10 <chThdSleep>
 8002e42:	e799      	b.n	8002d78 <CharacterInputThread+0x28>
        cs = c;
 8002e44:	f1a0 0342 	sub.w	r3, r0, #66	; 0x42
 8002e48:	7038      	strb	r0, [r7, #0]
        switch (c){
 8002e4a:	2b18      	cmp	r3, #24
 8002e4c:	d8ed      	bhi.n	8002e2a <CharacterInputThread+0xda>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <CharacterInputThread+0x104>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002ee1 	.word	0x08002ee1
 8002e58:	08002ed9 	.word	0x08002ed9
 8002e5c:	08002ed5 	.word	0x08002ed5
 8002e60:	08002e2b 	.word	0x08002e2b
 8002e64:	08002e2b 	.word	0x08002e2b
 8002e68:	08002e2b 	.word	0x08002e2b
 8002e6c:	08002e2b 	.word	0x08002e2b
 8002e70:	08002e2b 	.word	0x08002e2b
 8002e74:	08002e2b 	.word	0x08002e2b
 8002e78:	08002e2b 	.word	0x08002e2b
 8002e7c:	08002e2b 	.word	0x08002e2b
 8002e80:	08002e2b 	.word	0x08002e2b
 8002e84:	08002ed1 	.word	0x08002ed1
 8002e88:	08002e2b 	.word	0x08002e2b
 8002e8c:	08002ecd 	.word	0x08002ecd
 8002e90:	08002e2b 	.word	0x08002e2b
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ec5 	.word	0x08002ec5
 8002e9c:	08002e2b 	.word	0x08002e2b
 8002ea0:	08002e2b 	.word	0x08002e2b
 8002ea4:	08002edd 	.word	0x08002edd
 8002ea8:	08002ec1 	.word	0x08002ec1
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002e2b 	.word	0x08002e2b
 8002eb4:	08002eb9 	.word	0x08002eb9
          state = BULK;
 8002eb8:	2619      	movs	r6, #25
 8002eba:	e75d      	b.n	8002d78 <CharacterInputThread+0x28>
          state = XSVF_X;
 8002ebc:	262e      	movs	r6, #46	; 0x2e
 8002ebe:	e75b      	b.n	8002d78 <CharacterInputThread+0x28>
          state = WRITE;
 8002ec0:	2610      	movs	r6, #16
 8002ec2:	e759      	b.n	8002d78 <CharacterInputThread+0x28>
          state = BAUD;
 8002ec4:	260c      	movs	r6, #12
 8002ec6:	e757      	b.n	8002d78 <CharacterInputThread+0x28>
          state = READ;
 8002ec8:	2615      	movs	r6, #21
 8002eca:	e755      	b.n	8002d78 <CharacterInputThread+0x28>
          state = PINS_C;
 8002ecc:	262b      	movs	r6, #43	; 0x2b
 8002ece:	e753      	b.n	8002d78 <CharacterInputThread+0x28>
          state = SERIAL;
 8002ed0:	260e      	movs	r6, #14
 8002ed2:	e751      	b.n	8002d78 <CharacterInputThread+0x28>
          state = CLOCK_D;
 8002ed4:	2626      	movs	r6, #38	; 0x26
 8002ed6:	e74f      	b.n	8002d78 <CharacterInputThread+0x28>
          state = CONFIG_C;
 8002ed8:	2623      	movs	r6, #35	; 0x23
 8002eda:	e74d      	b.n	8002d78 <CharacterInputThread+0x28>
          state = VERSION;
 8002edc:	2601      	movs	r6, #1
 8002ede:	e74b      	b.n	8002d78 <CharacterInputThread+0x28>
        cs = c;
 8002ee0:	2602      	movs	r6, #2
 8002ee2:	e749      	b.n	8002d78 <CharacterInputThread+0x28>
          cs += c;
 8002ee4:	783b      	ldrb	r3, [r7, #0]
 8002ee6:	4403      	add	r3, r0
 8002ee8:	703b      	strb	r3, [r7, #0]
          cntdwn = 0;
 8002eea:	4b50      	ldr	r3, [pc, #320]	; (800302c <CharacterInputThread+0x2dc>)
          count = (uint16_t)c * 256;
 8002eec:	0200      	lsls	r0, r0, #8
          cntdwn = 0;
 8002eee:	2200      	movs	r2, #0
          count = (uint16_t)c * 256;
 8002ef0:	f8aa 0000 	strh.w	r0, [sl]
          cntdwn = 0;
 8002ef4:	801a      	strh	r2, [r3, #0]
          state = XSVF_Xn;
 8002ef6:	262f      	movs	r6, #47	; 0x2f
 8002ef8:	e73e      	b.n	8002d78 <CharacterInputThread+0x28>
        tbuf[cntdwn++] = c;
 8002efa:	4b4c      	ldr	r3, [pc, #304]	; (800302c <CharacterInputThread+0x2dc>)
        cs += c;
 8002efc:	783a      	ldrb	r2, [r7, #0]
        tbuf[cntdwn++] = c;
 8002efe:	881b      	ldrh	r3, [r3, #0]
        if (cntdwn == count){
 8002f00:	f8ba 1000 	ldrh.w	r1, [sl]
        tbuf[cntdwn++] = c;
 8002f04:	f80b 0003 	strb.w	r0, [fp, r3]
        cs += c;
 8002f08:	4410      	add	r0, r2
        tbuf[cntdwn++] = c;
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	4a47      	ldr	r2, [pc, #284]	; (800302c <CharacterInputThread+0x2dc>)
        cs += c;
 8002f0e:	7038      	strb	r0, [r7, #0]
        tbuf[cntdwn++] = c;
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	8013      	strh	r3, [r2, #0]
          state = CLOCK_DWnCs;
 8002f14:	4299      	cmp	r1, r3
 8002f16:	bf08      	it	eq
 8002f18:	262a      	moveq	r6, #42	; 0x2a
 8002f1a:	e72d      	b.n	8002d78 <CharacterInputThread+0x28>
        if (c == cs){
 8002f1c:	783b      	ldrb	r3, [r7, #0]
 8002f1e:	4283      	cmp	r3, r0
 8002f20:	f47f af7f 	bne.w	8002e22 <CharacterInputThread+0xd2>
          streamPut(ost, temp);
 8002f24:	682b      	ldr	r3, [r5, #0]
          temp=0;
 8002f26:	4a42      	ldr	r2, [pc, #264]	; (8003030 <CharacterInputThread+0x2e0>)
          streamPut(ost, temp);
 8002f28:	68db      	ldr	r3, [r3, #12]
          count = 0;
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f8aa 1000 	strh.w	r1, [sl]
          streamPut(ost, temp);
 8002f30:	4640      	mov	r0, r8
          temp=0;
 8002f32:	7011      	strb	r1, [r2, #0]
        state = IDLE;
 8002f34:	460e      	mov	r6, r1
          streamPut(ost, temp);
 8002f36:	4798      	blx	r3
 8002f38:	e71e      	b.n	8002d78 <CharacterInputThread+0x28>
        cs += c;
 8002f3a:	783b      	ldrb	r3, [r7, #0]
        cntdwn = 0;
 8002f3c:	4a3b      	ldr	r2, [pc, #236]	; (800302c <CharacterInputThread+0x2dc>)
        count = (uint16_t)c;
 8002f3e:	f8aa 0000 	strh.w	r0, [sl]
        cs += c;
 8002f42:	4418      	add	r0, r3
        cntdwn = 0;
 8002f44:	2300      	movs	r3, #0
        cs += c;
 8002f46:	7038      	strb	r0, [r7, #0]
        cntdwn = 0;
 8002f48:	8013      	strh	r3, [r2, #0]
        state = CLOCK_DWn;
 8002f4a:	2629      	movs	r6, #41	; 0x29
 8002f4c:	e714      	b.n	8002d78 <CharacterInputThread+0x28>
        cs += c;
 8002f4e:	783b      	ldrb	r3, [r7, #0]
          state = SERIAL_NS;
 8002f50:	2853      	cmp	r0, #83	; 0x53
        cs += c;
 8002f52:	4418      	add	r0, r3
          state = SERIAL_NS;
 8002f54:	bf08      	it	eq
 8002f56:	260f      	moveq	r6, #15
        cs += c;
 8002f58:	7038      	strb	r0, [r7, #0]
        if (c == 'S'){                   // N S
 8002f5a:	e70d      	b.n	8002d78 <CharacterInputThread+0x28>
        cs += c;
 8002f5c:	783b      	ldrb	r3, [r7, #0]
 8002f5e:	2852      	cmp	r0, #82	; 0x52
 8002f60:	4403      	add	r3, r0
 8002f62:	703b      	strb	r3, [r7, #0]
        switch (c){
 8002f64:	f000 8520 	beq.w	80039a8 <CharacterInputThread+0xc58>
 8002f68:	2853      	cmp	r0, #83	; 0x53
 8002f6a:	f000 851a 	beq.w	80039a2 <CharacterInputThread+0xc52>
          state = BANK_BE;
 8002f6e:	2845      	cmp	r0, #69	; 0x45
 8002f70:	bf14      	ite	ne
 8002f72:	2632      	movne	r6, #50	; 0x32
 8002f74:	2607      	moveq	r6, #7
 8002f76:	e6ff      	b.n	8002d78 <CharacterInputThread+0x28>
        if (c == 'V'){
 8002f78:	2856      	cmp	r0, #86	; 0x56
 8002f7a:	f47f af56 	bne.w	8002e2a <CharacterInputThread+0xda>
          chprintf(ost, "%c%cU", VMAJOR, VMINOR); // U for Unicomp, N for Nucleo NVRAM Programmer
 8002f7e:	492d      	ldr	r1, [pc, #180]	; (8003034 <CharacterInputThread+0x2e4>)
 8002f80:	2300      	movs	r3, #0
 8002f82:	2201      	movs	r2, #1
 8002f84:	4640      	mov	r0, r8
 8002f86:	f7ff fc8b 	bl	80028a0 <chprintf>
        state = IDLE;
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	e6f4      	b.n	8002d78 <CharacterInputThread+0x28>
        cs += c;
 8002f8e:	783b      	ldrb	r3, [r7, #0]
        temp = c;                     // Bank Number
 8002f90:	4a27      	ldr	r2, [pc, #156]	; (8003030 <CharacterInputThread+0x2e0>)
 8002f92:	7010      	strb	r0, [r2, #0]
        cs += c;
 8002f94:	4418      	add	r0, r3
 8002f96:	7038      	strb	r0, [r7, #0]
        state = BANK_BSn;
 8002f98:	260a      	movs	r6, #10
 8002f9a:	e6ed      	b.n	8002d78 <CharacterInputThread+0x28>
        if (c == cs){                   // B R R + CS
 8002f9c:	783b      	ldrb	r3, [r7, #0]
 8002f9e:	4283      	cmp	r3, r0
 8002fa0:	f040 81f0 	bne.w	8003384 <CharacterInputThread+0x634>
          streamPut(ost, bankrw);
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	4a24      	ldr	r2, [pc, #144]	; (8003038 <CharacterInputThread+0x2e8>)
          streamPut(ost, bankemv);
 8002fa8:	7811      	ldrb	r1, [r2, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4640      	mov	r0, r8
 8002fae:	4798      	blx	r3
 8002fb0:	e73b      	b.n	8002e2a <CharacterInputThread+0xda>
        cs += c;
 8002fb2:	783b      	ldrb	r3, [r7, #0]
        if (c == 'R'){                   // B R R
 8002fb4:	2852      	cmp	r0, #82	; 0x52
        cs += c;
 8002fb6:	4403      	add	r3, r0
 8002fb8:	703b      	strb	r3, [r7, #0]
        if (c == 'R'){                   // B R R
 8002fba:	f000 84e9 	beq.w	8003990 <CharacterInputThread+0xc40>
          btemp = c;                     // Bank Number
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <CharacterInputThread+0x2ec>)
          state = BANK_BRn;
 8002fc0:	2609      	movs	r6, #9
          btemp = c;                     // Bank Number
 8002fc2:	7018      	strb	r0, [r3, #0]
 8002fc4:	e6d8      	b.n	8002d78 <CharacterInputThread+0x28>
        if (c == cs){                   // B E S + CS
 8002fc6:	783b      	ldrb	r3, [r7, #0]
 8002fc8:	4283      	cmp	r3, r0
 8002fca:	f040 81db 	bne.w	8003384 <CharacterInputThread+0x634>
          streamPut(ost, bankemp);
 8002fce:	682b      	ldr	r3, [r5, #0]
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <CharacterInputThread+0x2f0>)
 8002fd2:	e7e9      	b.n	8002fa8 <CharacterInputThread+0x258>
        cs += c;
 8002fd4:	783b      	ldrb	r3, [r7, #0]
 8002fd6:	2852      	cmp	r0, #82	; 0x52
 8002fd8:	4403      	add	r3, r0
 8002fda:	703b      	strb	r3, [r7, #0]
        switch (c){
 8002fdc:	f000 84db 	beq.w	8003996 <CharacterInputThread+0xc46>
 8002fe0:	2857      	cmp	r0, #87	; 0x57
 8002fe2:	bf14      	ite	ne
 8002fe4:	2632      	movne	r6, #50	; 0x32
 8002fe6:	2627      	moveq	r6, #39	; 0x27
 8002fe8:	e6c6      	b.n	8002d78 <CharacterInputThread+0x28>
          cs += c;
 8002fea:	783a      	ldrb	r2, [r7, #0]
          count += (uint16_t)c;
 8002fec:	f8ba 3000 	ldrh.w	r3, [sl]
          cs += c;
 8002ff0:	4402      	add	r2, r0
          count += (uint16_t)c;
 8002ff2:	4418      	add	r0, r3
          cs += c;
 8002ff4:	703a      	strb	r2, [r7, #0]
          count += (uint16_t)c;
 8002ff6:	f8aa 0000 	strh.w	r0, [sl]
          state = XSVF_Xnn;
 8002ffa:	2630      	movs	r6, #48	; 0x30
 8002ffc:	e6bc      	b.n	8002d78 <CharacterInputThread+0x28>
            cs += c;
 8002ffe:	783b      	ldrb	r3, [r7, #0]
 8003000:	4403      	add	r3, r0
 8003002:	703b      	strb	r3, [r7, #0]
            if (c) count = (uint16_t)c;
 8003004:	2800      	cmp	r0, #0
 8003006:	f040 81d9 	bne.w	80033bc <CharacterInputThread+0x66c>
            count = 256;
 800300a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800300e:	f8aa 3000 	strh.w	r3, [sl]
            state = BULK_ZWnB;
 8003012:	261f      	movs	r6, #31
 8003014:	e6b0      	b.n	8002d78 <CharacterInputThread+0x28>
 8003016:	bf00      	nop
 8003018:	08005f38 	.word	0x08005f38
 800301c:	20000e9c 	.word	0x20000e9c
 8003020:	20001566 	.word	0x20001566
 8003024:	08005f04 	.word	0x08005f04
 8003028:	20000c40 	.word	0x20000c40
 800302c:	20001550 	.word	0x20001550
 8003030:	2000185c 	.word	0x2000185c
 8003034:	08005f30 	.word	0x08005f30
 8003038:	200013ae 	.word	0x200013ae
 800303c:	200013af 	.word	0x200013af
 8003040:	200013ac 	.word	0x200013ac
 8003044:	20001564 	.word	0x20001564
            if (c == cs){
 8003048:	783b      	ldrb	r3, [r7, #0]
 800304a:	4283      	cmp	r3, r0
 800304c:	f47f aee9 	bne.w	8002e22 <CharacterInputThread+0xd2>
              streamPut(ost, checksum);
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	2100      	movs	r1, #0
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	4640      	mov	r0, r8
 8003058:	4798      	blx	r3
              count *= 256;
 800305a:	f8ba 3000 	ldrh.w	r3, [sl]
 800305e:	021b      	lsls	r3, r3, #8
              count --;
 8003060:	3b01      	subs	r3, #1
 8003062:	f8aa 3000 	strh.w	r3, [sl]
                tbuf[0] = 0;
 8003066:	2600      	movs	r6, #0
                streamPut(ost, tbuf[0]);
 8003068:	682b      	ldr	r3, [r5, #0]
                tbuf[0] = 0;
 800306a:	f88b 6000 	strb.w	r6, [fp]
                streamPut(ost, tbuf[0]);
 800306e:	2100      	movs	r1, #0
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	4640      	mov	r0, r8
 8003074:	4798      	blx	r3
                count--;
 8003076:	f8ba 1000 	ldrh.w	r1, [sl]
 800307a:	3901      	subs	r1, #1
 800307c:	b289      	uxth	r1, r1
 800307e:	f8aa 1000 	strh.w	r1, [sl]
              while (count){ //Blocks of 256 Bytes
 8003082:	2900      	cmp	r1, #0
 8003084:	d1f0      	bne.n	8003068 <CharacterInputThread+0x318>
              streamPut(ost, checksum);
 8003086:	682b      	ldr	r3, [r5, #0]
 8003088:	4640      	mov	r0, r8
 800308a:	68db      	ldr	r3, [r3, #12]
            state = IDLE;
 800308c:	460e      	mov	r6, r1
              streamPut(ost, checksum);
 800308e:	4798      	blx	r3
 8003090:	e672      	b.n	8002d78 <CharacterInputThread+0x28>
            cs += c;
 8003092:	783b      	ldrb	r3, [r7, #0]
 8003094:	4418      	add	r0, r3
 8003096:	7038      	strb	r0, [r7, #0]
            state = BULK_ZRnBMCs;
 8003098:	261d      	movs	r6, #29
 800309a:	e66d      	b.n	8002d78 <CharacterInputThread+0x28>
        tbuf[cntdwn++] = c;
 800309c:	4bae      	ldr	r3, [pc, #696]	; (8003358 <CharacterInputThread+0x608>)
        cs += c;
 800309e:	783a      	ldrb	r2, [r7, #0]
        tbuf[cntdwn++] = c;
 80030a0:	881b      	ldrh	r3, [r3, #0]
        if (cntdwn == count){
 80030a2:	f8ba 1000 	ldrh.w	r1, [sl]
        tbuf[cntdwn++] = c;
 80030a6:	f80b 0003 	strb.w	r0, [fp, r3]
        cs += c;
 80030aa:	4410      	add	r0, r2
        tbuf[cntdwn++] = c;
 80030ac:	3301      	adds	r3, #1
 80030ae:	4aaa      	ldr	r2, [pc, #680]	; (8003358 <CharacterInputThread+0x608>)
        cs += c;
 80030b0:	7038      	strb	r0, [r7, #0]
        tbuf[cntdwn++] = c;
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	8013      	strh	r3, [r2, #0]
          state = PINS_CnCs;
 80030b6:	4299      	cmp	r1, r3
 80030b8:	bf08      	it	eq
 80030ba:	262d      	moveq	r6, #45	; 0x2d
 80030bc:	e65c      	b.n	8002d78 <CharacterInputThread+0x28>
        cs += c;
 80030be:	783b      	ldrb	r3, [r7, #0]
        cntdwn = 0;
 80030c0:	4aa5      	ldr	r2, [pc, #660]	; (8003358 <CharacterInputThread+0x608>)
        count = (uint16_t)c;
 80030c2:	f8aa 0000 	strh.w	r0, [sl]
        cs += c;
 80030c6:	4418      	add	r0, r3
        cntdwn = 0;
 80030c8:	2300      	movs	r3, #0
        cs += c;
 80030ca:	7038      	strb	r0, [r7, #0]
        cntdwn = 0;
 80030cc:	8013      	strh	r3, [r2, #0]
        state = PINS_Cn;
 80030ce:	262c      	movs	r6, #44	; 0x2c
 80030d0:	e652      	b.n	8002d78 <CharacterInputThread+0x28>
        cs += c;
 80030d2:	783b      	ldrb	r3, [r7, #0]
 80030d4:	4418      	add	r0, r3
 80030d6:	7038      	strb	r0, [r7, #0]
        state = BAUD_Sn;
 80030d8:	260d      	movs	r6, #13
 80030da:	e64d      	b.n	8002d78 <CharacterInputThread+0x28>
        if (c == cs){                   // B E + n + CS
 80030dc:	783b      	ldrb	r3, [r7, #0]
 80030de:	4283      	cmp	r3, r0
 80030e0:	f040 8150 	bne.w	8003384 <CharacterInputThread+0x634>
          if (temp <= 8){
 80030e4:	4b9d      	ldr	r3, [pc, #628]	; (800335c <CharacterInputThread+0x60c>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	f200 8157 	bhi.w	800339c <CharacterInputThread+0x64c>
            bankemv = temp;
 80030ee:	4a9c      	ldr	r2, [pc, #624]	; (8003360 <CharacterInputThread+0x610>)
            chprintf(ost, "O");
 80030f0:	499c      	ldr	r1, [pc, #624]	; (8003364 <CharacterInputThread+0x614>)
            bankemv = temp;
 80030f2:	7013      	strb	r3, [r2, #0]
            chprintf(ost, "O");
 80030f4:	4640      	mov	r0, r8
 80030f6:	f7ff fbd3 	bl	80028a0 <chprintf>
        state = IDLE;
 80030fa:	2600      	movs	r6, #0
 80030fc:	e63c      	b.n	8002d78 <CharacterInputThread+0x28>
        if (c == cs){                   // B S + n + CS
 80030fe:	783b      	ldrb	r3, [r7, #0]
 8003100:	4283      	cmp	r3, r0
 8003102:	f040 813f 	bne.w	8003384 <CharacterInputThread+0x634>
          if (temp <= 8){
 8003106:	4b95      	ldr	r3, [pc, #596]	; (800335c <CharacterInputThread+0x60c>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b08      	cmp	r3, #8
 800310c:	f200 8146 	bhi.w	800339c <CharacterInputThread+0x64c>
            bankemp = temp;
 8003110:	4a95      	ldr	r2, [pc, #596]	; (8003368 <CharacterInputThread+0x618>)
            chprintf(ost, "O");
 8003112:	4994      	ldr	r1, [pc, #592]	; (8003364 <CharacterInputThread+0x614>)
            bankemp = temp;
 8003114:	7013      	strb	r3, [r2, #0]
            chprintf(ost, "O");
 8003116:	4640      	mov	r0, r8
 8003118:	f7ff fbc2 	bl	80028a0 <chprintf>
        state = IDLE;
 800311c:	2600      	movs	r6, #0
 800311e:	e62b      	b.n	8002d78 <CharacterInputThread+0x28>
          cs += c;
 8003120:	783b      	ldrb	r3, [r7, #0]
 8003122:	4418      	add	r0, r3
 8003124:	7038      	strb	r0, [r7, #0]
          state = READ_nML;
 8003126:	2617      	movs	r6, #23
 8003128:	e626      	b.n	8002d78 <CharacterInputThread+0x28>
          cs += c;
 800312a:	783b      	ldrb	r3, [r7, #0]
 800312c:	4403      	add	r3, r0
 800312e:	703b      	strb	r3, [r7, #0]
          if (c) count = (uint16_t)c;
 8003130:	2800      	cmp	r0, #0
 8003132:	f040 813f 	bne.w	80033b4 <CharacterInputThread+0x664>
          count = 256;
 8003136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800313a:	f8aa 3000 	strh.w	r3, [sl]
          state = READ_nM;
 800313e:	2616      	movs	r6, #22
 8003140:	e61a      	b.n	8002d78 <CharacterInputThread+0x28>
          if (c == cs){
 8003142:	783b      	ldrb	r3, [r7, #0]
 8003144:	4283      	cmp	r3, r0
 8003146:	f000 8141 	beq.w	80033cc <CharacterInputThread+0x67c>
            chprintf(ost, "X");
 800314a:	4988      	ldr	r1, [pc, #544]	; (800336c <CharacterInputThread+0x61c>)
 800314c:	4640      	mov	r0, r8
 800314e:	f7ff fba7 	bl	80028a0 <chprintf>
            chprintf(dbg, "Checksum ERROR\r\n");
 8003152:	4987      	ldr	r1, [pc, #540]	; (8003370 <CharacterInputThread+0x620>)
 8003154:	4887      	ldr	r0, [pc, #540]	; (8003374 <CharacterInputThread+0x624>)
 8003156:	f7ff fba3 	bl	80028a0 <chprintf>
          state = IDLE;
 800315a:	2600      	movs	r6, #0
 800315c:	e60c      	b.n	8002d78 <CharacterInputThread+0x28>
          tbuf[cntdwn++] = c;
 800315e:	4b7e      	ldr	r3, [pc, #504]	; (8003358 <CharacterInputThread+0x608>)
          cs += c;
 8003160:	783a      	ldrb	r2, [r7, #0]
          tbuf[cntdwn++] = c;
 8003162:	881b      	ldrh	r3, [r3, #0]
          if (cntdwn == count){
 8003164:	f8ba 1000 	ldrh.w	r1, [sl]
          tbuf[cntdwn++] = c;
 8003168:	f80b 0003 	strb.w	r0, [fp, r3]
          cs += c;
 800316c:	4410      	add	r0, r2
          tbuf[cntdwn++] = c;
 800316e:	3301      	adds	r3, #1
 8003170:	4a79      	ldr	r2, [pc, #484]	; (8003358 <CharacterInputThread+0x608>)
          cs += c;
 8003172:	7038      	strb	r0, [r7, #0]
          tbuf[cntdwn++] = c;
 8003174:	b29b      	uxth	r3, r3
 8003176:	8013      	strh	r3, [r2, #0]
            state = WRITE_nMLCs;
 8003178:	4299      	cmp	r1, r3
 800317a:	bf08      	it	eq
 800317c:	2614      	moveq	r6, #20
 800317e:	e5fb      	b.n	8002d78 <CharacterInputThread+0x28>
          cs += c;
 8003180:	783b      	ldrb	r3, [r7, #0]
 8003182:	4418      	add	r0, r3
 8003184:	7038      	strb	r0, [r7, #0]
          state = WRITE_nMLB;
 8003186:	2613      	movs	r6, #19
 8003188:	e5f6      	b.n	8002d78 <CharacterInputThread+0x28>
          cs += c;
 800318a:	783b      	ldrb	r3, [r7, #0]
 800318c:	4418      	add	r0, r3
 800318e:	7038      	strb	r0, [r7, #0]
          state = WRITE_nML;
 8003190:	2612      	movs	r6, #18
 8003192:	e5f1      	b.n	8002d78 <CharacterInputThread+0x28>
          cs += c;
 8003194:	783b      	ldrb	r3, [r7, #0]
 8003196:	4403      	add	r3, r0
 8003198:	703b      	strb	r3, [r7, #0]
          cntdwn = 0;
 800319a:	4b6f      	ldr	r3, [pc, #444]	; (8003358 <CharacterInputThread+0x608>)
 800319c:	2200      	movs	r2, #0
 800319e:	801a      	strh	r2, [r3, #0]
          if (c) count = (uint16_t)c;
 80031a0:	2800      	cmp	r0, #0
 80031a2:	f040 810f 	bne.w	80033c4 <CharacterInputThread+0x674>
          count = 256;
 80031a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031aa:	f8aa 3000 	strh.w	r3, [sl]
          state = WRITE_nM;
 80031ae:	2611      	movs	r6, #17
 80031b0:	e5e2      	b.n	8002d78 <CharacterInputThread+0x28>
        if (c == cs){                   // N S + CS
 80031b2:	783b      	ldrb	r3, [r7, #0]
 80031b4:	4283      	cmp	r3, r0
 80031b6:	f47f ae34 	bne.w	8002e22 <CharacterInputThread+0xd2>
          temp=0;
 80031ba:	4a68      	ldr	r2, [pc, #416]	; (800335c <CharacterInputThread+0x60c>)
 80031bc:	9401      	str	r4, [sp, #4]
 80031be:	2300      	movs	r3, #0
 80031c0:	7013      	strb	r3, [r2, #0]
          for (i=0;i<sizeof(serial);i++){
 80031c2:	f1ab 0304 	sub.w	r3, fp, #4
 80031c6:	f1ab 090d 	sub.w	r9, fp, #13
 80031ca:	461c      	mov	r4, r3
            streamPut(ost, serial[i]);
 80031cc:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 80031d0:	682a      	ldr	r2, [r5, #0]
 80031d2:	4631      	mov	r1, r6
 80031d4:	68d2      	ldr	r2, [r2, #12]
 80031d6:	4640      	mov	r0, r8
 80031d8:	4790      	blx	r2
            temp += serial[i];
 80031da:	4b60      	ldr	r3, [pc, #384]	; (800335c <CharacterInputThread+0x60c>)
 80031dc:	7819      	ldrb	r1, [r3, #0]
 80031de:	4431      	add	r1, r6
 80031e0:	b2c9      	uxtb	r1, r1
          for (i=0;i<sizeof(serial);i++){
 80031e2:	45a1      	cmp	r9, r4
            temp += serial[i];
 80031e4:	7019      	strb	r1, [r3, #0]
          for (i=0;i<sizeof(serial);i++){
 80031e6:	d1f1      	bne.n	80031cc <CharacterInputThread+0x47c>
          streamPut(ost, temp);
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	9c01      	ldr	r4, [sp, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4640      	mov	r0, r8
 80031f0:	4798      	blx	r3
        state = IDLE;
 80031f2:	2600      	movs	r6, #0
 80031f4:	e5c0      	b.n	8002d78 <CharacterInputThread+0x28>
            cs += c;
 80031f6:	783b      	ldrb	r3, [r7, #0]
 80031f8:	4403      	add	r3, r0
 80031fa:	703b      	strb	r3, [r7, #0]
            if (c) count = (uint16_t)c;
 80031fc:	2800      	cmp	r0, #0
 80031fe:	f040 80d5 	bne.w	80033ac <CharacterInputThread+0x65c>
            count = 256;
 8003202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003206:	f8aa 3000 	strh.w	r3, [sl]
            state = BULK_ZRnB;
 800320a:	261b      	movs	r6, #27
 800320c:	e5b4      	b.n	8002d78 <CharacterInputThread+0x28>
            cs += c;
 800320e:	783b      	ldrb	r3, [r7, #0]
 8003210:	4418      	add	r0, r3
 8003212:	7038      	strb	r0, [r7, #0]
            state = BULK_ZRnBM;
 8003214:	261c      	movs	r6, #28
 8003216:	e5af      	b.n	8002d78 <CharacterInputThread+0x28>
          if (c == cs){
 8003218:	783b      	ldrb	r3, [r7, #0]
 800321a:	4283      	cmp	r3, r0
 800321c:	f47f ae01 	bne.w	8002e22 <CharacterInputThread+0xd2>
            for (i=0; i<count; i++){
 8003220:	f8ba 6000 	ldrh.w	r6, [sl]
 8003224:	b1a6      	cbz	r6, 8003250 <CharacterInputThread+0x500>
 8003226:	f04f 0900 	mov.w	r9, #0
            checksum = 0;
 800322a:	464e      	mov	r6, r9
              checksum += tbuf[i];
 800322c:	fa1f f289 	uxth.w	r2, r9
              streamPut(ost, tbuf[i]);
 8003230:	682b      	ldr	r3, [r5, #0]
              checksum += tbuf[i];
 8003232:	f81b 1002 	ldrb.w	r1, [fp, r2]
              streamPut(ost, tbuf[i]);
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4640      	mov	r0, r8
              checksum += tbuf[i];
 800323a:	440e      	add	r6, r1
 800323c:	f109 0901 	add.w	r9, r9, #1
              streamPut(ost, tbuf[i]);
 8003240:	4798      	blx	r3
            for (i=0; i<count; i++){
 8003242:	f8ba 2000 	ldrh.w	r2, [sl]
 8003246:	fa1f f389 	uxth.w	r3, r9
 800324a:	429a      	cmp	r2, r3
              checksum += tbuf[i];
 800324c:	b2f6      	uxtb	r6, r6
            for (i=0; i<count; i++){
 800324e:	d8ed      	bhi.n	800322c <CharacterInputThread+0x4dc>
            streamPut(ost, checksum);
 8003250:	682b      	ldr	r3, [r5, #0]
 8003252:	4631      	mov	r1, r6
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4640      	mov	r0, r8
 8003258:	4798      	blx	r3
          state = IDLE;
 800325a:	2600      	movs	r6, #0
 800325c:	e58c      	b.n	8002d78 <CharacterInputThread+0x28>
          cs += c;
 800325e:	783b      	ldrb	r3, [r7, #0]
 8003260:	4418      	add	r0, r3
 8003262:	7038      	strb	r0, [r7, #0]
          state = READ_nMLCs;
 8003264:	2618      	movs	r6, #24
 8003266:	e587      	b.n	8002d78 <CharacterInputThread+0x28>
            cs += c;
 8003268:	783b      	ldrb	r3, [r7, #0]
 800326a:	2852      	cmp	r0, #82	; 0x52
 800326c:	4403      	add	r3, r0
 800326e:	703b      	strb	r3, [r7, #0]
            switch (c){
 8003270:	f000 8394 	beq.w	800399c <CharacterInputThread+0xc4c>
 8003274:	2857      	cmp	r0, #87	; 0x57
 8003276:	bf14      	ite	ne
 8003278:	2600      	movne	r6, #0
 800327a:	261e      	moveq	r6, #30
 800327c:	e57c      	b.n	8002d78 <CharacterInputThread+0x28>
          tbuf[cntdwn++] = c;
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <CharacterInputThread+0x608>)
          cs += c;
 8003280:	783a      	ldrb	r2, [r7, #0]
          tbuf[cntdwn++] = c;
 8003282:	881b      	ldrh	r3, [r3, #0]
          if (cntdwn == count){
 8003284:	f8ba 1000 	ldrh.w	r1, [sl]
          tbuf[cntdwn++] = c;
 8003288:	f80b 0003 	strb.w	r0, [fp, r3]
          cs += c;
 800328c:	4410      	add	r0, r2
          tbuf[cntdwn++] = c;
 800328e:	3301      	adds	r3, #1
 8003290:	4a31      	ldr	r2, [pc, #196]	; (8003358 <CharacterInputThread+0x608>)
          cs += c;
 8003292:	7038      	strb	r0, [r7, #0]
          tbuf[cntdwn++] = c;
 8003294:	b29b      	uxth	r3, r3
 8003296:	8013      	strh	r3, [r2, #0]
            state = XSVF_XnCs;
 8003298:	4299      	cmp	r1, r3
 800329a:	bf08      	it	eq
 800329c:	2631      	moveq	r6, #49	; 0x31
 800329e:	e56b      	b.n	8002d78 <CharacterInputThread+0x28>
        if (c == cs){                   // B E E + CS
 80032a0:	783b      	ldrb	r3, [r7, #0]
 80032a2:	4283      	cmp	r3, r0
 80032a4:	d16e      	bne.n	8003384 <CharacterInputThread+0x634>
          streamPut(ost, bankemv);
 80032a6:	682b      	ldr	r3, [r5, #0]
 80032a8:	4a2d      	ldr	r2, [pc, #180]	; (8003360 <CharacterInputThread+0x610>)
 80032aa:	e67d      	b.n	8002fa8 <CharacterInputThread+0x258>
        cs += c;
 80032ac:	783b      	ldrb	r3, [r7, #0]
        if ((c == 'E') || (c == 'R')){                   // B E E or B E R
 80032ae:	2845      	cmp	r0, #69	; 0x45
        cs += c;
 80032b0:	4403      	add	r3, r0
 80032b2:	703b      	strb	r3, [r7, #0]
        if ((c == 'E') || (c == 'R')){                   // B E E or B E R
 80032b4:	d078      	beq.n	80033a8 <CharacterInputThread+0x658>
 80032b6:	2852      	cmp	r0, #82	; 0x52
 80032b8:	d076      	beq.n	80033a8 <CharacterInputThread+0x658>
        else if (c == 'S'){                                       // B E S
 80032ba:	2853      	cmp	r0, #83	; 0x53
 80032bc:	f000 8377 	beq.w	80039ae <CharacterInputThread+0xc5e>
          temp = c;                     // Bank Number
 80032c0:	4b26      	ldr	r3, [pc, #152]	; (800335c <CharacterInputThread+0x60c>)
          state = BANK_BEn;
 80032c2:	260b      	movs	r6, #11
          temp = c;                     // Bank Number
 80032c4:	7018      	strb	r0, [r3, #0]
 80032c6:	e557      	b.n	8002d78 <CharacterInputThread+0x28>
        if (c == cs){                   // B R + n + CS
 80032c8:	783b      	ldrb	r3, [r7, #0]
 80032ca:	4283      	cmp	r3, r0
 80032cc:	d15a      	bne.n	8003384 <CharacterInputThread+0x634>
          if (btemp <= 8){
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <CharacterInputThread+0x628>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d862      	bhi.n	800339c <CharacterInputThread+0x64c>
            bankrw = btemp;
 80032d6:	4a29      	ldr	r2, [pc, #164]	; (800337c <CharacterInputThread+0x62c>)
            chprintf(ost, "O");
 80032d8:	4922      	ldr	r1, [pc, #136]	; (8003364 <CharacterInputThread+0x614>)
            bankrw = btemp;
 80032da:	7013      	strb	r3, [r2, #0]
            chprintf(ost, "O");
 80032dc:	4640      	mov	r0, r8
 80032de:	f7ff fadf 	bl	80028a0 <chprintf>
        state = IDLE;
 80032e2:	2600      	movs	r6, #0
 80032e4:	e548      	b.n	8002d78 <CharacterInputThread+0x28>
        tbuf[cntdwn++] = c;
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <CharacterInputThread+0x608>)
        cs += c;
 80032e8:	783a      	ldrb	r2, [r7, #0]
        tbuf[cntdwn++] = c;
 80032ea:	881b      	ldrh	r3, [r3, #0]
        if (cntdwn == count){
 80032ec:	f8ba 1000 	ldrh.w	r1, [sl]
        tbuf[cntdwn++] = c;
 80032f0:	f80b 0003 	strb.w	r0, [fp, r3]
        cs += c;
 80032f4:	4410      	add	r0, r2
        tbuf[cntdwn++] = c;
 80032f6:	3301      	adds	r3, #1
 80032f8:	4a17      	ldr	r2, [pc, #92]	; (8003358 <CharacterInputThread+0x608>)
        cs += c;
 80032fa:	7038      	strb	r0, [r7, #0]
        tbuf[cntdwn++] = c;
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8013      	strh	r3, [r2, #0]
          state = CONFIG_CnCs;
 8003300:	4299      	cmp	r1, r3
 8003302:	bf08      	it	eq
 8003304:	2625      	moveq	r6, #37	; 0x25
 8003306:	e537      	b.n	8002d78 <CharacterInputThread+0x28>
        cs += c;
 8003308:	783b      	ldrb	r3, [r7, #0]
        cntdwn = 0;
 800330a:	4a13      	ldr	r2, [pc, #76]	; (8003358 <CharacterInputThread+0x608>)
        count = (uint16_t)c;
 800330c:	f8aa 0000 	strh.w	r0, [sl]
        cs += c;
 8003310:	4418      	add	r0, r3
        cntdwn = 0;
 8003312:	2300      	movs	r3, #0
        cs += c;
 8003314:	7038      	strb	r0, [r7, #0]
        cntdwn = 0;
 8003316:	8013      	strh	r3, [r2, #0]
        state = CONFIG_Cn;
 8003318:	2624      	movs	r6, #36	; 0x24
 800331a:	e52d      	b.n	8002d78 <CharacterInputThread+0x28>
            cs += c;
 800331c:	783b      	ldrb	r3, [r7, #0]
            zoff = 0;
 800331e:	4a18      	ldr	r2, [pc, #96]	; (8003380 <CharacterInputThread+0x630>)
            cs += c;
 8003320:	4418      	add	r0, r3
            zoff = 0;
 8003322:	2300      	movs	r3, #0
            cs += c;
 8003324:	7038      	strb	r0, [r7, #0]
            zoff = 0;
 8003326:	8013      	strh	r3, [r2, #0]
            state = BULK_ZWnBMB;
 8003328:	2621      	movs	r6, #33	; 0x21
 800332a:	e525      	b.n	8002d78 <CharacterInputThread+0x28>
            cs += c;
 800332c:	783b      	ldrb	r3, [r7, #0]
 800332e:	4418      	add	r0, r3
 8003330:	7038      	strb	r0, [r7, #0]
            state = BULK_ZWnBM;
 8003332:	2620      	movs	r6, #32
 8003334:	e520      	b.n	8002d78 <CharacterInputThread+0x28>
            tbuf[zoff++] = c;
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <CharacterInputThread+0x630>)
            cs += c;
 8003338:	783a      	ldrb	r2, [r7, #0]
            tbuf[zoff++] = c;
 800333a:	881b      	ldrh	r3, [r3, #0]
            if (zoff == count){
 800333c:	f8ba 1000 	ldrh.w	r1, [sl]
            tbuf[zoff++] = c;
 8003340:	f80b 0003 	strb.w	r0, [fp, r3]
            cs += c;
 8003344:	4410      	add	r0, r2
            tbuf[zoff++] = c;
 8003346:	3301      	adds	r3, #1
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <CharacterInputThread+0x630>)
            cs += c;
 800334a:	7038      	strb	r0, [r7, #0]
            tbuf[zoff++] = c;
 800334c:	b29b      	uxth	r3, r3
 800334e:	8013      	strh	r3, [r2, #0]
              state = BULK_ZWnBMBCs;
 8003350:	4299      	cmp	r1, r3
 8003352:	bf08      	it	eq
 8003354:	2622      	moveq	r6, #34	; 0x22
 8003356:	e50f      	b.n	8002d78 <CharacterInputThread+0x28>
 8003358:	20001550 	.word	0x20001550
 800335c:	2000185c 	.word	0x2000185c
 8003360:	200013ad 	.word	0x200013ad
 8003364:	08005f18 	.word	0x08005f18
 8003368:	200013ac 	.word	0x200013ac
 800336c:	08006328 	.word	0x08006328
 8003370:	08005f04 	.word	0x08005f04
 8003374:	20000c40 	.word	0x20000c40
 8003378:	200013af 	.word	0x200013af
 800337c:	200013ae 	.word	0x200013ae
 8003380:	2000b568 	.word	0x2000b568
          chprintf(dbg, "Checksum ERROR\r\n");
 8003384:	49c3      	ldr	r1, [pc, #780]	; (8003694 <CharacterInputThread+0x944>)
 8003386:	48c4      	ldr	r0, [pc, #784]	; (8003698 <CharacterInputThread+0x948>)
 8003388:	f7ff fa8a 	bl	80028a0 <chprintf>
        state = IDLE;
 800338c:	2600      	movs	r6, #0
 800338e:	e4f3      	b.n	8002d78 <CharacterInputThread+0x28>
          chprintf(ost, "O");
 8003390:	49c2      	ldr	r1, [pc, #776]	; (800369c <CharacterInputThread+0x94c>)
 8003392:	4640      	mov	r0, r8
 8003394:	f7ff fa84 	bl	80028a0 <chprintf>
        state = IDLE;
 8003398:	2600      	movs	r6, #0
 800339a:	e4ed      	b.n	8002d78 <CharacterInputThread+0x28>
            chprintf(dbg, "Bank > 8 ERROR\r\n");
 800339c:	49c0      	ldr	r1, [pc, #768]	; (80036a0 <CharacterInputThread+0x950>)
 800339e:	48be      	ldr	r0, [pc, #760]	; (8003698 <CharacterInputThread+0x948>)
 80033a0:	f7ff fa7e 	bl	80028a0 <chprintf>
        state = IDLE;
 80033a4:	2600      	movs	r6, #0
 80033a6:	e4e7      	b.n	8002d78 <CharacterInputThread+0x28>
          state = BANK_BEE;
 80033a8:	2608      	movs	r6, #8
 80033aa:	e4e5      	b.n	8002d78 <CharacterInputThread+0x28>
            if (c) count = (uint16_t)c;
 80033ac:	f8aa 0000 	strh.w	r0, [sl]
            state = BULK_ZRnB;
 80033b0:	261b      	movs	r6, #27
 80033b2:	e4e1      	b.n	8002d78 <CharacterInputThread+0x28>
          if (c) count = (uint16_t)c;
 80033b4:	f8aa 0000 	strh.w	r0, [sl]
          state = READ_nM;
 80033b8:	2616      	movs	r6, #22
 80033ba:	e4dd      	b.n	8002d78 <CharacterInputThread+0x28>
            if (c) count = (uint16_t)c;
 80033bc:	f8aa 0000 	strh.w	r0, [sl]
            state = BULK_ZWnB;
 80033c0:	261f      	movs	r6, #31
 80033c2:	e4d9      	b.n	8002d78 <CharacterInputThread+0x28>
          if (c) count = (uint16_t)c;
 80033c4:	f8aa 0000 	strh.w	r0, [sl]
          state = WRITE_nM;
 80033c8:	2611      	movs	r6, #17
 80033ca:	e4d5      	b.n	8002d78 <CharacterInputThread+0x28>
            chprintf(ost, "Y");
 80033cc:	49b5      	ldr	r1, [pc, #724]	; (80036a4 <CharacterInputThread+0x954>)
 80033ce:	4640      	mov	r0, r8
 80033d0:	f7ff fa66 	bl	80028a0 <chprintf>
            if (write_xsvf(count, tbuf) == 0) chprintf(ost, "X");
 80033d4:	f8ba 6000 	ldrh.w	r6, [sl]
	uint32_t temp32;
	//static uint16_t sdr_bytes;
	// len is the total length of the xsvf file

	//chprintf(dbg, "XSVF: Length: %d\r\n", len);
	while (i < len){
 80033d8:	2e00      	cmp	r6, #0
 80033da:	f43f accd 	beq.w	8002d78 <CharacterInputThread+0x28>
	uint16_t i=0; // Counter variable
 80033de:	f04f 0900 	mov.w	r9, #0
		//chprintf(dbg, "%02X ", buf[i]);
		switch (buf[i++]) {
 80033e2:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80033e6:	f109 0201 	add.w	r2, r9, #1
 80033ea:	b292      	uxth	r2, r2
 80033ec:	2b12      	cmp	r3, #18
 80033ee:	d822      	bhi.n	8003436 <CharacterInputThread+0x6e6>
 80033f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80033f4:	023e02a9 	.word	0x023e02a9
 80033f8:	01270279 	.word	0x01270279
 80033fc:	002102b5 	.word	0x002102b5
 8003400:	01a70021 	.word	0x01a70021
 8003404:	00c60260 	.word	0x00c60260
 8003408:	002101de 	.word	0x002101de
 800340c:	021901b9 	.word	0x021901b9
 8003410:	01660102 	.word	0x01660102
 8003414:	00490085 	.word	0x00490085
 8003418:	002b      	.short	0x002b
			//chprintf(dbg, "Set XDRSIZE to %04X or %04X\r\n", sdr_size, BYTES(sdr_size));
			streamPut(ost, 8);
			break;

		case XSDRTDO: // 09
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 800341a:	440a      	add	r2, r1
 800341c:	fa1f fc82 	uxth.w	ip, r2
 8003420:	fa1f f981 	uxth.w	r9, r1
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 8003424:	44e1      	add	r9, ip
			//chprintf(dbg, "Set TDIVAL to %02X %02X %02X %02X\r\n", tdi_value[0], tdi_value[1], tdi_value[2], tdi_value[3]);
			//chprintf(dbg, "Set TDOEXP to %02X %02X %02X %02X\r\n", tdo_expected[0], tdo_expected[1], tdo_expected[2], tdo_expected[3]);
			if (sdr(SDR_FULL|SDR_CHECK)) {
 8003426:	2013      	movs	r0, #19
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 8003428:	fa1f f989 	uxth.w	r9, r9
			if (sdr(SDR_FULL|SDR_CHECK)) {
 800342c:	f7fd fb80 	bl	8000b30 <sdr>
 8003430:	2800      	cmp	r0, #0
 8003432:	f000 8193 	beq.w	800375c <CharacterInputThread+0xa0c>
		chprintf(dbg, "---------FAIL!\r\n");
 8003436:	499c      	ldr	r1, [pc, #624]	; (80036a8 <CharacterInputThread+0x958>)
 8003438:	4897      	ldr	r0, [pc, #604]	; (8003698 <CharacterInputThread+0x948>)
 800343a:	f7ff fa31 	bl	80028a0 <chprintf>
 800343e:	499b      	ldr	r1, [pc, #620]	; (80036ac <CharacterInputThread+0x95c>)
 8003440:	4640      	mov	r0, r8
 8003442:	f7ff fa2d 	bl	80028a0 <chprintf>
          state = IDLE;
 8003446:	2600      	movs	r6, #0
 8003448:	e496      	b.n	8002d78 <CharacterInputThread+0x28>
	*data = *buf;
 800344a:	f81b 0002 	ldrb.w	r0, [fp, r2]
			fail();
			return 0;
			break;

		case XSTATE:
			read_byte(&inst, &(buf[i++]));
 800344e:	f109 0902 	add.w	r9, r9, #2
 8003452:	fa1f f989 	uxth.w	r9, r9
	if (state==STATE_TLR) {
 8003456:	2800      	cmp	r0, #0
 8003458:	f040 82ac 	bne.w	80039b4 <CharacterInputThread+0xc64>
 800345c:	2005      	movs	r0, #5
	if (p == TMS && val == 1) BSRR_TMS = (1 << TMS_Pin);
 800345e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003462:	4a93      	ldr	r2, [pc, #588]	; (80036b0 <CharacterInputThread+0x960>)
 8003464:	6013      	str	r3, [r2, #0]
	pulse_clock();
 8003466:	f7fd fab3 	bl	80009d0 <pulse_clock>
	if (tms==0) {
 800346a:	f7fd fa69 	bl	8000940 <state_step.part.0>
		for (i=0;i<5;i++) {
 800346e:	3801      	subs	r0, #1
 8003470:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003478:	d1f3      	bne.n	8003462 <CharacterInputThread+0x712>
			//chprintf(dbg, "Goto STATE: %02X\r\n", inst);
			state_goto(inst);
			streamPut(ost, 18);
 800347a:	682b      	ldr	r3, [r5, #0]
 800347c:	2112      	movs	r1, #18
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4640      	mov	r0, r8
 8003482:	4798      	blx	r3
			break;
 8003484:	e16a      	b.n	800375c <CharacterInputThread+0xa0c>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003486:	4b8b      	ldr	r3, [pc, #556]	; (80036b4 <CharacterInputThread+0x964>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3307      	adds	r3, #7
	for (i=len-1; i>=0; --i){
 800348c:	f3c3 01c7 	ubfx	r1, r3, #3, #8
 8003490:	1e48      	subs	r0, r1, #1
 8003492:	b240      	sxtb	r0, r0
 8003494:	2800      	cmp	r0, #0
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003496:	eb0b 0902 	add.w	r9, fp, r2
	for (i=len-1; i>=0; --i){
 800349a:	f2c0 828e 	blt.w	80039ba <CharacterInputThread+0xc6a>
 800349e:	4b86      	ldr	r3, [pc, #536]	; (80036b8 <CharacterInputThread+0x968>)
 80034a0:	3001      	adds	r0, #1
 80034a2:	eb03 0e00 	add.w	lr, r3, r0
 80034a6:	46cc      	mov	ip, r9
		data[i] = *(buf++);
 80034a8:	f81c 3b01 	ldrb.w	r3, [ip], #1
 80034ac:	f80e 3d01 	strb.w	r3, [lr, #-1]!
	for (i=len-1; i>=0; --i){
 80034b0:	ea6f 030c 	mvn.w	r3, ip
 80034b4:	440b      	add	r3, r1
 80034b6:	444b      	add	r3, r9
 80034b8:	061b      	lsls	r3, r3, #24
 80034ba:	d5f5      	bpl.n	80034a8 <CharacterInputThread+0x758>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80034bc:	1853      	adds	r3, r2, r1
 80034be:	b29b      	uxth	r3, r3
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 80034c0:	4a7e      	ldr	r2, [pc, #504]	; (80036bc <CharacterInputThread+0x96c>)
 80034c2:	eb0b 0e03 	add.w	lr, fp, r3
	for (i=len-1; i>=0; --i){
 80034c6:	4410      	add	r0, r2
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 80034c8:	46f4      	mov	ip, lr
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80034ca:	fa1f f981 	uxth.w	r9, r1
		data[i] = *(buf++);
 80034ce:	f81c 2b01 	ldrb.w	r2, [ip], #1
 80034d2:	f800 2d01 	strb.w	r2, [r0, #-1]!
	for (i=len-1; i>=0; --i){
 80034d6:	ea6f 020c 	mvn.w	r2, ip
 80034da:	440a      	add	r2, r1
 80034dc:	4472      	add	r2, lr
 80034de:	0612      	lsls	r2, r2, #24
 80034e0:	d5f5      	bpl.n	80034ce <CharacterInputThread+0x77e>
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 80034e2:	4499      	add	r9, r3
			if (sdr(SDR_END|SDR_CHECK)) {
 80034e4:	2012      	movs	r0, #18
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 80034e6:	fa1f f989 	uxth.w	r9, r9
			if (sdr(SDR_END|SDR_CHECK)) {
 80034ea:	f7fd fb21 	bl	8000b30 <sdr>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	d1a1      	bne.n	8003436 <CharacterInputThread+0x6e6>
			streamPut(ost, 17);
 80034f2:	682b      	ldr	r3, [r5, #0]
 80034f4:	2111      	movs	r1, #17
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4640      	mov	r0, r8
 80034fa:	4798      	blx	r3
			break;
 80034fc:	e12e      	b.n	800375c <CharacterInputThread+0xa0c>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80034fe:	4b6d      	ldr	r3, [pc, #436]	; (80036b4 <CharacterInputThread+0x964>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3307      	adds	r3, #7
	for (i=len-1; i>=0; --i){
 8003504:	f3c3 01c7 	ubfx	r1, r3, #3, #8
 8003508:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 800350c:	fa4f f989 	sxtb.w	r9, r9
 8003510:	f1b9 0f00 	cmp.w	r9, #0
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003514:	eb0b 0e02 	add.w	lr, fp, r2
	for (i=len-1; i>=0; --i){
 8003518:	f2c0 8254 	blt.w	80039c4 <CharacterInputThread+0xc74>
 800351c:	4b66      	ldr	r3, [pc, #408]	; (80036b8 <CharacterInputThread+0x968>)
 800351e:	f109 0901 	add.w	r9, r9, #1
 8003522:	eb03 0c09 	add.w	ip, r3, r9
 8003526:	4670      	mov	r0, lr
		data[i] = *(buf++);
 8003528:	f810 3b01 	ldrb.w	r3, [r0], #1
 800352c:	f80c 3d01 	strb.w	r3, [ip, #-1]!
	for (i=len-1; i>=0; --i){
 8003530:	43c3      	mvns	r3, r0
 8003532:	440b      	add	r3, r1
 8003534:	4473      	add	r3, lr
 8003536:	061b      	lsls	r3, r3, #24
 8003538:	d5f6      	bpl.n	8003528 <CharacterInputThread+0x7d8>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 800353a:	440a      	add	r2, r1
 800353c:	fa1f fc82 	uxth.w	ip, r2
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 8003540:	4b5e      	ldr	r3, [pc, #376]	; (80036bc <CharacterInputThread+0x96c>)
 8003542:	eb0b 0e0c 	add.w	lr, fp, ip
	for (i=len-1; i>=0; --i){
 8003546:	eb03 0209 	add.w	r2, r3, r9
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 800354a:	4670      	mov	r0, lr
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 800354c:	fa1f f981 	uxth.w	r9, r1
		data[i] = *(buf++);
 8003550:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003554:	f802 3d01 	strb.w	r3, [r2, #-1]!
	for (i=len-1; i>=0; --i){
 8003558:	43c3      	mvns	r3, r0
 800355a:	440b      	add	r3, r1
 800355c:	4473      	add	r3, lr
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	d5f6      	bpl.n	8003550 <CharacterInputThread+0x800>
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 8003562:	44e1      	add	r9, ip
			if (sdr(SDR_CONTINUE|SDR_CHECK)) {
 8003564:	2010      	movs	r0, #16
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 8003566:	fa1f f989 	uxth.w	r9, r9
			if (sdr(SDR_CONTINUE|SDR_CHECK)) {
 800356a:	f7fd fae1 	bl	8000b30 <sdr>
 800356e:	2800      	cmp	r0, #0
 8003570:	f47f af61 	bne.w	8003436 <CharacterInputThread+0x6e6>
			streamPut(ost, 16);
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	2110      	movs	r1, #16
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4640      	mov	r0, r8
 800357c:	4798      	blx	r3
			break;
 800357e:	e0ed      	b.n	800375c <CharacterInputThread+0xa0c>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003580:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <CharacterInputThread+0x964>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3307      	adds	r3, #7
	for (i=len-1; i>=0; --i){
 8003586:	f3c3 01c7 	ubfx	r1, r3, #3, #8
 800358a:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 800358e:	fa4f f989 	sxtb.w	r9, r9
 8003592:	f1b9 0f00 	cmp.w	r9, #0
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003596:	eb0b 0e02 	add.w	lr, fp, r2
	for (i=len-1; i>=0; --i){
 800359a:	f6ff af3e 	blt.w	800341a <CharacterInputThread+0x6ca>
 800359e:	4b46      	ldr	r3, [pc, #280]	; (80036b8 <CharacterInputThread+0x968>)
 80035a0:	f109 0901 	add.w	r9, r9, #1
 80035a4:	eb03 0c09 	add.w	ip, r3, r9
 80035a8:	4670      	mov	r0, lr
		data[i] = *(buf++);
 80035aa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80035ae:	f80c 3d01 	strb.w	r3, [ip, #-1]!
	for (i=len-1; i>=0; --i){
 80035b2:	43c3      	mvns	r3, r0
 80035b4:	440b      	add	r3, r1
 80035b6:	4473      	add	r3, lr
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	d5f6      	bpl.n	80035aa <CharacterInputThread+0x85a>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80035bc:	440a      	add	r2, r1
 80035be:	fa1f fc82 	uxth.w	ip, r2
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 80035c2:	4b3e      	ldr	r3, [pc, #248]	; (80036bc <CharacterInputThread+0x96c>)
 80035c4:	eb0b 0e0c 	add.w	lr, fp, ip
	for (i=len-1; i>=0; --i){
 80035c8:	eb03 0209 	add.w	r2, r3, r9
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 80035cc:	4670      	mov	r0, lr
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80035ce:	fa1f f981 	uxth.w	r9, r1
		data[i] = *(buf++);
 80035d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80035d6:	f802 3d01 	strb.w	r3, [r2, #-1]!
	for (i=len-1; i>=0; --i){
 80035da:	43c3      	mvns	r3, r0
 80035dc:	440b      	add	r3, r1
 80035de:	4473      	add	r3, lr
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	d5f6      	bpl.n	80035d2 <CharacterInputThread+0x882>
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 80035e4:	44e1      	add	r9, ip
			if (sdr(SDR_FULL|SDR_CHECK)) {
 80035e6:	2013      	movs	r0, #19
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 80035e8:	fa1f f989 	uxth.w	r9, r9
			if (sdr(SDR_FULL|SDR_CHECK)) {
 80035ec:	f7fd faa0 	bl	8000b30 <sdr>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	f000 80b3 	beq.w	800375c <CharacterInputThread+0xa0c>
 80035f6:	e71e      	b.n	8003436 <CharacterInputThread+0x6e6>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80035f8:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <CharacterInputThread+0x964>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3307      	adds	r3, #7
	for (i=len-1; i>=0; --i){
 80035fe:	f3c3 0cc7 	ubfx	ip, r3, #3, #8
 8003602:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8003606:	b25b      	sxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 800360a:	eb0b 0e02 	add.w	lr, fp, r2
	for (i=len-1; i>=0; --i){
 800360e:	db0c      	blt.n	800362a <CharacterInputThread+0x8da>
 8003610:	4929      	ldr	r1, [pc, #164]	; (80036b8 <CharacterInputThread+0x968>)
 8003612:	3301      	adds	r3, #1
 8003614:	4419      	add	r1, r3
 8003616:	4670      	mov	r0, lr
		data[i] = *(buf++);
 8003618:	f810 3b01 	ldrb.w	r3, [r0], #1
 800361c:	f801 3d01 	strb.w	r3, [r1, #-1]!
	for (i=len-1; i>=0; --i){
 8003620:	43c3      	mvns	r3, r0
 8003622:	4463      	add	r3, ip
 8003624:	4473      	add	r3, lr
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	d5f6      	bpl.n	8003618 <CharacterInputThread+0x8c8>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 800362a:	4462      	add	r2, ip
			sdr(SDR_END|SDR_NOCHECK);
 800362c:	2002      	movs	r0, #2
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 800362e:	fa1f f982 	uxth.w	r9, r2
			sdr(SDR_END|SDR_NOCHECK);
 8003632:	f7fd fa7d 	bl	8000b30 <sdr>
			streamPut(ost, 14);
 8003636:	682b      	ldr	r3, [r5, #0]
 8003638:	210e      	movs	r1, #14
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4640      	mov	r0, r8
 800363e:	4798      	blx	r3
			break;
 8003640:	e08c      	b.n	800375c <CharacterInputThread+0xa0c>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <CharacterInputThread+0x964>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3307      	adds	r3, #7
	for (i=len-1; i>=0; --i){
 8003648:	f3c3 0cc7 	ubfx	ip, r3, #3, #8
 800364c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8003650:	b25b      	sxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003654:	eb0b 0e02 	add.w	lr, fp, r2
	for (i=len-1; i>=0; --i){
 8003658:	db0c      	blt.n	8003674 <CharacterInputThread+0x924>
 800365a:	4917      	ldr	r1, [pc, #92]	; (80036b8 <CharacterInputThread+0x968>)
 800365c:	3301      	adds	r3, #1
 800365e:	4419      	add	r1, r3
 8003660:	4670      	mov	r0, lr
		data[i] = *(buf++);
 8003662:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003666:	f801 3d01 	strb.w	r3, [r1, #-1]!
	for (i=len-1; i>=0; --i){
 800366a:	43c3      	mvns	r3, r0
 800366c:	4463      	add	r3, ip
 800366e:	4473      	add	r3, lr
 8003670:	061b      	lsls	r3, r3, #24
 8003672:	d5f6      	bpl.n	8003662 <CharacterInputThread+0x912>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003674:	4462      	add	r2, ip
			if (sdr(SDR_FULL|SDR_CHECK)) {
 8003676:	2013      	movs	r0, #19
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003678:	fa1f f982 	uxth.w	r9, r2
			if (sdr(SDR_FULL|SDR_CHECK)) {
 800367c:	f7fd fa58 	bl	8000b30 <sdr>
 8003680:	2800      	cmp	r0, #0
 8003682:	f47f aed8 	bne.w	8003436 <CharacterInputThread+0x6e6>
			streamPut(ost, 3);
 8003686:	682b      	ldr	r3, [r5, #0]
 8003688:	2103      	movs	r1, #3
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4640      	mov	r0, r8
 800368e:	4798      	blx	r3
			break;
 8003690:	e064      	b.n	800375c <CharacterInputThread+0xa0c>
 8003692:	bf00      	nop
 8003694:	08005f04 	.word	0x08005f04
 8003698:	20000c40 	.word	0x20000c40
 800369c:	08005f18 	.word	0x08005f18
 80036a0:	08005f1c 	.word	0x08005f1c
 80036a4:	080062f4 	.word	0x080062f4
 80036a8:	08005ef0 	.word	0x08005ef0
 80036ac:	08006328 	.word	0x08006328
 80036b0:	20000c3c 	.word	0x20000c3c
 80036b4:	200017f4 	.word	0x200017f4
 80036b8:	200017fc 	.word	0x200017fc
 80036bc:	2000181c 	.word	0x2000181c
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80036c0:	4bc6      	ldr	r3, [pc, #792]	; (80039dc <CharacterInputThread+0xc8c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3307      	adds	r3, #7
	for (i=len-1; i>=0; --i){
 80036c6:	f3c3 01c7 	ubfx	r1, r3, #3, #8
 80036ca:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 80036ce:	fa4f f989 	sxtb.w	r9, r9
 80036d2:	f1b9 0f00 	cmp.w	r9, #0
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80036d6:	eb0b 0e02 	add.w	lr, fp, r2
	for (i=len-1; i>=0; --i){
 80036da:	f2c0 8179 	blt.w	80039d0 <CharacterInputThread+0xc80>
 80036de:	4bc0      	ldr	r3, [pc, #768]	; (80039e0 <CharacterInputThread+0xc90>)
 80036e0:	f109 0901 	add.w	r9, r9, #1
 80036e4:	eb03 0c09 	add.w	ip, r3, r9
 80036e8:	4670      	mov	r0, lr
		data[i] = *(buf++);
 80036ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 80036ee:	f80c 3d01 	strb.w	r3, [ip, #-1]!
	for (i=len-1; i>=0; --i){
 80036f2:	43c3      	mvns	r3, r0
 80036f4:	440b      	add	r3, r1
 80036f6:	4473      	add	r3, lr
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	d5f6      	bpl.n	80036ea <CharacterInputThread+0x99a>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80036fc:	440a      	add	r2, r1
 80036fe:	fa1f fc82 	uxth.w	ip, r2
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 8003702:	4bb8      	ldr	r3, [pc, #736]	; (80039e4 <CharacterInputThread+0xc94>)
 8003704:	eb0b 0e0c 	add.w	lr, fp, ip
	for (i=len-1; i>=0; --i){
 8003708:	eb03 0209 	add.w	r2, r3, r9
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 800370c:	4670      	mov	r0, lr
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 800370e:	fa1f f981 	uxth.w	r9, r1
		data[i] = *(buf++);
 8003712:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003716:	f802 3d01 	strb.w	r3, [r2, #-1]!
	for (i=len-1; i>=0; --i){
 800371a:	43c3      	mvns	r3, r0
 800371c:	440b      	add	r3, r1
 800371e:	4473      	add	r3, lr
 8003720:	061b      	lsls	r3, r3, #24
 8003722:	d5f6      	bpl.n	8003712 <CharacterInputThread+0x9c2>
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 8003724:	44e1      	add	r9, ip
			if (sdr(SDR_BEGIN|SDR_CHECK)) {
 8003726:	2011      	movs	r0, #17
			i += read_bytes(tdo_expected, &(buf[i]), BYTES(sdr_size));
 8003728:	fa1f f989 	uxth.w	r9, r9
			if (sdr(SDR_BEGIN|SDR_CHECK)) {
 800372c:	f7fd fa00 	bl	8000b30 <sdr>
 8003730:	2800      	cmp	r0, #0
 8003732:	f47f ae80 	bne.w	8003436 <CharacterInputThread+0x6e6>
			streamPut(ost, 15);
 8003736:	682b      	ldr	r3, [r5, #0]
 8003738:	210f      	movs	r1, #15
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4640      	mov	r0, r8
 800373e:	4798      	blx	r3
			break;
 8003740:	e00c      	b.n	800375c <CharacterInputThread+0xa0c>
	*data = *buf;
 8003742:	49a9      	ldr	r1, [pc, #676]	; (80039e8 <CharacterInputThread+0xc98>)
			streamPut(ost, 7);
 8003744:	682b      	ldr	r3, [r5, #0]
	*data = *buf;
 8003746:	f81b 2002 	ldrb.w	r2, [fp, r2]
 800374a:	700a      	strb	r2, [r1, #0]
			read_byte(&repeat, &(buf[i++]));
 800374c:	f109 0902 	add.w	r9, r9, #2
			streamPut(ost, 7);
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2107      	movs	r1, #7
 8003754:	4640      	mov	r0, r8
			read_byte(&repeat, &(buf[i++]));
 8003756:	fa1f f989 	uxth.w	r9, r9
			streamPut(ost, 7);
 800375a:	4798      	blx	r3
	while (i < len){
 800375c:	454e      	cmp	r6, r9
 800375e:	f63f ae40 	bhi.w	80033e2 <CharacterInputThread+0x692>
 8003762:	f7ff bb62 	b.w	8002e2a <CharacterInputThread+0xda>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003766:	4b9d      	ldr	r3, [pc, #628]	; (80039dc <CharacterInputThread+0xc8c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3307      	adds	r3, #7
	for (i=len-1; i>=0; --i){
 800376c:	f3c3 0cc7 	ubfx	ip, r3, #3, #8
 8003770:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8003774:	b25b      	sxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003778:	eb0b 0e02 	add.w	lr, fp, r2
	for (i=len-1; i>=0; --i){
 800377c:	db0c      	blt.n	8003798 <CharacterInputThread+0xa48>
 800377e:	4998      	ldr	r1, [pc, #608]	; (80039e0 <CharacterInputThread+0xc90>)
 8003780:	3301      	adds	r3, #1
 8003782:	4419      	add	r1, r3
 8003784:	4670      	mov	r0, lr
		data[i] = *(buf++);
 8003786:	f810 3b01 	ldrb.w	r3, [r0], #1
 800378a:	f801 3d01 	strb.w	r3, [r1, #-1]!
	for (i=len-1; i>=0; --i){
 800378e:	43c3      	mvns	r3, r0
 8003790:	4463      	add	r3, ip
 8003792:	4473      	add	r3, lr
 8003794:	061b      	lsls	r3, r3, #24
 8003796:	d5f6      	bpl.n	8003786 <CharacterInputThread+0xa36>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003798:	4462      	add	r2, ip
			sdr(SDR_BEGIN|SDR_NOCHECK);
 800379a:	2001      	movs	r0, #1
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 800379c:	fa1f f982 	uxth.w	r9, r2
			sdr(SDR_BEGIN|SDR_NOCHECK);
 80037a0:	f7fd f9c6 	bl	8000b30 <sdr>
			streamPut(ost, 12);
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	210c      	movs	r1, #12
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4640      	mov	r0, r8
 80037ac:	4798      	blx	r3
			break;
 80037ae:	e7d5      	b.n	800375c <CharacterInputThread+0xa0c>
			i += read_bytes(address_mask, &(buf[i]), BYTES(sdr_size));
 80037b0:	4b8a      	ldr	r3, [pc, #552]	; (80039dc <CharacterInputThread+0xc8c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3307      	adds	r3, #7
	for (i=len-1; i>=0; --i){
 80037b6:	f3c3 01c7 	ubfx	r1, r3, #3, #8
 80037ba:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 80037be:	fa4f f989 	sxtb.w	r9, r9
 80037c2:	f1b9 0f00 	cmp.w	r9, #0
			i += read_bytes(address_mask, &(buf[i]), BYTES(sdr_size));
 80037c6:	eb0b 0e02 	add.w	lr, fp, r2
	for (i=len-1; i>=0; --i){
 80037ca:	f2c0 811d 	blt.w	8003a08 <CharacterInputThread+0xcb8>
 80037ce:	4b87      	ldr	r3, [pc, #540]	; (80039ec <CharacterInputThread+0xc9c>)
 80037d0:	f109 0901 	add.w	r9, r9, #1
 80037d4:	eb03 0c09 	add.w	ip, r3, r9
 80037d8:	4670      	mov	r0, lr
		data[i] = *(buf++);
 80037da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80037de:	f80c 3d01 	strb.w	r3, [ip, #-1]!
	for (i=len-1; i>=0; --i){
 80037e2:	43c3      	mvns	r3, r0
 80037e4:	440b      	add	r3, r1
 80037e6:	4473      	add	r3, lr
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	d5f6      	bpl.n	80037da <CharacterInputThread+0xa8a>
			i += read_bytes(address_mask, &(buf[i]), BYTES(sdr_size));
 80037ec:	440a      	add	r2, r1
 80037ee:	fa1f fc82 	uxth.w	ip, r2
			i += read_bytes(data_mask, &(buf[i]), BYTES(sdr_size));
 80037f2:	4b7f      	ldr	r3, [pc, #508]	; (80039f0 <CharacterInputThread+0xca0>)
 80037f4:	eb0b 0e0c 	add.w	lr, fp, ip
	for (i=len-1; i>=0; --i){
 80037f8:	eb03 0209 	add.w	r2, r3, r9
			i += read_bytes(data_mask, &(buf[i]), BYTES(sdr_size));
 80037fc:	4670      	mov	r0, lr
			i += read_bytes(address_mask, &(buf[i]), BYTES(sdr_size));
 80037fe:	fa1f f981 	uxth.w	r9, r1
		data[i] = *(buf++);
 8003802:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003806:	f802 3d01 	strb.w	r3, [r2, #-1]!
	for (i=len-1; i>=0; --i){
 800380a:	43c3      	mvns	r3, r0
 800380c:	440b      	add	r3, r1
 800380e:	4473      	add	r3, lr
 8003810:	061b      	lsls	r3, r3, #24
 8003812:	d5f6      	bpl.n	8003802 <CharacterInputThread+0xab2>
			streamPut(ost, 10);
 8003814:	682b      	ldr	r3, [r5, #0]
			i += read_bytes(data_mask, &(buf[i]), BYTES(sdr_size));
 8003816:	44e1      	add	r9, ip
			streamPut(ost, 10);
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	210a      	movs	r1, #10
 800381c:	4640      	mov	r0, r8
			i += read_bytes(data_mask, &(buf[i]), BYTES(sdr_size));
 800381e:	fa1f f989 	uxth.w	r9, r9
			streamPut(ost, 10);
 8003822:	4798      	blx	r3
			break;
 8003824:	e79a      	b.n	800375c <CharacterInputThread+0xa0c>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003826:	4b6d      	ldr	r3, [pc, #436]	; (80039dc <CharacterInputThread+0xc8c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3307      	adds	r3, #7
	for (i=len-1; i>=0; --i){
 800382c:	f3c3 0cc7 	ubfx	ip, r3, #3, #8
 8003830:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8003834:	b25b      	sxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003838:	eb0b 0e02 	add.w	lr, fp, r2
	for (i=len-1; i>=0; --i){
 800383c:	db0c      	blt.n	8003858 <CharacterInputThread+0xb08>
 800383e:	4968      	ldr	r1, [pc, #416]	; (80039e0 <CharacterInputThread+0xc90>)
 8003840:	3301      	adds	r3, #1
 8003842:	4419      	add	r1, r3
 8003844:	4670      	mov	r0, lr
		data[i] = *(buf++);
 8003846:	f810 3b01 	ldrb.w	r3, [r0], #1
 800384a:	f801 3d01 	strb.w	r3, [r1, #-1]!
	for (i=len-1; i>=0; --i){
 800384e:	43c3      	mvns	r3, r0
 8003850:	4463      	add	r3, ip
 8003852:	4473      	add	r3, lr
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	d5f6      	bpl.n	8003846 <CharacterInputThread+0xaf6>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 8003858:	4462      	add	r2, ip
			sdr(SDR_CONTINUE|SDR_NOCHECK);
 800385a:	2000      	movs	r0, #0
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 800385c:	fa1f f982 	uxth.w	r9, r2
			sdr(SDR_CONTINUE|SDR_NOCHECK);
 8003860:	f7fd f966 	bl	8000b30 <sdr>
			streamPut(ost, 13);
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	210d      	movs	r1, #13
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	4640      	mov	r0, r8
 800386c:	4798      	blx	r3
			break;
 800386e:	e775      	b.n	800375c <CharacterInputThread+0xa0c>
			i += read_bytes(tdo_mask, &(buf[i]), BYTES(sdr_size));
 8003870:	4b5a      	ldr	r3, [pc, #360]	; (80039dc <CharacterInputThread+0xc8c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3307      	adds	r3, #7
	for (i=len-1; i>=0; --i){
 8003876:	f3c3 0cc7 	ubfx	ip, r3, #3, #8
 800387a:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 800387e:	b25b      	sxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
			i += read_bytes(tdo_mask, &(buf[i]), BYTES(sdr_size));
 8003882:	eb0b 0e02 	add.w	lr, fp, r2
	for (i=len-1; i>=0; --i){
 8003886:	db0c      	blt.n	80038a2 <CharacterInputThread+0xb52>
 8003888:	495a      	ldr	r1, [pc, #360]	; (80039f4 <CharacterInputThread+0xca4>)
 800388a:	3301      	adds	r3, #1
 800388c:	4419      	add	r1, r3
 800388e:	4670      	mov	r0, lr
		data[i] = *(buf++);
 8003890:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003894:	f801 3d01 	strb.w	r3, [r1, #-1]!
	for (i=len-1; i>=0; --i){
 8003898:	43c3      	mvns	r3, r0
 800389a:	4463      	add	r3, ip
 800389c:	4473      	add	r3, lr
 800389e:	061b      	lsls	r3, r3, #24
 80038a0:	d5f6      	bpl.n	8003890 <CharacterInputThread+0xb40>
			streamPut(ost, 1);
 80038a2:	682b      	ldr	r3, [r5, #0]
			i += read_bytes(tdo_mask, &(buf[i]), BYTES(sdr_size));
 80038a4:	4462      	add	r2, ip
			streamPut(ost, 1);
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2101      	movs	r1, #1
 80038aa:	4640      	mov	r0, r8
			i += read_bytes(tdo_mask, &(buf[i]), BYTES(sdr_size));
 80038ac:	fa1f f982 	uxth.w	r9, r2
			streamPut(ost, 1);
 80038b0:	4798      	blx	r3
			break;
 80038b2:	e753      	b.n	800375c <CharacterInputThread+0xa0c>
			i += read_long(&sdr_size, &(buf[i]));
 80038b4:	eb0b 0102 	add.w	r1, fp, r2
	uint32_t temp = *(buf++) * 16777216;
 80038b8:	f81b 2002 	ldrb.w	r2, [fp, r2]
	temp += *(buf++) * 65536;
 80038bc:	784b      	ldrb	r3, [r1, #1]
	temp += *(buf++);
 80038be:	78c8      	ldrb	r0, [r1, #3]
	temp += *(buf++) * 256;
 80038c0:	7889      	ldrb	r1, [r1, #2]
	temp += *(buf++) * 65536;
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80038c8:	4403      	add	r3, r0
	temp += *(buf++);
 80038ca:	eb03 2301 	add.w	r3, r3, r1, lsl #8
			streamPut(ost, 8);
 80038ce:	682a      	ldr	r2, [r5, #0]
	*data = temp;
 80038d0:	4942      	ldr	r1, [pc, #264]	; (80039dc <CharacterInputThread+0xc8c>)
			streamPut(ost, 8);
 80038d2:	68d2      	ldr	r2, [r2, #12]
	*data = temp;
 80038d4:	600b      	str	r3, [r1, #0]
			i += read_long(&sdr_size, &(buf[i]));
 80038d6:	f109 0905 	add.w	r9, r9, #5
			streamPut(ost, 8);
 80038da:	2108      	movs	r1, #8
 80038dc:	4640      	mov	r0, r8
			i += read_long(&sdr_size, &(buf[i]));
 80038de:	fa1f f989 	uxth.w	r9, r9
			streamPut(ost, 8);
 80038e2:	4790      	blx	r2
			break;
 80038e4:	e73a      	b.n	800375c <CharacterInputThread+0xa0c>
	*data = *buf;
 80038e6:	f81b 2002 	ldrb.w	r2, [fp, r2]
			i += read_bytes(tdi_value, &(buf[i]), BYTES(length));
 80038ea:	f102 0c07 	add.w	ip, r2, #7
 80038ee:	ea4f 0eec 	mov.w	lr, ip, asr #3
	for (i=len-1; i>=0; --i){
 80038f2:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
			read_byte(&length, &(buf[i++]));
 80038f6:	f109 0902 	add.w	r9, r9, #2
 80038fa:	fa1f fc89 	uxth.w	ip, r9
	for (i=len-1; i>=0; --i){
 80038fe:	b243      	sxtb	r3, r0
 8003900:	3001      	adds	r0, #1
			i += read_bytes(tdi_value, &(buf[i]), BYTES(length));
 8003902:	eb0b 010c 	add.w	r1, fp, ip
	for (i=len-1; i>=0; --i){
 8003906:	d009      	beq.n	800391c <CharacterInputThread+0xbcc>
 8003908:	4691      	mov	r9, r2
		data[i] = *(buf++);
 800390a:	4a35      	ldr	r2, [pc, #212]	; (80039e0 <CharacterInputThread+0xc90>)
 800390c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8003910:	54d0      	strb	r0, [r2, r3]
	for (i=len-1; i>=0; --i){
 8003912:	3b01      	subs	r3, #1
 8003914:	b25b      	sxtb	r3, r3
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	d1f7      	bne.n	800390a <CharacterInputThread+0xbba>
 800391a:	464a      	mov	r2, r9
			i += read_bytes(tdi_value, &(buf[i]), BYTES(length));
 800391c:	44f4      	add	ip, lr
 800391e:	200b      	movs	r0, #11
 8003920:	fa1f f98c 	uxth.w	r9, ip
 8003924:	9201      	str	r2, [sp, #4]
	if (state==STATE_TLR) {
 8003926:	f7fd f8d3 	bl	8000ad0 <state_goto.part.0>
			shift(SDR_END, tdi_value, 0, length);
 800392a:	9a01      	ldr	r2, [sp, #4]
 800392c:	2100      	movs	r1, #0
 800392e:	2002      	movs	r0, #2
 8003930:	f7fd f866 	bl	8000a00 <shift.constprop.0>
	if (state==STATE_TLR) {
 8003934:	2001      	movs	r0, #1
 8003936:	f7fd f8cb 	bl	8000ad0 <state_goto.part.0>
			streamPut(ost, 2);
 800393a:	682b      	ldr	r3, [r5, #0]
 800393c:	2102      	movs	r1, #2
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4640      	mov	r0, r8
 8003942:	4798      	blx	r3
			break;
 8003944:	e70a      	b.n	800375c <CharacterInputThread+0xa0c>
			chprintf(dbg, "Complete. %d\r\n", i);
 8003946:	492c      	ldr	r1, [pc, #176]	; (80039f8 <CharacterInputThread+0xca8>)
 8003948:	482c      	ldr	r0, [pc, #176]	; (80039fc <CharacterInputThread+0xcac>)
 800394a:	9201      	str	r2, [sp, #4]
 800394c:	f7fe ffa8 	bl	80028a0 <chprintf>
		switch (buf[i++]) {
 8003950:	9a01      	ldr	r2, [sp, #4]
			chprintf(ost, "F");
 8003952:	492b      	ldr	r1, [pc, #172]	; (8003a00 <CharacterInputThread+0xcb0>)
 8003954:	4640      	mov	r0, r8
		switch (buf[i++]) {
 8003956:	4691      	mov	r9, r2
			chprintf(ost, "F");
 8003958:	f7fe ffa2 	bl	80028a0 <chprintf>
			break;
 800395c:	e6fe      	b.n	800375c <CharacterInputThread+0xa0c>
			i += read_long(&run_test, &(buf[i]));
 800395e:	eb0b 0102 	add.w	r1, fp, r2
	uint32_t temp = *(buf++) * 16777216;
 8003962:	f81b 2002 	ldrb.w	r2, [fp, r2]
	temp += *(buf++) * 65536;
 8003966:	784b      	ldrb	r3, [r1, #1]
	temp += *(buf++);
 8003968:	78c8      	ldrb	r0, [r1, #3]
	temp += *(buf++) * 256;
 800396a:	7889      	ldrb	r1, [r1, #2]
	temp += *(buf++) * 65536;
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8003972:	4403      	add	r3, r0
	temp += *(buf++);
 8003974:	eb03 2301 	add.w	r3, r3, r1, lsl #8
			streamPut(ost, 4);
 8003978:	682a      	ldr	r2, [r5, #0]
	*data = temp;
 800397a:	4922      	ldr	r1, [pc, #136]	; (8003a04 <CharacterInputThread+0xcb4>)
			streamPut(ost, 4);
 800397c:	68d2      	ldr	r2, [r2, #12]
	*data = temp;
 800397e:	600b      	str	r3, [r1, #0]
			i += read_long(&run_test, &(buf[i]));
 8003980:	f109 0905 	add.w	r9, r9, #5
			streamPut(ost, 4);
 8003984:	2104      	movs	r1, #4
 8003986:	4640      	mov	r0, r8
			i += read_long(&run_test, &(buf[i]));
 8003988:	fa1f f989 	uxth.w	r9, r9
			streamPut(ost, 4);
 800398c:	4790      	blx	r2
			break;
 800398e:	e6e5      	b.n	800375c <CharacterInputThread+0xa0c>
          state = BANK_BRR;
 8003990:	2604      	movs	r6, #4
 8003992:	f7ff b9f1 	b.w	8002d78 <CharacterInputThread+0x28>
            state = CLOCK_DRCs;
 8003996:	2628      	movs	r6, #40	; 0x28
 8003998:	f7ff b9ee 	b.w	8002d78 <CharacterInputThread+0x28>
              state = BULK_ZRn;
 800399c:	261a      	movs	r6, #26
 800399e:	f7ff b9eb 	b.w	8002d78 <CharacterInputThread+0x28>
 80039a2:	2606      	movs	r6, #6
 80039a4:	f7ff b9e8 	b.w	8002d78 <CharacterInputThread+0x28>
          state = BANK_BR;
 80039a8:	2603      	movs	r6, #3
 80039aa:	f7ff b9e5 	b.w	8002d78 <CharacterInputThread+0x28>
          state = BANK_BES;
 80039ae:	2605      	movs	r6, #5
 80039b0:	f7ff b9e2 	b.w	8002d78 <CharacterInputThread+0x28>
 80039b4:	f7fd f88c 	bl	8000ad0 <state_goto.part.0>
 80039b8:	e55f      	b.n	800347a <CharacterInputThread+0x72a>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80039ba:	188b      	adds	r3, r1, r2
 80039bc:	b29b      	uxth	r3, r3
 80039be:	fa1f f981 	uxth.w	r9, r1
 80039c2:	e58e      	b.n	80034e2 <CharacterInputThread+0x792>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80039c4:	440a      	add	r2, r1
 80039c6:	fa1f fc82 	uxth.w	ip, r2
 80039ca:	fa1f f981 	uxth.w	r9, r1
 80039ce:	e5c8      	b.n	8003562 <CharacterInputThread+0x812>
			i += read_bytes(tdi_value, &(buf[i]), BYTES(sdr_size));
 80039d0:	440a      	add	r2, r1
 80039d2:	fa1f fc82 	uxth.w	ip, r2
 80039d6:	fa1f f981 	uxth.w	r9, r1
 80039da:	e6a3      	b.n	8003724 <CharacterInputThread+0x9d4>
 80039dc:	200017f4 	.word	0x200017f4
 80039e0:	200017fc 	.word	0x200017fc
 80039e4:	2000181c 	.word	0x2000181c
 80039e8:	200017ec 	.word	0x200017ec
 80039ec:	2000138c 	.word	0x2000138c
 80039f0:	20001568 	.word	0x20001568
 80039f4:	2000183c 	.word	0x2000183c
 80039f8:	08005edc 	.word	0x08005edc
 80039fc:	20000c40 	.word	0x20000c40
 8003a00:	08005eec 	.word	0x08005eec
 8003a04:	200017f0 	.word	0x200017f0
			i += read_bytes(address_mask, &(buf[i]), BYTES(sdr_size));
 8003a08:	440a      	add	r2, r1
 8003a0a:	fa1f fc82 	uxth.w	ip, r2
 8003a0e:	fa1f f981 	uxth.w	r9, r1
 8003a12:	e6ff      	b.n	8003814 <CharacterInputThread+0xac4>
	...

08003a20 <cmd_test>:
/*===========================================================================*/
/* Command line related.                                                     */
/*===========================================================================*/


void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003a20:	b510      	push	{r4, lr}
  (void)* argv;
  (void)argc;
  char text[10];
  uint16_t val;

  chprintf(chp, "Enter Number (<256) \r\n");
 8003a22:	490b      	ldr	r1, [pc, #44]	; (8003a50 <cmd_test+0x30>)
void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003a24:	b084      	sub	sp, #16
 8003a26:	4604      	mov	r4, r0
  chprintf(chp, "Enter Number (<256) \r\n");
 8003a28:	f7fe ff3a 	bl	80028a0 <chprintf>
  val = (uint16_t)strtol(text, NULL, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4611      	mov	r1, r2
 8003a30:	a801      	add	r0, sp, #4
 8003a32:	f001 ff05 	bl	8005840 <strtol>
 8003a36:	4603      	mov	r3, r0

  chprintf(chp, "You entered text: %s Val: %04x got: %02x\r\n",
 8003a38:	aa01      	add	r2, sp, #4
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	4905      	ldr	r1, [pc, #20]	; (8003a54 <cmd_test+0x34>)
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f7fe ff2e 	bl	80028a0 <chprintf>
                      text, val);
  chprintf(ost, "OK\r\n");
 8003a44:	4904      	ldr	r1, [pc, #16]	; (8003a58 <cmd_test+0x38>)
 8003a46:	4805      	ldr	r0, [pc, #20]	; (8003a5c <cmd_test+0x3c>)
 8003a48:	f7fe ff2a 	bl	80028a0 <chprintf>

}
 8003a4c:	b004      	add	sp, #16
 8003a4e:	bd10      	pop	{r4, pc}
 8003a50:	08005f44 	.word	0x08005f44
 8003a54:	08005f5c 	.word	0x08005f5c
 8003a58:	08005f88 	.word	0x08005f88
 8003a5c:	20000e9c 	.word	0x20000e9c

08003a60 <cmd_echo>:

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc != 1) {
 8003a60:	2901      	cmp	r1, #1
 8003a62:	d003      	beq.n	8003a6c <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8003a64:	4a03      	ldr	r2, [pc, #12]	; (8003a74 <cmd_echo+0x14>)
 8003a66:	4904      	ldr	r1, [pc, #16]	; (8003a78 <cmd_echo+0x18>)
 8003a68:	f7fe bf1a 	b.w	80028a0 <chprintf>
    return;
  }
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	4903      	ldr	r1, [pc, #12]	; (8003a7c <cmd_echo+0x1c>)
 8003a70:	f7fe bf16 	b.w	80028a0 <chprintf>
 8003a74:	08005f90 	.word	0x08005f90
 8003a78:	08005fa0 	.word	0x08005fa0
 8003a7c:	08005fac 	.word	0x08005fac

08003a80 <cmd_info>:
  if (argc > 0) {
 8003a80:	2900      	cmp	r1, #0
 8003a82:	dc2e      	bgt.n	8003ae2 <cmd_info+0x62>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003a84:	b510      	push	{r4, lr}
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8003a86:	4a19      	ldr	r2, [pc, #100]	; (8003aec <cmd_info+0x6c>)
 8003a88:	4919      	ldr	r1, [pc, #100]	; (8003af0 <cmd_info+0x70>)
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	4604      	mov	r4, r0
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8003a8e:	f7fe ff07 	bl	80028a0 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 8003a92:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <cmd_info+0x74>)
 8003a94:	4918      	ldr	r1, [pc, #96]	; (8003af8 <cmd_info+0x78>)
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7fe ff02 	bl	80028a0 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 8003a9c:	4a17      	ldr	r2, [pc, #92]	; (8003afc <cmd_info+0x7c>)
 8003a9e:	4918      	ldr	r1, [pc, #96]	; (8003b00 <cmd_info+0x80>)
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f7fe fefd 	bl	80028a0 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 8003aa6:	4a17      	ldr	r2, [pc, #92]	; (8003b04 <cmd_info+0x84>)
 8003aa8:	4917      	ldr	r1, [pc, #92]	; (8003b08 <cmd_info+0x88>)
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7fe fef8 	bl	80028a0 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8003ab0:	4a16      	ldr	r2, [pc, #88]	; (8003b0c <cmd_info+0x8c>)
 8003ab2:	4917      	ldr	r1, [pc, #92]	; (8003b10 <cmd_info+0x90>)
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7fe fef3 	bl	80028a0 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 8003aba:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <cmd_info+0x94>)
 8003abc:	4916      	ldr	r1, [pc, #88]	; (8003b18 <cmd_info+0x98>)
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f7fe feee 	bl	80028a0 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 8003ac4:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <cmd_info+0x9c>)
 8003ac6:	4916      	ldr	r1, [pc, #88]	; (8003b20 <cmd_info+0xa0>)
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7fe fee9 	bl	80028a0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <cmd_info+0xa4>)
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <cmd_info+0xa8>)
 8003ad4:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <cmd_info+0xac>)
 8003ad6:	4916      	ldr	r1, [pc, #88]	; (8003b30 <cmd_info+0xb0>)
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f7fe fee1 	bl	80028a0 <chprintf>
}
 8003ade:	b002      	add	sp, #8
 8003ae0:	bd10      	pop	{r4, pc}
    shellUsage(chp, "info");
 8003ae2:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <cmd_info+0xb4>)
 8003ae4:	4914      	ldr	r1, [pc, #80]	; (8003b38 <cmd_info+0xb8>)
 8003ae6:	f7fe bedb 	b.w	80028a0 <chprintf>
 8003aea:	bf00      	nop
 8003aec:	08005fbc 	.word	0x08005fbc
 8003af0:	08005fc4 	.word	0x08005fc4
 8003af4:	08005fd8 	.word	0x08005fd8
 8003af8:	08006018 	.word	0x08006018
 8003afc:	0800602c 	.word	0x0800602c
 8003b00:	08006038 	.word	0x08006038
 8003b04:	0800604c 	.word	0x0800604c
 8003b08:	08006058 	.word	0x08006058
 8003b0c:	0800606c 	.word	0x0800606c
 8003b10:	08006084 	.word	0x08006084
 8003b14:	08006098 	.word	0x08006098
 8003b18:	080060c4 	.word	0x080060c4
 8003b1c:	080060d8 	.word	0x080060d8
 8003b20:	080060f0 	.word	0x080060f0
 8003b24:	0800612c 	.word	0x0800612c
 8003b28:	08006108 	.word	0x08006108
 8003b2c:	08006104 	.word	0x08006104
 8003b30:	08006114 	.word	0x08006114
 8003b34:	08005fb4 	.word	0x08005fb4
 8003b38:	08005fa0 	.word	0x08005fa0
 8003b3c:	00000000 	.word	0x00000000

08003b40 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8003b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003b44:	4dba      	ldr	r5, [pc, #744]	; (8003e30 <shellThread+0x2f0>)
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
 8003b46:	f8d0 a000 	ldr.w	sl, [r0]
#if !defined(_CHIBIOS_NIL_)
  chRegSetThreadName(SHELL_THREAD_NAME);
#endif

#if SHELL_USE_HISTORY == TRUE
  *(scfg->sc_histbuf) = 0;
 8003b4a:	6883      	ldr	r3, [r0, #8]
 8003b4c:	696a      	ldr	r2, [r5, #20]
 8003b4e:	49b9      	ldr	r1, [pc, #740]	; (8003e34 <shellThread+0x2f4>)
THD_FUNCTION(shellThread, p) {
 8003b50:	b0a7      	sub	sp, #156	; 0x9c
 8003b52:	4604      	mov	r4, r0
 8003b54:	9000      	str	r0, [sp, #0]
  const ShellCommand *scp = scfg->sc_commands;
 8003b56:	6840      	ldr	r0, [r0, #4]
 8003b58:	9006      	str	r0, [sp, #24]
  *(scfg->sc_histbuf) = 0;
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	6191      	str	r1, [r2, #24]
 8003b5e:	7018      	strb	r0, [r3, #0]
  ShellHistory hist = {
 8003b60:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8003b64:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 8003b68:	49b3      	ldr	r1, [pc, #716]	; (8003e38 <shellThread+0x2f8>)
  ShellHistory hist = {
 8003b6a:	9010      	str	r0, [sp, #64]	; 0x40
  chprintf(chp, SHELL_NEWLINE_STR);
 8003b6c:	4650      	mov	r0, sl
  ShellHistory hist = {
 8003b6e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  chprintf(chp, SHELL_NEWLINE_STR);
 8003b72:	f7fe fe95 	bl	80028a0 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8003b76:	49b1      	ldr	r1, [pc, #708]	; (8003e3c <shellThread+0x2fc>)
 8003b78:	4650      	mov	r0, sl
 8003b7a:	f7fe fe91 	bl	80028a0 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8003b7e:	696b      	ldr	r3, [r5, #20]
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
 8003b80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b84:	f013 0304 	ands.w	r3, r3, #4
 8003b88:	f040 8093 	bne.w	8003cb2 <shellThread+0x172>
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
  char *p = line;
  BaseSequentialStream *chp = scfg->sc_channel;
#if SHELL_USE_ESC_SEQ == TRUE
  bool escape = false;
  bool bracket = false;
 8003b8c:	9302      	str	r3, [sp, #8]
 8003b8e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 8003b92:	46d0      	mov	r8, sl
    chprintf(chp, SHELL_PROMPT_STR);
 8003b94:	49aa      	ldr	r1, [pc, #680]	; (8003e40 <shellThread+0x300>)
 8003b96:	4640      	mov	r0, r8
 8003b98:	f7fe fe82 	bl	80028a0 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 8003b9c:	9b00      	ldr	r3, [sp, #0]
  bool bracket = false;
 8003b9e:	2500      	movs	r5, #0
  BaseSequentialStream *chp = scfg->sc_channel;
 8003ba0:	681c      	ldr	r4, [r3, #0]
  bool escape = false;
 8003ba2:	462e      	mov	r6, r5
  char *p = line;
 8003ba4:	464f      	mov	r7, r9
#endif

  while (true) {
    char c;

    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	4798      	blx	r3
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d045      	beq.n	8003c44 <shellThread+0x104>
      return true;
#if SHELL_USE_ESC_SEQ == TRUE
    if (c == 27) {
 8003bb8:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8003bbc:	291b      	cmp	r1, #27
 8003bbe:	d02a      	beq.n	8003c16 <shellThread+0xd6>
      escape = true;
      continue;
    }
    if (escape) {
 8003bc0:	b15e      	cbz	r6, 8003bda <shellThread+0x9a>
      escape = false;
      if (c == '[') {
 8003bc2:	295b      	cmp	r1, #91	; 0x5b
 8003bc4:	d03c      	beq.n	8003c40 <shellThread+0x100>
        escape = true;
        bracket = true;
        continue;
      }
      if (bracket) {
 8003bc6:	b135      	cbz	r5, 8003bd6 <shellThread+0x96>
        bracket = false;
#if SHELL_USE_HISTORY == TRUE
        if (c == 'A') {
 8003bc8:	2941      	cmp	r1, #65	; 0x41
 8003bca:	f000 814d 	beq.w	8003e68 <shellThread+0x328>
            chprintf(chp, "%s", line);
            p = line + len;
          }
          continue;
        }
        if (c == 'B') {
 8003bce:	2942      	cmp	r1, #66	; 0x42
 8003bd0:	f000 8111 	beq.w	8003df6 <shellThread+0x2b6>
        bracket = false;
 8003bd4:	2500      	movs	r5, #0
      escape = false;
 8003bd6:	462e      	mov	r6, r5
 8003bd8:	e7e5      	b.n	8003ba6 <shellThread+0x66>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
#endif
    if ((c == 8) || (c == 127)) {
 8003bda:	2908      	cmp	r1, #8
 8003bdc:	d01d      	beq.n	8003c1a <shellThread+0xda>
 8003bde:	297f      	cmp	r1, #127	; 0x7f
 8003be0:	d01b      	beq.n	8003c1a <shellThread+0xda>
        streamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8003be2:	290d      	cmp	r1, #13
 8003be4:	f000 8172 	beq.w	8003ecc <shellThread+0x38c>
#endif
      *p = 0;
      return false;
    }
#if SHELL_USE_COMPLETION == TRUE
    if (c == '\t') {
 8003be8:	2909      	cmp	r1, #9
 8003bea:	d076      	beq.n	8003cda <shellThread+0x19a>
      }
      continue;
    }
#endif
#if SHELL_USE_HISTORY == TRUE
    if (c == 14) {
 8003bec:	290e      	cmp	r1, #14
 8003bee:	f000 8147 	beq.w	8003e80 <shellThread+0x340>
        chprintf(chp, "%s", line);
        p = line + len;
      }
      continue;
    }
    if (c == 16) {
 8003bf2:	2910      	cmp	r1, #16
 8003bf4:	f000 8160 	beq.w	8003eb8 <shellThread+0x378>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 8003bf8:	291f      	cmp	r1, #31
 8003bfa:	d9d4      	bls.n	8003ba6 <shellThread+0x66>
      continue;
    if (p < line + size - 1) {
 8003bfc:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8003c00:	429f      	cmp	r7, r3
 8003c02:	d2d0      	bcs.n	8003ba6 <shellThread+0x66>
      streamPut(chp, c);
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	4620      	mov	r0, r4
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	4798      	blx	r3
      *p++ = (char)c;
 8003c0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003c10:	f807 3b01 	strb.w	r3, [r7], #1
 8003c14:	e7c7      	b.n	8003ba6 <shellThread+0x66>
      escape = true;
 8003c16:	2601      	movs	r6, #1
 8003c18:	e7c5      	b.n	8003ba6 <shellThread+0x66>
      if (p != line) {
 8003c1a:	454f      	cmp	r7, r9
 8003c1c:	d0c3      	beq.n	8003ba6 <shellThread+0x66>
        streamPut(chp, 0x08);
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	2108      	movs	r1, #8
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4620      	mov	r0, r4
 8003c26:	4798      	blx	r3
        streamPut(chp, 0x20);
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4620      	mov	r0, r4
 8003c30:	4798      	blx	r3
        streamPut(chp, 0x08);
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	2108      	movs	r1, #8
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4620      	mov	r0, r4
        p--;
 8003c3a:	3f01      	subs	r7, #1
        streamPut(chp, 0x08);
 8003c3c:	4798      	blx	r3
 8003c3e:	e7b2      	b.n	8003ba6 <shellThread+0x66>
        bracket = true;
 8003c40:	4635      	mov	r5, r6
 8003c42:	e7b0      	b.n	8003ba6 <shellThread+0x66>
  chThdSleep(delay);
 8003c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c48:	f7fe f862 	bl	8001d10 <chThdSleep>
    lp = parse_arguments(line, &tokp);
 8003c4c:	a909      	add	r1, sp, #36	; 0x24
 8003c4e:	4648      	mov	r0, r9
 8003c50:	f7fe fdf6 	bl	8002840 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003c54:	a909      	add	r1, sp, #36	; 0x24
    lp = parse_arguments(line, &tokp);
 8003c56:	4605      	mov	r5, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003c58:	2000      	movs	r0, #0
 8003c5a:	ac11      	add	r4, sp, #68	; 0x44
    n = 0;
 8003c5c:	2600      	movs	r6, #0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003c5e:	f7fe fdef 	bl	8002840 <parse_arguments>
 8003c62:	b150      	cbz	r0, 8003c7a <shellThread+0x13a>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8003c64:	2e04      	cmp	r6, #4
 8003c66:	d031      	beq.n	8003ccc <shellThread+0x18c>
      args[n++] = lp;
 8003c68:	f844 0b04 	str.w	r0, [r4], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003c6c:	a909      	add	r1, sp, #36	; 0x24
 8003c6e:	2000      	movs	r0, #0
      args[n++] = lp;
 8003c70:	3601      	adds	r6, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003c72:	f7fe fde5 	bl	8002840 <parse_arguments>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d1f4      	bne.n	8003c64 <shellThread+0x124>
    args[n] = NULL;
 8003c7a:	ab26      	add	r3, sp, #152	; 0x98
 8003c7c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003c80:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8003c84:	b175      	cbz	r5, 8003ca4 <shellThread+0x164>
      if (strcmp(cmd, "help") == 0) {
 8003c86:	496f      	ldr	r1, [pc, #444]	; (8003e44 <shellThread+0x304>)
 8003c88:	4628      	mov	r0, r5
 8003c8a:	f7fc fbdd 	bl	8000448 <strcmp>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	f040 81db 	bne.w	800404a <shellThread+0x50a>
        if (n > 0) {
 8003c94:	2e00      	cmp	r6, #0
 8003c96:	f000 8182 	beq.w	8003f9e <shellThread+0x45e>
          shellUsage(chp, "help");
 8003c9a:	4a6a      	ldr	r2, [pc, #424]	; (8003e44 <shellThread+0x304>)
 8003c9c:	496a      	ldr	r1, [pc, #424]	; (8003e48 <shellThread+0x308>)
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f7fe fdfe 	bl	80028a0 <chprintf>
 8003ca4:	4b62      	ldr	r3, [pc, #392]	; (8003e30 <shellThread+0x2f0>)
 8003ca6:	695b      	ldr	r3, [r3, #20]
  while (!chThdShouldTerminateX()) {
 8003ca8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cac:	075b      	lsls	r3, r3, #29
 8003cae:	f57f af71 	bpl.w	8003b94 <shellThread+0x54>
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4864      	ldr	r0, [pc, #400]	; (8003e4c <shellThread+0x30c>)
 8003cbc:	f7fd f930 	bl	8000f20 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	f7fd fe1d 	bl	8001900 <chThdExitS>
}
 8003cc6:	b027      	add	sp, #156	; 0x9c
 8003cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 8003ccc:	4960      	ldr	r1, [pc, #384]	; (8003e50 <shellThread+0x310>)
 8003cce:	4640      	mov	r0, r8
 8003cd0:	f7fe fde6 	bl	80028a0 <chprintf>
    args[n] = NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9315      	str	r3, [sp, #84]	; 0x54
    if (cmd != NULL) {
 8003cd8:	e7e4      	b.n	8003ca4 <shellThread+0x164>
      if (p < line + size - 1) {
 8003cda:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8003cde:	429f      	cmp	r7, r3
 8003ce0:	f4bf af61 	bcs.w	8003ba6 <shellThread+0x66>
  char help_cmp[] = "help";
 8003ce4:	4b57      	ldr	r3, [pc, #348]	; (8003e44 <shellThread+0x304>)
        *p = 0;
 8003ce6:	703e      	strb	r6, [r7, #0]
  char help_cmp[] = "help";
 8003ce8:	e893 0003 	ldmia.w	r3, {r0, r1}
  if (strstr(help_cmp, line) == help_cmp) {
 8003cec:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
  char help_cmp[] = "help";
 8003cf0:	900a      	str	r0, [sp, #40]	; 0x28
 8003cf2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
  if (strstr(help_cmp, line) == help_cmp) {
 8003cf6:	4650      	mov	r0, sl
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	f001 fff3 	bl	8005ce4 <strstr>
        get_completions(scfg, line);
 8003cfe:	9b00      	ldr	r3, [sp, #0]
  if (strstr(help_cmp, line) == help_cmp) {
 8003d00:	4550      	cmp	r0, sl
        get_completions(scfg, line);
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	9203      	str	r2, [sp, #12]
 8003d08:	9301      	str	r3, [sp, #4]
  if (strstr(help_cmp, line) == help_cmp) {
 8003d0a:	f000 813d 	beq.w	8003f88 <shellThread+0x448>
 8003d0e:	1d1a      	adds	r2, r3, #4
 8003d10:	9205      	str	r2, [sp, #20]
        get_completions(scfg, line);
 8003d12:	469a      	mov	sl, r3
  while (lcp->sc_name != NULL) {
 8003d14:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8003e64 <shellThread+0x324>
 8003d18:	4a4e      	ldr	r2, [pc, #312]	; (8003e54 <shellThread+0x314>)
 8003d1a:	9504      	str	r5, [sp, #16]
 8003d1c:	465b      	mov	r3, fp
 8003d1e:	4615      	mov	r5, r2
 8003d20:	46a3      	mov	fp, r4
 8003d22:	461c      	mov	r4, r3
    if (strstr(lcp->sc_name, line) == lcp->sc_name) {
 8003d24:	4620      	mov	r0, r4
 8003d26:	4649      	mov	r1, r9
 8003d28:	f001 ffdc 	bl	8005ce4 <strstr>
 8003d2c:	4284      	cmp	r4, r0
      *scmp++ = (char *)lcp->sc_name;
 8003d2e:	bf08      	it	eq
 8003d30:	f84a 4b04 	streq.w	r4, [sl], #4
  while (lcp->sc_name != NULL) {
 8003d34:	f855 4f08 	ldr.w	r4, [r5, #8]!
 8003d38:	2c00      	cmp	r4, #0
 8003d3a:	d1f3      	bne.n	8003d24 <shellThread+0x1e4>
  if (scp != NULL) {
 8003d3c:	e9dd 2503 	ldrd	r2, r5, [sp, #12]
 8003d40:	465c      	mov	r4, fp
 8003d42:	b19a      	cbz	r2, 8003d6c <shellThread+0x22c>
    while (scp->sc_name != NULL) {
 8003d44:	6813      	ldr	r3, [r2, #0]
 8003d46:	b18b      	cbz	r3, 8003d6c <shellThread+0x22c>
 8003d48:	9503      	str	r5, [sp, #12]
 8003d4a:	46a3      	mov	fp, r4
 8003d4c:	4615      	mov	r5, r2
 8003d4e:	461c      	mov	r4, r3
      if (strstr(scp->sc_name, line) == scp->sc_name) {
 8003d50:	4620      	mov	r0, r4
 8003d52:	4649      	mov	r1, r9
 8003d54:	f001 ffc6 	bl	8005ce4 <strstr>
 8003d58:	4284      	cmp	r4, r0
        *scmp++ = (char *)scp->sc_name;
 8003d5a:	bf08      	it	eq
 8003d5c:	f84a 4b04 	streq.w	r4, [sl], #4
    while (scp->sc_name != NULL) {
 8003d60:	f855 4f08 	ldr.w	r4, [r5, #8]!
 8003d64:	2c00      	cmp	r4, #0
 8003d66:	d1f3      	bne.n	8003d50 <shellThread+0x210>
 8003d68:	9d03      	ldr	r5, [sp, #12]
 8003d6a:	465c      	mov	r4, fp
  *scmp = NULL;
 8003d6c:	9b02      	ldr	r3, [sp, #8]
 8003d6e:	f8ca 3000 	str.w	r3, [sl]
  if (*scmp != NULL) {
 8003d72:	9b01      	ldr	r3, [sp, #4]
 8003d74:	f8d3 a000 	ldr.w	sl, [r3]
 8003d78:	46d3      	mov	fp, sl
 8003d7a:	f1ba 0f00 	cmp.w	sl, #0
 8003d7e:	f43f af12 	beq.w	8003ba6 <shellThread+0x66>
    if (*cmp == NULL) {
 8003d82:	685b      	ldr	r3, [r3, #4]
        int len = process_completions(scfg, line, p - line, size);
 8003d84:	eba7 0209 	sub.w	r2, r7, r9
 8003d88:	9203      	str	r2, [sp, #12]
    if (*cmp == NULL) {
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8179 	beq.w	8004082 <shellThread+0x542>
      while (*(*scmp + clen) != 0) {
 8003d90:	f89a c000 	ldrb.w	ip, [sl]
 8003d94:	f1bc 0f00 	cmp.w	ip, #0
 8003d98:	f000 81d0 	beq.w	800413c <shellThread+0x5fc>
  int clen = 0;
 8003d9c:	f8cd 8010 	str.w	r8, [sp, #16]
 8003da0:	46a3      	mov	fp, r4
 8003da2:	9507      	str	r5, [sp, #28]
 8003da4:	4664      	mov	r4, ip
 8003da6:	9d03      	ldr	r5, [sp, #12]
 8003da8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003dac:	f8dd 8014 	ldr.w	r8, [sp, #20]
      while (*(*scmp + clen) != 0) {
 8003db0:	46be      	mov	lr, r7
  int clen = 0;
 8003db2:	2100      	movs	r1, #0
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 8003db4:	5c5a      	ldrb	r2, [r3, r1]
 8003db6:	42a2      	cmp	r2, r4
 8003db8:	bf08      	it	eq
 8003dba:	4642      	moveq	r2, r8
 8003dbc:	d105      	bne.n	8003dca <shellThread+0x28a>
               (*(*cmp + clen) != 0) && (*cmp != NULL)) {
 8003dbe:	b13b      	cbz	r3, 8003dd0 <shellThread+0x290>
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 8003dc0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8003dc4:	5c58      	ldrb	r0, [r3, r1]
 8003dc6:	42a0      	cmp	r0, r4
 8003dc8:	d0f9      	beq.n	8003dbe <shellThread+0x27e>
        if (*cmp == NULL) {
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f040 80ff 	bne.w	8003fce <shellThread+0x48e>
          if ((c < line + size - 1) && (clen >= length))
 8003dd0:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8003dd4:	459e      	cmp	lr, r3
 8003dd6:	d205      	bcs.n	8003de4 <shellThread+0x2a4>
 8003dd8:	428d      	cmp	r5, r1
            *c++ = *(*scmp + clen);
 8003dda:	bfdc      	itt	le
 8003ddc:	f80e 4b01 	strble.w	r4, [lr], #1
 8003de0:	f8dc a000 	ldrle.w	sl, [ip]
          clen++;
 8003de4:	3101      	adds	r1, #1
      while (*(*scmp + clen) != 0) {
 8003de6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8003dea:	2c00      	cmp	r4, #0
 8003dec:	f000 813f 	beq.w	800406e <shellThread+0x52e>
 8003df0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003df4:	e7de      	b.n	8003db4 <shellThread+0x274>
          int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8003df6:	2201      	movs	r2, #1
 8003df8:	4649      	mov	r1, r9
 8003dfa:	a80c      	add	r0, sp, #48	; 0x30
 8003dfc:	f7fe fb60 	bl	80024c0 <get_history>
          if (len == 0)
 8003e00:	1e06      	subs	r6, r0, #0
 8003e02:	d13a      	bne.n	8003e7a <shellThread+0x33a>
            *line = 0;
 8003e04:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
            _shell_reset_cur(chp);
 8003e08:	230d      	movs	r3, #13
 8003e0a:	224f      	movs	r2, #79	; 0x4f
 8003e0c:	4912      	ldr	r1, [pc, #72]	; (8003e58 <shellThread+0x318>)
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7fe fd46 	bl	80028a0 <chprintf>
            _shell_clr_line(chp);
 8003e14:	4911      	ldr	r1, [pc, #68]	; (8003e5c <shellThread+0x31c>)
 8003e16:	4620      	mov	r0, r4
 8003e18:	f7fe fd42 	bl	80028a0 <chprintf>
        bracket = false;
 8003e1c:	2500      	movs	r5, #0
            chprintf(chp, "%s", line);
 8003e1e:	4910      	ldr	r1, [pc, #64]	; (8003e60 <shellThread+0x320>)
 8003e20:	464a      	mov	r2, r9
 8003e22:	4620      	mov	r0, r4
            p = line + len;
 8003e24:	eb09 0706 	add.w	r7, r9, r6
            chprintf(chp, "%s", line);
 8003e28:	f7fe fd3a 	bl	80028a0 <chprintf>
      escape = false;
 8003e2c:	462e      	mov	r6, r5
 8003e2e:	e6ba      	b.n	8003ba6 <shellThread+0x66>
 8003e30:	200013b0 	.word	0x200013b0
 8003e34:	08006138 	.word	0x08006138
 8003e38:	08005f58 	.word	0x08005f58
 8003e3c:	08006140 	.word	0x08006140
 8003e40:	08006154 	.word	0x08006154
 8003e44:	08006194 	.word	0x08006194
 8003e48:	08005fa0 	.word	0x08005fa0
 8003e4c:	200017f8 	.word	0x200017f8
 8003e50:	0800617c 	.word	0x0800617c
 8003e54:	080064e0 	.word	0x080064e0
 8003e58:	08006164 	.word	0x08006164
 8003e5c:	08006170 	.word	0x08006170
 8003e60:	08006174 	.word	0x08006174
 8003e64:	08005fb4 	.word	0x08005fb4
          int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	a80c      	add	r0, sp, #48	; 0x30
 8003e6e:	f7fe fb27 	bl	80024c0 <get_history>
          if (len > 0) {
 8003e72:	1e06      	subs	r6, r0, #0
 8003e74:	f77f aeae 	ble.w	8003bd4 <shellThread+0x94>
 8003e78:	e7c6      	b.n	8003e08 <shellThread+0x2c8>
          if (len >= 0) {
 8003e7a:	f6ff aeab 	blt.w	8003bd4 <shellThread+0x94>
 8003e7e:	e7c3      	b.n	8003e08 <shellThread+0x2c8>
      int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8003e80:	2201      	movs	r2, #1
 8003e82:	4649      	mov	r1, r9
 8003e84:	a80c      	add	r0, sp, #48	; 0x30
 8003e86:	f7fe fb1b 	bl	80024c0 <get_history>
      if (len == 0)
 8003e8a:	f1b0 0a00 	subs.w	sl, r0, #0
 8003e8e:	d178      	bne.n	8003f82 <shellThread+0x442>
        *line = 0;
 8003e90:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
        _shell_reset_cur(chp);
 8003e94:	230d      	movs	r3, #13
 8003e96:	224f      	movs	r2, #79	; 0x4f
 8003e98:	49ab      	ldr	r1, [pc, #684]	; (8004148 <shellThread+0x608>)
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f7fe fd00 	bl	80028a0 <chprintf>
        _shell_clr_line(chp);
 8003ea0:	49aa      	ldr	r1, [pc, #680]	; (800414c <shellThread+0x60c>)
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f7fe fcfc 	bl	80028a0 <chprintf>
        chprintf(chp, "%s", line);
 8003ea8:	49a9      	ldr	r1, [pc, #676]	; (8004150 <shellThread+0x610>)
 8003eaa:	464a      	mov	r2, r9
 8003eac:	4620      	mov	r0, r4
        p = line + len;
 8003eae:	eb09 070a 	add.w	r7, r9, sl
        chprintf(chp, "%s", line);
 8003eb2:	f7fe fcf5 	bl	80028a0 <chprintf>
 8003eb6:	e676      	b.n	8003ba6 <shellThread+0x66>
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8003eb8:	4632      	mov	r2, r6
 8003eba:	4649      	mov	r1, r9
 8003ebc:	a80c      	add	r0, sp, #48	; 0x30
 8003ebe:	f7fe faff 	bl	80024c0 <get_history>
      if (len > 0) {
 8003ec2:	f1b0 0a00 	subs.w	sl, r0, #0
 8003ec6:	f77f ae6e 	ble.w	8003ba6 <shellThread+0x66>
 8003eca:	e7e3      	b.n	8003e94 <shellThread+0x354>
      chprintf(chp, SHELL_NEWLINE_STR);
 8003ecc:	4620      	mov	r0, r4
 8003ece:	49a1      	ldr	r1, [pc, #644]	; (8004154 <shellThread+0x614>)
 8003ed0:	f7fe fce6 	bl	80028a0 <chprintf>
  if (length > shp->sh_size - 2)
 8003ed4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
      save_history(shp, line, p - line);
 8003ed6:	eba7 0409 	sub.w	r4, r7, r9
  if (length > shp->sh_size - 2)
 8003eda:	1e6b      	subs	r3, r5, #1
 8003edc:	429c      	cmp	r4, r3
 8003ede:	da4d      	bge.n	8003f7c <shellThread+0x43c>
  while ((*(line + length -1) == ' ') && (length > 0))
 8003ee0:	1e63      	subs	r3, r4, #1
 8003ee2:	eb09 0203 	add.w	r2, r9, r3
 8003ee6:	f819 1003 	ldrb.w	r1, [r9, r3]
 8003eea:	2920      	cmp	r1, #32
 8003eec:	d10a      	bne.n	8003f04 <shellThread+0x3c4>
 8003eee:	2c00      	cmp	r4, #0
 8003ef0:	dc03      	bgt.n	8003efa <shellThread+0x3ba>
 8003ef2:	e043      	b.n	8003f7c <shellThread+0x43c>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d041      	beq.n	8003f7c <shellThread+0x43c>
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8003efe:	2920      	cmp	r1, #32
    length--;
 8003f00:	461c      	mov	r4, r3
  while ((*(line + length -1) == ' ') && (length > 0))
 8003f02:	d0f7      	beq.n	8003ef4 <shellThread+0x3b4>
  if (length <= 0)
 8003f04:	2c00      	cmp	r4, #0
 8003f06:	dd39      	ble.n	8003f7c <shellThread+0x43c>
  if (shp->sh_end >= shp->sh_beg) {
 8003f08:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8003f0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8003f0e:	1af2      	subs	r2, r6, r3
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8003f10:	1b99      	subs	r1, r3, r6
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8003f12:	3201      	adds	r2, #1
  if (shp->sh_end >= shp->sh_beg) {
 8003f14:	429e      	cmp	r6, r3
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8003f16:	eba5 0202 	sub.w	r2, r5, r2
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8003f1a:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
  if (shp->sh_end >= shp->sh_beg) {
 8003f1e:	db09      	blt.n	8003f34 <shellThread+0x3f4>
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8003f20:	42a2      	cmp	r2, r4
 8003f22:	dc09      	bgt.n	8003f38 <shellThread+0x3f8>
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8003f24:	5cc2      	ldrb	r2, [r0, r3]
 8003f26:	4413      	add	r3, r2
 8003f28:	3301      	adds	r3, #1
  if (pos >= shp->sh_size)
 8003f2a:	429d      	cmp	r5, r3
    pos -= shp->sh_size;
 8003f2c:	bfd8      	it	le
 8003f2e:	1b5b      	suble	r3, r3, r5
  shp->sh_beg = pos;
 8003f30:	930e      	str	r3, [sp, #56]	; 0x38
 8003f32:	e7ec      	b.n	8003f0e <shellThread+0x3ce>
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8003f34:	42a1      	cmp	r1, r4
 8003f36:	ddf5      	ble.n	8003f24 <shellThread+0x3e4>
  if (length < shp->sh_size - shp->sh_end - 1)
 8003f38:	1bad      	subs	r5, r5, r6
 8003f3a:	3d01      	subs	r5, #1
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8003f3c:	3601      	adds	r6, #1
  if (length < shp->sh_size - shp->sh_end - 1)
 8003f3e:	42a5      	cmp	r5, r4
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8003f40:	4430      	add	r0, r6
  if (length < shp->sh_size - shp->sh_end - 1)
 8003f42:	dc27      	bgt.n	8003f94 <shellThread+0x454>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, part_len);
 8003f44:	462a      	mov	r2, r5
 8003f46:	4649      	mov	r1, r9
 8003f48:	f7fc f9e0 	bl	800030c <memcpy>
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 8003f4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f4e:	1b62      	subs	r2, r4, r5
 8003f50:	eb09 0105 	add.w	r1, r9, r5
 8003f54:	f7fc f9da 	bl	800030c <memcpy>
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 8003f58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f5c:	54d4      	strb	r4, [r2, r3]
  shp->sh_end += length + 1;
 8003f5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  if (shp->sh_end >= shp->sh_size)
 8003f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  shp->sh_end += length + 1;
 8003f62:	3401      	adds	r4, #1
 8003f64:	4414      	add	r4, r2
  if (shp->sh_end >= shp->sh_size)
 8003f66:	429c      	cmp	r4, r3
  shp->sh_end += length + 1;
 8003f68:	940f      	str	r4, [sp, #60]	; 0x3c
    shp->sh_end -= shp->sh_size;
 8003f6a:	bfa8      	it	ge
 8003f6c:	1ae4      	subge	r4, r4, r3
  *(shp->sh_buffer + shp->sh_end) = 0;
 8003f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f70:	9a02      	ldr	r2, [sp, #8]
    shp->sh_end -= shp->sh_size;
 8003f72:	bfa8      	it	ge
 8003f74:	940f      	strge	r4, [sp, #60]	; 0x3c
  *(shp->sh_buffer + shp->sh_end) = 0;
 8003f76:	551a      	strb	r2, [r3, r4]
  shp->sh_cur = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9310      	str	r3, [sp, #64]	; 0x40
      *p = 0;
 8003f7c:	9b02      	ldr	r3, [sp, #8]
 8003f7e:	703b      	strb	r3, [r7, #0]
 8003f80:	e664      	b.n	8003c4c <shellThread+0x10c>
      if (len >= 0) {
 8003f82:	f6ff ae10 	blt.w	8003ba6 <shellThread+0x66>
 8003f86:	e785      	b.n	8003e94 <shellThread+0x354>
    *scmp++ = help_cmp;
 8003f88:	9a01      	ldr	r2, [sp, #4]
 8003f8a:	1d13      	adds	r3, r2, #4
 8003f8c:	9305      	str	r3, [sp, #20]
 8003f8e:	6010      	str	r0, [r2, #0]
 8003f90:	469a      	mov	sl, r3
 8003f92:	e6bf      	b.n	8003d14 <shellThread+0x1d4>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8003f94:	4622      	mov	r2, r4
 8003f96:	4649      	mov	r1, r9
 8003f98:	f7fc f9b8 	bl	800030c <memcpy>
 8003f9c:	e7dc      	b.n	8003f58 <shellThread+0x418>
        chprintf(chp, "Commands: help ");
 8003f9e:	496e      	ldr	r1, [pc, #440]	; (8004158 <shellThread+0x618>)
 8003fa0:	4c6e      	ldr	r4, [pc, #440]	; (800415c <shellThread+0x61c>)
    chprintf(chp, "%s ", scp->sc_name);
 8003fa2:	4d6f      	ldr	r5, [pc, #444]	; (8004160 <shellThread+0x620>)
        chprintf(chp, "Commands: help ");
 8003fa4:	4640      	mov	r0, r8
 8003fa6:	f7fe fc7b 	bl	80028a0 <chprintf>
  while (scp->sc_name != NULL) {
 8003faa:	4a6e      	ldr	r2, [pc, #440]	; (8004164 <shellThread+0x624>)
    chprintf(chp, "%s ", scp->sc_name);
 8003fac:	4629      	mov	r1, r5
 8003fae:	4640      	mov	r0, r8
 8003fb0:	f7fe fc76 	bl	80028a0 <chprintf>
  while (scp->sc_name != NULL) {
 8003fb4:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8003fb8:	2a00      	cmp	r2, #0
 8003fba:	d1f7      	bne.n	8003fac <shellThread+0x46c>
        if (scp != NULL)
 8003fbc:	9b06      	ldr	r3, [sp, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f040 809f 	bne.w	8004102 <shellThread+0x5c2>
        chprintf(chp, SHELL_NEWLINE_STR);
 8003fc4:	4963      	ldr	r1, [pc, #396]	; (8004154 <shellThread+0x614>)
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	f7fe fc6a 	bl	80028a0 <chprintf>
 8003fcc:	e66a      	b.n	8003ca4 <shellThread+0x164>
 8003fce:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003fd2:	9d07      	ldr	r5, [sp, #28]
 8003fd4:	465c      	mov	r4, fp
 8003fd6:	eb09 0a01 	add.w	sl, r9, r1
    *(line + clen) = 0;
 8003fda:	9b02      	ldr	r3, [sp, #8]
 8003fdc:	f88a 3000 	strb.w	r3, [sl]
        if (len > 0) {
 8003fe0:	2900      	cmp	r1, #0
 8003fe2:	f43f ade0 	beq.w	8003ba6 <shellThread+0x66>
  if (*(scmp + 1) != NULL) {
 8003fe6:	9b01      	ldr	r3, [sp, #4]
          write_completions(scfg, line, p - line);
 8003fe8:	9a00      	ldr	r2, [sp, #0]
  if (*(scmp + 1) != NULL) {
 8003fea:	685b      	ldr	r3, [r3, #4]
          write_completions(scfg, line, p - line);
 8003fec:	f8d2 b000 	ldr.w	fp, [r2]
  if (*(scmp + 1) != NULL) {
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d071      	beq.n	80040d8 <shellThread+0x598>
    chprintf(chp, SHELL_NEWLINE_STR);
 8003ff4:	4957      	ldr	r1, [pc, #348]	; (8004154 <shellThread+0x614>)
 8003ff6:	4658      	mov	r0, fp
 8003ff8:	f7fe fc52 	bl	80028a0 <chprintf>
    while (*scmp != NULL)
 8003ffc:	9b01      	ldr	r3, [sp, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	b1a2      	cbz	r2, 800402c <shellThread+0x4ec>
 8004002:	4653      	mov	r3, sl
 8004004:	9401      	str	r4, [sp, #4]
 8004006:	46aa      	mov	sl, r5
      chprintf(chp, " %s", *scmp++);
 8004008:	4f57      	ldr	r7, [pc, #348]	; (8004168 <shellThread+0x628>)
 800400a:	9c05      	ldr	r4, [sp, #20]
 800400c:	465d      	mov	r5, fp
 800400e:	469b      	mov	fp, r3
 8004010:	e000      	b.n	8004014 <shellThread+0x4d4>
 8004012:	3404      	adds	r4, #4
 8004014:	4639      	mov	r1, r7
 8004016:	4628      	mov	r0, r5
 8004018:	f7fe fc42 	bl	80028a0 <chprintf>
    while (*scmp != NULL)
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	2a00      	cmp	r2, #0
 8004020:	d1f7      	bne.n	8004012 <shellThread+0x4d2>
 8004022:	465b      	mov	r3, fp
 8004024:	9c01      	ldr	r4, [sp, #4]
 8004026:	46ab      	mov	fp, r5
 8004028:	4655      	mov	r5, sl
 800402a:	469a      	mov	sl, r3
    chprintf(chp, SHELL_NEWLINE_STR);
 800402c:	4949      	ldr	r1, [pc, #292]	; (8004154 <shellThread+0x614>)
 800402e:	4658      	mov	r0, fp
 8004030:	f7fe fc36 	bl	80028a0 <chprintf>
    chprintf(chp, SHELL_PROMPT_STR);
 8004034:	494d      	ldr	r1, [pc, #308]	; (800416c <shellThread+0x62c>)
 8004036:	4658      	mov	r0, fp
 8004038:	f7fe fc32 	bl	80028a0 <chprintf>
    chprintf(chp, "%s", line);
 800403c:	4944      	ldr	r1, [pc, #272]	; (8004150 <shellThread+0x610>)
 800403e:	464a      	mov	r2, r9
 8004040:	4658      	mov	r0, fp
 8004042:	f7fe fc2d 	bl	80028a0 <chprintf>
          p = line + len;
 8004046:	4657      	mov	r7, sl
 8004048:	e5ad      	b.n	8003ba6 <shellThread+0x66>
 800404a:	4c44      	ldr	r4, [pc, #272]	; (800415c <shellThread+0x61c>)
  while (scp->sc_name != NULL) {
 800404c:	4845      	ldr	r0, [pc, #276]	; (8004164 <shellThread+0x624>)
 800404e:	e003      	b.n	8004058 <shellThread+0x518>
 8004050:	f854 0f08 	ldr.w	r0, [r4, #8]!
 8004054:	2800      	cmp	r0, #0
 8004056:	d046      	beq.n	80040e6 <shellThread+0x5a6>
    if (strcmp(scp->sc_name, name) == 0) {
 8004058:	4629      	mov	r1, r5
 800405a:	f7fc f9f5 	bl	8000448 <strcmp>
 800405e:	2800      	cmp	r0, #0
 8004060:	d1f6      	bne.n	8004050 <shellThread+0x510>
      scp->sc_function(chp, argc, argv);
 8004062:	6863      	ldr	r3, [r4, #4]
 8004064:	4631      	mov	r1, r6
 8004066:	aa11      	add	r2, sp, #68	; 0x44
 8004068:	4640      	mov	r0, r8
 800406a:	4798      	blx	r3
      return false;
 800406c:	e61a      	b.n	8003ca4 <shellThread+0x164>
 800406e:	46a4      	mov	ip, r4
 8004070:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004074:	9d07      	ldr	r5, [sp, #28]
    *(line + clen) = 0;
 8004076:	f809 c001 	strb.w	ip, [r9, r1]
 800407a:	465c      	mov	r4, fp
 800407c:	eb09 0a01 	add.w	sl, r9, r1
 8004080:	e7b1      	b.n	8003fe6 <shellThread+0x4a6>
      clen = strlen(*scmp);
 8004082:	4650      	mov	r0, sl
 8004084:	f7fc fb5c 	bl	8000740 <strlen>
      while ((c < line + clen) && (c < line + size - 1))
 8004088:	eb09 0a00 	add.w	sl, r9, r0
 800408c:	4557      	cmp	r7, sl
      clen = strlen(*scmp);
 800408e:	4601      	mov	r1, r0
      while ((c < line + clen) && (c < line + size - 1))
 8004090:	d257      	bcs.n	8004142 <shellThread+0x602>
 8004092:	9b03      	ldr	r3, [sp, #12]
 8004094:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004098:	eba3 0c07 	sub.w	ip, r3, r7
 800409c:	463b      	mov	r3, r7
 800409e:	e005      	b.n	80040ac <shellThread+0x56c>
 80040a0:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d098      	beq.n	8003fda <shellThread+0x49a>
 80040a8:	f8de b000 	ldr.w	fp, [lr]
        *c++ = *(*scmp + i++);
 80040ac:	eb03 020c 	add.w	r2, r3, ip
 80040b0:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80040b4:	f803 2b01 	strb.w	r2, [r3], #1
      while ((c < line + clen) && (c < line + size - 1))
 80040b8:	4553      	cmp	r3, sl
 80040ba:	d1f1      	bne.n	80040a0 <shellThread+0x560>
      if (c < line + size -1) {
 80040bc:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 80040c0:	459a      	cmp	sl, r3
 80040c2:	d28a      	bcs.n	8003fda <shellThread+0x49a>
        clen++;
 80040c4:	3001      	adds	r0, #1
        *c = ' ';
 80040c6:	2320      	movs	r3, #32
 80040c8:	f88a 3000 	strb.w	r3, [sl]
    *(line + clen) = 0;
 80040cc:	9b02      	ldr	r3, [sp, #8]
 80040ce:	f809 3000 	strb.w	r3, [r9, r0]
 80040d2:	eb09 0a00 	add.w	sl, r9, r0
 80040d6:	e786      	b.n	8003fe6 <shellThread+0x4a6>
    chprintf(chp, "%s", line + pos);
 80040d8:	463a      	mov	r2, r7
 80040da:	491d      	ldr	r1, [pc, #116]	; (8004150 <shellThread+0x610>)
 80040dc:	4658      	mov	r0, fp
 80040de:	f7fe fbdf 	bl	80028a0 <chprintf>
          p = line + len;
 80040e2:	4657      	mov	r7, sl
 80040e4:	e55f      	b.n	8003ba6 <shellThread+0x66>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 80040e6:	9c06      	ldr	r4, [sp, #24]
 80040e8:	b1f4      	cbz	r4, 8004128 <shellThread+0x5e8>
  while (scp->sc_name != NULL) {
 80040ea:	6820      	ldr	r0, [r4, #0]
 80040ec:	b918      	cbnz	r0, 80040f6 <shellThread+0x5b6>
 80040ee:	e01b      	b.n	8004128 <shellThread+0x5e8>
 80040f0:	f854 0f08 	ldr.w	r0, [r4, #8]!
 80040f4:	b1c0      	cbz	r0, 8004128 <shellThread+0x5e8>
    if (strcmp(scp->sc_name, name) == 0) {
 80040f6:	4629      	mov	r1, r5
 80040f8:	f7fc f9a6 	bl	8000448 <strcmp>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d1f7      	bne.n	80040f0 <shellThread+0x5b0>
 8004100:	e7af      	b.n	8004062 <shellThread+0x522>
  while (scp->sc_name != NULL) {
 8004102:	9c06      	ldr	r4, [sp, #24]
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	2a00      	cmp	r2, #0
 8004108:	f43f af5c 	beq.w	8003fc4 <shellThread+0x484>
    chprintf(chp, "%s ", scp->sc_name);
 800410c:	4d14      	ldr	r5, [pc, #80]	; (8004160 <shellThread+0x620>)
 800410e:	4629      	mov	r1, r5
 8004110:	4640      	mov	r0, r8
 8004112:	f7fe fbc5 	bl	80028a0 <chprintf>
  while (scp->sc_name != NULL) {
 8004116:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800411a:	2a00      	cmp	r2, #0
 800411c:	d1f7      	bne.n	800410e <shellThread+0x5ce>
        chprintf(chp, SHELL_NEWLINE_STR);
 800411e:	490d      	ldr	r1, [pc, #52]	; (8004154 <shellThread+0x614>)
 8004120:	4640      	mov	r0, r8
 8004122:	f7fe fbbd 	bl	80028a0 <chprintf>
 8004126:	e5bd      	b.n	8003ca4 <shellThread+0x164>
        chprintf(chp, "%s", cmd);
 8004128:	4909      	ldr	r1, [pc, #36]	; (8004150 <shellThread+0x610>)
 800412a:	462a      	mov	r2, r5
 800412c:	4640      	mov	r0, r8
 800412e:	f7fe fbb7 	bl	80028a0 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8004132:	490f      	ldr	r1, [pc, #60]	; (8004170 <shellThread+0x630>)
 8004134:	4640      	mov	r0, r8
 8004136:	f7fe fbb3 	bl	80028a0 <chprintf>
 800413a:	e5b3      	b.n	8003ca4 <shellThread+0x164>
    *(line + clen) = 0;
 800413c:	f88d c058 	strb.w	ip, [sp, #88]	; 0x58
 8004140:	e531      	b.n	8003ba6 <shellThread+0x66>
      while ((c < line + clen) && (c < line + size - 1))
 8004142:	46ba      	mov	sl, r7
 8004144:	e7be      	b.n	80040c4 <shellThread+0x584>
 8004146:	bf00      	nop
 8004148:	08006164 	.word	0x08006164
 800414c:	08006170 	.word	0x08006170
 8004150:	08006174 	.word	0x08006174
 8004154:	08005f58 	.word	0x08005f58
 8004158:	0800619c 	.word	0x0800619c
 800415c:	080064e0 	.word	0x080064e0
 8004160:	080061ac 	.word	0x080061ac
 8004164:	08005fb4 	.word	0x08005fb4
 8004168:	08006178 	.word	0x08006178
 800416c:	08006154 	.word	0x08006154
 8004170:	080061b0 	.word	0x080061b0
	...

08004180 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004180:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8004184:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004186:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800418a:	2300      	movs	r3, #0
 800418c:	f383 8811 	msr	BASEPRI, r3
}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
	...

080041a0 <chThdExit>:
 80041a0:	2320      	movs	r3, #32
 80041a2:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 80041a6:	f7fd bbab 	b.w	8001900 <chThdExitS>
 80041aa:	bf00      	nop
 80041ac:	0000      	movs	r0, r0
	...

080041b0 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 80041b0:	4a0d      	ldr	r2, [pc, #52]	; (80041e8 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 80041b2:	6810      	ldr	r0, [r2, #0]
 80041b4:	6951      	ldr	r1, [r2, #20]
  tqp->next             = tp->queue.next;
 80041b6:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 80041b8:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80041ba:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80041bc:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 80041be:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 80041c0:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80041c4:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 80041c6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80041c8:	6150      	str	r0, [r2, #20]
  tp->state = CH_STATE_READY;
 80041ca:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80041ce:	e000      	b.n	80041d2 <chSchDoReschedule+0x22>
 80041d0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4294      	cmp	r4, r2
 80041d6:	d3fb      	bcc.n	80041d0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 80041d8:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 80041da:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 80041dc:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 80041e0:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80041e2:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 80041e4:	f7fc b87c 	b.w	80002e0 <_port_switch>
 80041e8:	200013b0 	.word	0x200013b0
 80041ec:	00000000 	.word	0x00000000

080041f0 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 80041f0:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80041f2:	4d1b      	ldr	r5, [pc, #108]	; (8004260 <chMtxUnlock+0x70>)
void chMtxUnlock(mutex_t *mp) {
 80041f4:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 80041f6:	696e      	ldr	r6, [r5, #20]
 80041f8:	2320      	movs	r3, #32
 80041fa:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 80041fe:	6800      	ldr	r0, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8004200:	68cb      	ldr	r3, [r1, #12]
 8004202:	63b3      	str	r3, [r6, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8004204:	4288      	cmp	r0, r1
 8004206:	d025      	beq.n	8004254 <chMtxUnlock+0x64>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8004208:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 800420a:	b14b      	cbz	r3, 8004220 <chMtxUnlock+0x30>
 800420c:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <chMtxUnlock+0x2a>
 8004212:	6892      	ldr	r2, [r2, #8]
 8004214:	4294      	cmp	r4, r2
 8004216:	bf38      	it	cc
 8004218:	4614      	movcc	r4, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 800421a:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f5      	bne.n	800420c <chMtxUnlock+0x1c>
  tqp->next             = tp->queue.next;
 8004220:	6803      	ldr	r3, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8004222:	6b82      	ldr	r2, [r0, #56]	; 0x38
      ctp->prio = newprio;
 8004224:	60b4      	str	r4, [r6, #8]
 8004226:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004228:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 800422a:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 800422e:	6381      	str	r1, [r0, #56]	; 0x38

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8004230:	f7fc fe36 	bl	8000ea0 <chSchReadyI>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8004234:	682a      	ldr	r2, [r5, #0]
 8004236:	696b      	ldr	r3, [r5, #20]
  if (chSchIsRescRequiredI()) {
 8004238:	6892      	ldr	r2, [r2, #8]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	d803      	bhi.n	8004248 <chMtxUnlock+0x58>
 8004240:	2300      	movs	r3, #0
 8004242:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 8004246:	bd70      	pop	{r4, r5, r6, pc}
    chSchDoRescheduleAhead();
 8004248:	f7ff ffb2 	bl	80041b0 <chSchDoReschedule>
 800424c:	2300      	movs	r3, #0
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	6083      	str	r3, [r0, #8]
 8004258:	2300      	movs	r3, #0
 800425a:	f383 8811 	msr	BASEPRI, r3
}
 800425e:	bd70      	pop	{r4, r5, r6, pc}
 8004260:	200013b0 	.word	0x200013b0
	...

08004270 <cmd_mem>:
#if (SHELL_CMD_MEM_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
  size_t n, total, largest;

  (void)argv;
  if (argc > 0) {
 8004270:	2900      	cmp	r1, #0
 8004272:	dc38      	bgt.n	80042e6 <cmd_mem+0x76>
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	4605      	mov	r5, r0
 8004278:	2320      	movs	r3, #32
 800427a:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800427e:	4e1e      	ldr	r6, [pc, #120]	; (80042f8 <cmd_mem+0x88>)
 8004280:	f106 000c 	add.w	r0, r6, #12
 8004284:	f7fd fadc 	bl	8001840 <chMtxLockS>
 8004288:	2400      	movs	r4, #0
 800428a:	f384 8811 	msr	BASEPRI, r4
  H_LOCK(heapp);
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 800428e:	6873      	ldr	r3, [r6, #4]
 8004290:	b36b      	cbz	r3, 80042ee <cmd_mem+0x7e>
  tpages = 0U;
 8004292:	4622      	mov	r2, r4
  n = 0U;
 8004294:	4627      	mov	r7, r4
  while (H_NEXT(qp) != NULL) {
 8004296:	e9d3 3100 	ldrd	r3, r1, [r3]
 800429a:	428c      	cmp	r4, r1
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 800429c:	f107 0701 	add.w	r7, r7, #1
    tpages += pages;
 80042a0:	440a      	add	r2, r1
 80042a2:	bf38      	it	cc
 80042a4:	460c      	movcc	r4, r1
  while (H_NEXT(qp) != NULL) {
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f5      	bne.n	8004296 <cmd_mem+0x26>
 80042aa:	00d6      	lsls	r6, r2, #3
 80042ac:	00e4      	lsls	r4, r4, #3

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
    *largestp = lpages * CH_HEAP_ALIGNMENT;
  }
  H_UNLOCK(heapp);
 80042ae:	4813      	ldr	r0, [pc, #76]	; (80042fc <cmd_mem+0x8c>)
 80042b0:	f7ff ff9e 	bl	80041f0 <chMtxUnlock>
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 80042b4:	4b12      	ldr	r3, [pc, #72]	; (8004300 <cmd_mem+0x90>)
    shellUsage(chp, "mem");
    return;
  }
  n = chHeapStatus(NULL, &total, &largest);
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 80042b6:	4913      	ldr	r1, [pc, #76]	; (8004304 <cmd_mem+0x94>)
 80042b8:	e9d3 3200 	ldrd	r3, r2, [r3]
 80042bc:	4628      	mov	r0, r5
 80042be:	1ad2      	subs	r2, r2, r3
 80042c0:	f7fe faee 	bl	80028a0 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 80042c4:	463a      	mov	r2, r7
 80042c6:	4910      	ldr	r1, [pc, #64]	; (8004308 <cmd_mem+0x98>)
 80042c8:	4628      	mov	r0, r5
 80042ca:	f7fe fae9 	bl	80028a0 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 80042ce:	4632      	mov	r2, r6
 80042d0:	490e      	ldr	r1, [pc, #56]	; (800430c <cmd_mem+0x9c>)
 80042d2:	4628      	mov	r0, r5
 80042d4:	f7fe fae4 	bl	80028a0 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 80042d8:	4622      	mov	r2, r4
 80042da:	4628      	mov	r0, r5
 80042dc:	490c      	ldr	r1, [pc, #48]	; (8004310 <cmd_mem+0xa0>)
}
 80042de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 80042e2:	f7fe badd 	b.w	80028a0 <chprintf>
    shellUsage(chp, "mem");
 80042e6:	4a0b      	ldr	r2, [pc, #44]	; (8004314 <cmd_mem+0xa4>)
 80042e8:	490b      	ldr	r1, [pc, #44]	; (8004318 <cmd_mem+0xa8>)
 80042ea:	f7fe bad9 	b.w	80028a0 <chprintf>
  while (H_NEXT(qp) != NULL) {
 80042ee:	461c      	mov	r4, r3
 80042f0:	461e      	mov	r6, r3
  n = 0U;
 80042f2:	461f      	mov	r7, r3
 80042f4:	e7db      	b.n	80042ae <cmd_mem+0x3e>
 80042f6:	bf00      	nop
 80042f8:	20001588 	.word	0x20001588
 80042fc:	20001594 	.word	0x20001594
 8004300:	20001548 	.word	0x20001548
 8004304:	080061bc 	.word	0x080061bc
 8004308:	080061dc 	.word	0x080061dc
 800430c:	080061f4 	.word	0x080061f4
 8004310:	08006214 	.word	0x08006214
 8004314:	080061b8 	.word	0x080061b8
 8004318:	08005fa0 	.word	0x08005fa0
 800431c:	00000000 	.word	0x00000000

08004320 <chThdRelease>:
 8004320:	2220      	movs	r2, #32
 8004322:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8004326:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800432a:	3b01      	subs	r3, #1
 800432c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8004330:	6a03      	ldr	r3, [r0, #32]
 8004332:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004336:	2b0f      	cmp	r3, #15
 8004338:	d003      	beq.n	8004342 <chThdRelease+0x22>
 800433a:	2300      	movs	r3, #0
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	4770      	bx	lr
    REG_REMOVE(tp);
 8004342:	e9d0 1303 	ldrd	r1, r3, [r0, #12]
void chThdRelease(thread_t *tp) {
 8004346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    REG_REMOVE(tp);
 800434a:	60d9      	str	r1, [r3, #12]
 800434c:	68c1      	ldr	r1, [r0, #12]
 800434e:	2700      	movs	r7, #0
 8004350:	610b      	str	r3, [r1, #16]
 8004352:	f387 8811 	msr	BASEPRI, r7
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8004356:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d00d      	beq.n	800437e <chThdRelease+0x5e>
 8004362:	2b02      	cmp	r3, #2
 8004364:	d001      	beq.n	800436a <chThdRelease+0x4a>
}
 8004366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 800436a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800436c:	69c1      	ldr	r1, [r0, #28]
 800436e:	f382 8811 	msr	BASEPRI, r2
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	600a      	str	r2, [r1, #0]
  mp->next = php;
 8004376:	6019      	str	r1, [r3, #0]
 8004378:	f387 8811 	msr	BASEPRI, r7
 800437c:	e7f3      	b.n	8004366 <chThdRelease+0x46>
      chHeapFree(chThdGetWorkingAreaX(tp));
 800437e:	69c6      	ldr	r6, [r0, #28]
  heapp = H_HEAP(hp);
 8004380:	e956 0302 	ldrd	r0, r3, [r6, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8004384:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004386:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8004388:	f846 3c04 	str.w	r3, [r6, #-4]
  qp = &heapp->header;
 800438c:	1d05      	adds	r5, r0, #4
  H_LOCK(heapp);
 800438e:	f100 080c 	add.w	r8, r0, #12
  hp = (heap_header_t *)p - 1U;
 8004392:	f1a6 0408 	sub.w	r4, r6, #8
 8004396:	f382 8811 	msr	BASEPRI, r2
 800439a:	4640      	mov	r0, r8
 800439c:	f7fd fa50 	bl	8001840 <chMtxLockS>
 80043a0:	f387 8811 	msr	BASEPRI, r7
  qp = &heapp->header;
 80043a4:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 80043a6:	429d      	cmp	r5, r3
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80043a8:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 80043aa:	d001      	beq.n	80043b0 <chThdRelease+0x90>
 80043ac:	429c      	cmp	r4, r3
 80043ae:	d902      	bls.n	80043b6 <chThdRelease+0x96>
 80043b0:	b11a      	cbz	r2, 80043ba <chThdRelease+0x9a>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80043b2:	4294      	cmp	r4, r2
 80043b4:	d301      	bcc.n	80043ba <chThdRelease+0x9a>
    qp = H_NEXT(qp);
 80043b6:	4613      	mov	r3, r2
 80043b8:	e7f5      	b.n	80043a6 <chThdRelease+0x86>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80043ba:	f856 1c04 	ldr.w	r1, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 80043be:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 80043c2:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80043c4:	1c4a      	adds	r2, r1, #1
 80043c6:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80043ca:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 80043ce:	4281      	cmp	r1, r0
 80043d0:	d011      	beq.n	80043f6 <chThdRelease+0xd6>
      if ((H_LIMIT(qp) == hp)) {
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	1c4a      	adds	r2, r1, #1
 80043d6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80043da:	4294      	cmp	r4, r2
 80043dc:	d004      	beq.n	80043e8 <chThdRelease+0xc8>
  H_UNLOCK(heapp);
 80043de:	4640      	mov	r0, r8
}
 80043e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043e4:	f7ff bf04 	b.w	80041f0 <chMtxUnlock>
        H_NEXT(qp) = H_NEXT(hp);
 80043e8:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80043ec:	3201      	adds	r2, #1
 80043ee:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 80043f0:	6018      	str	r0, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80043f2:	6059      	str	r1, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 80043f4:	e7f3      	b.n	80043de <chThdRelease+0xbe>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80043f6:	e9d1 1000 	ldrd	r1, r0, [r1]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80043fa:	4402      	add	r2, r0
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80043fc:	f846 1c08 	str.w	r1, [r6, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8004400:	f846 2c04 	str.w	r2, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8004404:	e7e5      	b.n	80043d2 <chThdRelease+0xb2>
 8004406:	bf00      	nop
	...

08004410 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8004410:	4bc7      	ldr	r3, [pc, #796]	; (8004730 <main+0x320>)
  PWR->CR |= PWR_CR_DBP;
 8004412:	48c8      	ldr	r0, [pc, #800]	; (8004734 <main+0x324>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	f062 021f 	orn	r2, r2, #31
};

/*
 * Application entry point.
 */
int main(void) {
 800441a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800441e:	611a      	str	r2, [r3, #16]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	f002 021f 	and.w	r2, r2, #31
 8004426:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8004428:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800442c:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	615c      	str	r4, [r3, #20]
 8004432:	2100      	movs	r1, #0
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	6159      	str	r1, [r3, #20]
 8004438:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800443a:	6a1a      	ldr	r2, [r3, #32]
 800443c:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8004440:	621a      	str	r2, [r3, #32]
 8004442:	6a1a      	ldr	r2, [r3, #32]
 8004444:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004448:	621a      	str	r2, [r3, #32]
 800444a:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 800444c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444e:	625c      	str	r4, [r3, #36]	; 0x24
 8004450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004452:	6259      	str	r1, [r3, #36]	; 0x24
 8004454:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8004456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004458:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
 800445e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004460:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004464:	661a      	str	r2, [r3, #96]	; 0x60
 8004466:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8004468:	6802      	ldr	r2, [r0, #0]
 800446a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446e:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8004470:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004472:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004476:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800447a:	b08d      	sub	sp, #52	; 0x34
 800447c:	d003      	beq.n	8004486 <main+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 800447e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004482:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8004484:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8004486:	4eab      	ldr	r6, [pc, #684]	; (8004734 <main+0x324>)

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004488:	49ab      	ldr	r1, [pc, #684]	; (8004738 <main+0x328>)
 800448a:	6870      	ldr	r0, [r6, #4]
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 800448c:	4dab      	ldr	r5, [pc, #684]	; (800473c <main+0x32c>)
 800448e:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 8004770 <main+0x360>
  usbp->state        = USB_STOP;
 8004492:	4fab      	ldr	r7, [pc, #684]	; (8004740 <main+0x330>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8004494:	4aa6      	ldr	r2, [pc, #664]	; (8004730 <main+0x320>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8004496:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8004774 <main+0x364>
  tqp->next = (thread_t *)tqp;
 800449a:	4caa      	ldr	r4, [pc, #680]	; (8004744 <main+0x334>)
 800449c:	2360      	movs	r3, #96	; 0x60
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800449e:	f04f 0c40 	mov.w	ip, #64	; 0x40
 80044a2:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80044a6:	6070      	str	r0, [r6, #4]
 80044a8:	f04f 0880 	mov.w	r8, #128	; 0x80
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80044ac:	f881 3306 	strb.w	r3, [r1, #774]	; 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80044b4:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044b8:	f8c1 c000 	str.w	ip, [r1]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044bc:	f44f 7c00 	mov.w	ip, #512	; 0x200
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80044c0:	f881 3307 	strb.w	r3, [r1, #775]	; 0x307
 80044c4:	462e      	mov	r6, r5
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044c6:	f8c1 8180 	str.w	r8, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044ca:	f8c1 8000 	str.w	r8, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80044ce:	f881 3308 	strb.w	r3, [r1, #776]	; 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044d2:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044d6:	6008      	str	r0, [r1, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80044d8:	f881 3309 	strb.w	r3, [r1, #777]	; 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044dc:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044e0:	f8c1 c000 	str.w	ip, [r1]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044e4:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80044e8:	f881 330a 	strb.w	r3, [r1, #778]	; 0x30a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044ec:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044f0:	f8c1 c000 	str.w	ip, [r1]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044f4:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80044f8:	f881 3317 	strb.w	r3, [r1, #791]	; 0x317
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044fc:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004500:	f8c1 c000 	str.w	ip, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004504:	f881 3328 	strb.w	r3, [r1, #808]	; 0x328
 8004508:	f105 0c0c 	add.w	ip, r5, #12
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800450c:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
  iqp->q_buffer  = bp;
 8004510:	f105 0354 	add.w	r3, r5, #84	; 0x54
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004514:	6048      	str	r0, [r1, #4]
 8004516:	f846 eb04 	str.w	lr, [r6], #4
  tqp->prev = (thread_t *)tqp;
 800451a:	e9c5 cc03 	strd	ip, ip, [r5, #12]
  iqp->q_top     = bp + size;
 800451e:	f505 7eaa 	add.w	lr, r5, #340	; 0x154
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8004522:	f04f 0c01 	mov.w	ip, #1
  iqp->q_wrptr   = bp;
 8004526:	e9c5 3308 	strd	r3, r3, [r5, #32]
  iqp->q_buffer  = bp;
 800452a:	61ab      	str	r3, [r5, #24]
  iqp->q_counter = 0;
 800452c:	2300      	movs	r3, #0
  esp->next = (event_listener_t *)esp;
 800452e:	606e      	str	r6, [r5, #4]
 8004530:	f885 c008 	strb.w	ip, [r5, #8]
 8004534:	616b      	str	r3, [r5, #20]
  iqp->q_top     = bp + size;
 8004536:	f8c5 e01c 	str.w	lr, [r5, #28]
 800453a:	f887 c000 	strb.w	ip, [r7]
  oqp->q_counter = size;
 800453e:	63a8      	str	r0, [r5, #56]	; 0x38
  ST_ENABLE_CLOCK();
 8004540:	6c10      	ldr	r0, [r2, #64]	; 0x40
  oqp->q_buffer  = bp;
 8004542:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
 8004546:	ea40 000c 	orr.w	r0, r0, ip
 800454a:	6410      	str	r0, [r2, #64]	; 0x40
 800454c:	6e10      	ldr	r0, [r2, #96]	; 0x60
  oqp->q_rdptr   = bp;
 800454e:	f8c5 e048 	str.w	lr, [r5, #72]	; 0x48
 8004552:	ea40 000c 	orr.w	r0, r0, ip
 8004556:	6610      	str	r0, [r2, #96]	; 0x60
 8004558:	6e12      	ldr	r2, [r2, #96]	; 0x60
  ST_ENABLE_STOP();
 800455a:	f8d9 0008 	ldr.w	r0, [r9, #8]
  oqp->q_wrptr   = bp;
 800455e:	f8c5 e044 	str.w	lr, [r5, #68]	; 0x44
  oqp->q_top     = bp + size;
 8004562:	f505 7e15 	add.w	lr, r5, #596	; 0x254
 8004566:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 800456a:	f8df e20c 	ldr.w	lr, [pc, #524]	; 8004778 <main+0x368>
 800456e:	f8c5 e04c 	str.w	lr, [r5, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8004572:	f8df e208 	ldr.w	lr, [pc, #520]	; 800477c <main+0x36c>
 8004576:	f8c5 e254 	str.w	lr, [r5, #596]	; 0x254
  USBD1.otg       = OTG_FS;
 800457a:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
 800457e:	f8c7 e054 	str.w	lr, [r7, #84]	; 0x54
 8004582:	ea40 000c 	orr.w	r0, r0, ip
  USBD1.otgparams = &fsparams;
 8004586:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8004780 <main+0x370>
    usbp->in_params[i]  = NULL;
 800458a:	61fb      	str	r3, [r7, #28]
  iqp->q_link    = link;
 800458c:	e9c5 350a 	strd	r3, r5, [r5, #40]	; 0x28
  usbp->transmitting = 0;
 8004590:	e9c7 3301 	strd	r3, r3, [r7, #4]
    usbp->out_params[i] = NULL;
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
    usbp->in_params[i]  = NULL;
 8004596:	623b      	str	r3, [r7, #32]
    usbp->out_params[i] = NULL;
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800459c:	633b      	str	r3, [r7, #48]	; 0x30
 800459e:	f8c7 e058 	str.w	lr, [r7, #88]	; 0x58
  oqp->q_link    = link;
 80045a2:	652d      	str	r5, [r5, #80]	; 0x50
  tqp->next = (thread_t *)tqp;
 80045a4:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80045a8:	f8c9 0008 	str.w	r0, [r9, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80045ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  tqp->prev = (thread_t *)tqp;
 80045b0:	e9c5 ee0c 	strd	lr, lr, [r5, #48]	; 0x30
 80045b4:	f242 0ecf 	movw	lr, #8399	; 0x20cf
  default_heap.provider = chCoreAllocAlignedWithOffset;
 80045b8:	4e63      	ldr	r6, [pc, #396]	; (8004748 <main+0x338>)
 80045ba:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80045be:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
  tqp->next = (thread_t *)tqp;
 80045c2:	4a62      	ldr	r2, [pc, #392]	; (800474c <main+0x33c>)
 80045c4:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80045c8:	6183      	str	r3, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80045ca:	6343      	str	r3, [r0, #52]	; 0x34
  tqp->prev = (thread_t *)tqp;
 80045cc:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 80045ce:	60c3      	str	r3, [r0, #12]
  ch.rlist.prio = NOPRIO;
 80045d0:	60a3      	str	r3, [r4, #8]
  STM32_ST_TIM->CR2    = 0;
 80045d2:	6043      	str	r3, [r0, #4]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80045d4:	60e4      	str	r4, [r4, #12]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80045d6:	f8c0 c014 	str.w	ip, [r0, #20]
  ch.rlist.older = (thread_t *)&ch.rlist;
 80045da:	6124      	str	r4, [r4, #16]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80045dc:	f8c0 c000 	str.w	ip, [r0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80045e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80045e4:	f881 831c 	strb.w	r8, [r1, #796]	; 0x31c
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80045e8:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
  ch.vtlist.delta = (sysinterval_t)-1;
 80045ec:	f8c4 e020 	str.w	lr, [r4, #32]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80045f0:	6008      	str	r0, [r1, #0]
  tqp->next = (thread_t *)tqp;
 80045f2:	f106 010c 	add.w	r1, r6, #12
  ch_memcore.basemem = __heap_base__;
 80045f6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8004784 <main+0x374>
 80045fa:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8004788 <main+0x378>
 80045fe:	f8c6 8000 	str.w	r8, [r6]
  tqp->prev = (thread_t *)tqp;
 8004602:	e9c6 1103 	strd	r1, r1, [r6, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8004606:	f102 0c10 	add.w	ip, r2, #16
  mp->object_size = size;
 800460a:	2014      	movs	r0, #20
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800460c:	f104 0118 	add.w	r1, r4, #24
 8004610:	e9c2 c304 	strd	ip, r3, [r2, #16]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8004614:	e9c4 1106 	strd	r1, r1, [r4, #24]
  mp->provider = provider;
 8004618:	f8df c170 	ldr.w	ip, [pc, #368]	; 800478c <main+0x37c>
  ch_memcore.topmem  = __heap_end__;
 800461c:	494c      	ldr	r1, [pc, #304]	; (8004750 <main+0x340>)
  mp->object_size = size;
 800461e:	6190      	str	r0, [r2, #24]
  ch_memcore.basemem = __heap_base__;
 8004620:	484c      	ldr	r0, [pc, #304]	; (8004754 <main+0x344>)
 8004622:	f8c9 0000 	str.w	r0, [r9]
  ch_memcore.topmem  = __heap_end__;
 8004626:	f8c9 1004 	str.w	r1, [r9, #4]
  mp->align = align;
 800462a:	f04f 0804 	mov.w	r8, #4
  tmp->cumulative = (rttime_t)0;
 800462e:	2000      	movs	r0, #0
 8004630:	2100      	movs	r1, #0
  H_PAGES(&default_heap.header) = 0;
 8004632:	e9c6 3301 	strd	r3, r3, [r6, #4]
  ch.vtlist.lasttime = (systime_t)0;
 8004636:	6263      	str	r3, [r4, #36]	; 0x24
  mp->owner = NULL;
 8004638:	6173      	str	r3, [r6, #20]
 800463a:	6093      	str	r3, [r2, #8]
 800463c:	e9c2 2200 	strd	r2, r2, [r2]
  tqp->next = (thread_t *)tqp;
 8004640:	6024      	str	r4, [r4, #0]
 8004642:	f8c2 801c 	str.w	r8, [r2, #28]
  mp->provider = provider;
 8004646:	f8c2 c020 	str.w	ip, [r2, #32]
 800464a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800464e:	e9c2 8c0d 	strd	r8, ip, [r2, #52]	; 0x34
 8004652:	f102 0140 	add.w	r1, r2, #64	; 0x40
 8004656:	f102 0c3c 	add.w	ip, r2, #60	; 0x3c
 800465a:	e9c2 c10f 	strd	ip, r1, [r2, #60]	; 0x3c
  tmp->last       = (rtcnt_t)0;
 800465e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004662:	f102 0a24 	add.w	sl, r2, #36	; 0x24
 8004666:	f102 0928 	add.w	r9, r2, #40	; 0x28
  mp->object_size = size;
 800466a:	201c      	movs	r0, #28
  mp->next = NULL;
 800466c:	62d3      	str	r3, [r2, #44]	; 0x2c
  ch.tm.offset = (rtcnt_t)0;
 800466e:	6723      	str	r3, [r4, #112]	; 0x70
  tmp->n          = (ucnt_t)0;
 8004670:	9309      	str	r3, [sp, #36]	; 0x24
 8004672:	f102 0344 	add.w	r3, r2, #68	; 0x44
  tmp->best       = (rtcnt_t)-1;
 8004676:	f8cd e018 	str.w	lr, [sp, #24]
 800467a:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
 800467e:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
  mp->object_size = size;
 8004682:	6310      	str	r0, [r2, #48]	; 0x30
 8004684:	6453      	str	r3, [r2, #68]	; 0x44
    chTMStartMeasurementX(&tm);
 8004686:	a806      	add	r0, sp, #24
 8004688:	f7fc fb8a 	bl	8000da0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800468c:	a806      	add	r0, sp, #24
 800468e:	f7fc fb5f 	bl	8000d50 <chTMStopMeasurementX>
  } while (i > 0U);
 8004692:	f1b8 0801 	subs.w	r8, r8, #1
 8004696:	d1f6      	bne.n	8004686 <main+0x276>
  REG_INSERT(tp);
 8004698:	4b2f      	ldr	r3, [pc, #188]	; (8004758 <main+0x348>)
 800469a:	6920      	ldr	r0, [r4, #16]
  ch.tm.offset = tm.best;
 800469c:	9906      	ldr	r1, [sp, #24]
  tp->name      = name;
 800469e:	4a2f      	ldr	r2, [pc, #188]	; (800475c <main+0x34c>)
 80046a0:	6721      	str	r1, [r4, #112]	; 0x70
  tp->prio      = prio;
 80046a2:	f04f 0c80 	mov.w	ip, #128	; 0x80
  tp->refs      = (trefs_t)1;
 80046a6:	2101      	movs	r1, #1
  tp->prio      = prio;
 80046a8:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
  tp->realprio  = prio;
 80046ac:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
  tp->name      = name;
 80046b0:	6462      	str	r2, [r4, #68]	; 0x44
  tlp->next = (thread_t *)tlp;
 80046b2:	f103 0c28 	add.w	ip, r3, #40	; 0x28
  tqp->next = (thread_t *)tqp;
 80046b6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  tp->epending  = (eventmask_t)0;
 80046ba:	e9c4 8818 	strd	r8, r8, [r4, #96]	; 0x60
  REG_INSERT(tp);
 80046be:	e9c4 400e 	strd	r4, r0, [r4, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
 80046c2:	f884 804d 	strb.w	r8, [r4, #77]	; 0x4d
  tp->refs      = (trefs_t)1;
 80046c6:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
 80046ca:	f04f 0920 	mov.w	r9, #32
  REG_INSERT(tp);
 80046ce:	60c3      	str	r3, [r0, #12]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80046d0:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80046d4:	e9c4 c215 	strd	ip, r2, [r4, #84]	; 0x54
  currp->state = CH_STATE_CURRENT;
 80046d8:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
  currp->wabase = NULL;
 80046dc:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  tqp->prev = (thread_t *)tqp;
 80046e0:	65e2      	str	r2, [r4, #92]	; 0x5c
 80046e2:	f389 8811 	msr	BASEPRI, r9
  __ASM volatile ("cpsie i" : : : "memory");
 80046e6:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e8:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <main+0x350>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80046ea:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <main+0x354>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046ec:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ee:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 80046f2:	4001      	ands	r1, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80046f4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 80046f8:	430a      	orrs	r2, r1
 80046fa:	f6a0 300f 	subw	r0, r0, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80046fe:	60da      	str	r2, [r3, #12]
 8004700:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004702:	4919      	ldr	r1, [pc, #100]	; (8004768 <main+0x358>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004704:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004708:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800470a:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470c:	2010      	movs	r0, #16
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	600a      	str	r2, [r1, #0]
 8004714:	77d8      	strb	r0, [r3, #31]
 8004716:	f883 9022 	strb.w	r9, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800471a:	f388 8811 	msr	BASEPRI, r8
  __ASM volatile ("cpsie i" : : : "memory");
 800471e:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004720:	f389 8811 	msr	BASEPRI, r9
  tp = chThdCreateSuspendedI(tdp);
 8004724:	4811      	ldr	r0, [pc, #68]	; (800476c <main+0x35c>)
 8004726:	f7fc fb43 	bl	8000db0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800472a:	f7fd f841 	bl	80017b0 <chSchWakeupS.constprop.0>
 800472e:	e02f      	b.n	8004790 <main+0x380>
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
 8004738:	e000e100 	.word	0xe000e100
 800473c:	20000c40 	.word	0x20000c40
 8004740:	2000132c 	.word	0x2000132c
 8004744:	200013b0 	.word	0x200013b0
 8004748:	20001588 	.word	0x20001588
 800474c:	20001424 	.word	0x20001424
 8004750:	20010000 	.word	0x20010000
 8004754:	2000b570 	.word	0x2000b570
 8004758:	200013dc 	.word	0x200013dc
 800475c:	08006388 	.word	0x08006388
 8004760:	e000ed00 	.word	0xe000ed00
 8004764:	05fa0300 	.word	0x05fa0300
 8004768:	e0001000 	.word	0xe0001000
 800476c:	0800642c 	.word	0x0800642c
 8004770:	08006684 	.word	0x08006684
 8004774:	e0042000 	.word	0xe0042000
 8004778:	08000931 	.word	0x08000931
 800477c:	40004400 	.word	0x40004400
 8004780:	0800641c 	.word	0x0800641c
 8004784:	20001548 	.word	0x20001548
 8004788:	080008f1 	.word	0x080008f1
 800478c:	08000d21 	.word	0x08000d21
 8004790:	f388 8811 	msr	BASEPRI, r8
 8004794:	f389 8811 	msr	BASEPRI, r9
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8004798:	7a2b      	ldrb	r3, [r5, #8]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d111      	bne.n	80047c2 <main+0x3b2>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 800479e:	4bb9      	ldr	r3, [pc, #740]	; (8004a84 <main+0x674>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80047a0:	4ab9      	ldr	r2, [pc, #740]	; (8004a88 <main+0x678>)
 80047a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80047a4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80047a8:	6419      	str	r1, [r3, #64]	; 0x40
 80047aa:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80047ac:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80047b0:	6619      	str	r1, [r3, #96]	; 0x60
 80047b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b4:	21c0      	movs	r1, #192	; 0xc0
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80047b6:	2340      	movs	r3, #64	; 0x40
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80047b8:	f882 1326 	strb.w	r1, [r2, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80047bc:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80047c0:	6053      	str	r3, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 80047c2:	f8d5 2254 	ldr.w	r2, [r5, #596]	; 0x254
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80047c6:	4bb1      	ldr	r3, [pc, #708]	; (8004a8c <main+0x67c>)
 80047c8:	429a      	cmp	r2, r3
 80047ca:	f000 826a 	beq.w	8004ca2 <main+0x892>
 80047ce:	49b0      	ldr	r1, [pc, #704]	; (8004a90 <main+0x680>)
    fck = STM32_PCLK2 / config->speed;
 80047d0:	f240 23d9 	movw	r3, #729	; 0x2d9
 80047d4:	428a      	cmp	r2, r1
 80047d6:	bf18      	it	ne
 80047d8:	f44f 73b6 	movne.w	r3, #364	; 0x16c
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80047dc:	f04f 0b40 	mov.w	fp, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80047e0:	f04f 0801 	mov.w	r8, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80047e4:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 80047e8:	f04f 0a00 	mov.w	sl, #0
  u->BRR = fck;
 80047ec:	6093      	str	r3, [r2, #8]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 80047ee:	f04f 0902 	mov.w	r9, #2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80047f2:	f8c2 b010 	str.w	fp, [r2, #16]
 80047f6:	23ff      	movs	r3, #255	; 0xff
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80047f8:	f8c2 8014 	str.w	r8, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80047fc:	60d1      	str	r1, [r2, #12]
  u->SR = 0;
 80047fe:	f8c2 a000 	str.w	sl, [r2]
  (void)u->SR;  /* SR reset step 1.*/
 8004802:	6811      	ldr	r1, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004804:	6852      	ldr	r2, [r2, #4]
 8004806:	f885 3258 	strb.w	r3, [r5, #600]	; 0x258
 800480a:	f885 9008 	strb.w	r9, [r5, #8]
 800480e:	f38a 8811 	msr	BASEPRI, sl
      0,
      0
  };

  sdStart(&SHELLPORT, &serial_config6);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8004812:	48a0      	ldr	r0, [pc, #640]	; (8004a94 <main+0x684>)
	//chprintf(dbg, "\r\n");
}

void xsvf_init(void){
  palSetLineMode(TDO_PIN, PAL_MODE_INPUT_PULLDOWN);
  TDI_IDLE;
 8004814:	4da0      	ldr	r5, [pc, #640]	; (8004a98 <main+0x688>)
 8004816:	f240 3282 	movw	r2, #898	; 0x382
 800481a:	2104      	movs	r1, #4
 800481c:	f7fc fcf0 	bl	8001200 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8004820:	489c      	ldr	r0, [pc, #624]	; (8004a94 <main+0x684>)
 8004822:	f240 3282 	movw	r2, #898	; 0x382
 8004826:	2108      	movs	r1, #8
 8004828:	f7fc fcea 	bl	8001200 <_pal_lld_setgroupmode>
  palSetLineMode(TDO_PIN, PAL_MODE_INPUT_PULLDOWN);
 800482c:	465a      	mov	r2, fp
 800482e:	4641      	mov	r1, r8
 8004830:	489a      	ldr	r0, [pc, #616]	; (8004a9c <main+0x68c>)
 8004832:	f7fc fce5 	bl	8001200 <_pal_lld_setgroupmode>
  TMS_IDLE;
  TCK_IDLE;
 8004836:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  TMS_IDLE;
 800483a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  TDI_IDLE;
 800483e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004842:	8369      	strh	r1, [r5, #26]
  palSetLineMode(TDI_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8004844:	4628      	mov	r0, r5
  TMS_IDLE;
 8004846:	836b      	strh	r3, [r5, #26]
  palSetLineMode(TDI_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8004848:	2219      	movs	r2, #25
  TCK_IDLE;
 800484a:	f8a5 b01a 	strh.w	fp, [r5, #26]
  palSetLineMode(TDI_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800484e:	f7fc fcd7 	bl	8001200 <_pal_lld_setgroupmode>
  palSetLineMode(TMS_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8004852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004856:	4619      	mov	r1, r3
 8004858:	2219      	movs	r2, #25
 800485a:	f7fc fcd1 	bl	8001200 <_pal_lld_setgroupmode>
  palSetLineMode(TCK_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800485e:	4659      	mov	r1, fp
 8004860:	2219      	movs	r2, #25
 8004862:	f7fc fccd 	bl	8001200 <_pal_lld_setgroupmode>
  xsvf_init();

  chprintf(dbg, "\r\nXSVF Player: %i.%i \r\nSystem started. (Shell)\r\n", VMAJOR, VMINOR);
 8004866:	4653      	mov	r3, sl
 8004868:	4642      	mov	r2, r8
 800486a:	498d      	ldr	r1, [pc, #564]	; (8004aa0 <main+0x690>)
 800486c:	488d      	ldr	r0, [pc, #564]	; (8004aa4 <main+0x694>)
  obqp->notify    = onfy;
 800486e:	f8df b25c 	ldr.w	fp, [pc, #604]	; 8004acc <main+0x6bc>
 8004872:	f7fe f815 	bl	80028a0 <chprintf>
  sdup->vmt = &vmt;
 8004876:	4a8c      	ldr	r2, [pc, #560]	; (8004aa8 <main+0x698>)
 8004878:	4b8c      	ldr	r3, [pc, #560]	; (8004aac <main+0x69c>)
  ibqp->notify    = infy;
 800487a:	f8df c254 	ldr.w	ip, [pc, #596]	; 8004ad0 <main+0x6c0>
 800487e:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
 8004882:	4610      	mov	r0, r2
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004884:	f202 458c 	addw	r5, r2, #1164	; 0x48c
 8004888:	f840 3b04 	str.w	r3, [r0], #4
  ibqp->brdptr    = bp;
 800488c:	f102 017c 	add.w	r1, r2, #124	; 0x7c
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004890:	f502 7321 	add.w	r3, r2, #644	; 0x284
  tqp->next = (thread_t *)tqp;
 8004894:	f102 0e0c 	add.w	lr, r2, #12
 8004898:	f102 0c44 	add.w	ip, r2, #68	; 0x44
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800489c:	65d5      	str	r5, [r2, #92]	; 0x5c
  ibqp->bsize     = size + sizeof (size_t);
 800489e:	f44f 7582 	mov.w	r5, #260	; 0x104
  ibqp->bcounter  = 0;
 80048a2:	f8c2 a018 	str.w	sl, [r2, #24]
  ibqp->bsize     = size + sizeof (size_t);
 80048a6:	6295      	str	r5, [r2, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 80048a8:	6615      	str	r5, [r2, #96]	; 0x60
  ibqp->top       = NULL;
 80048aa:	e9c2 aa0d 	strd	sl, sl, [r2, #52]	; 0x34
  obqp->top       = NULL;
 80048ae:	e9c2 aa1b 	strd	sl, sl, [r2, #108]	; 0x6c
  tqp->prev = (thread_t *)tqp;
 80048b2:	e9c2 ee03 	strd	lr, lr, [r2, #12]
  ibqp->bwrptr    = bp;
 80048b6:	e9c2 1107 	strd	r1, r1, [r2, #28]
  obqp->bwrptr    = bp;
 80048ba:	e9c2 3315 	strd	r3, r3, [r2, #84]	; 0x54
 80048be:	e9c2 cc11 	strd	ip, ip, [r2, #68]	; 0x44
  sdup->state = SDU_STOP;
 80048c2:	f882 8008 	strb.w	r8, [r2, #8]
  ibqp->suspended = suspended;
 80048c6:	f882 8014 	strb.w	r8, [r2, #20]
  ibqp->bn        = n;
 80048ca:	f8c2 902c 	str.w	r9, [r2, #44]	; 0x2c
  obqp->suspended = suspended;
 80048ce:	f882 804c 	strb.w	r8, [r2, #76]	; 0x4c
  obqp->bcounter  = n;
 80048d2:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  obqp->bn        = n;
 80048d6:	f8c2 9064 	str.w	r9, [r2, #100]	; 0x64
  ibqp->link      = link;
 80048da:	6412      	str	r2, [r2, #64]	; 0x40
  obqp->link      = link;
 80048dc:	6792      	str	r2, [r2, #120]	; 0x78
  obqp->notify    = onfy;
 80048de:	f8c2 b074 	str.w	fp, [r2, #116]	; 0x74
 80048e2:	6050      	str	r0, [r2, #4]
  ibqp->buffers   = bp;
 80048e4:	6311      	str	r1, [r2, #48]	; 0x30
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80048e6:	6253      	str	r3, [r2, #36]	; 0x24
  obqp->buffers   = bp;
 80048e8:	6693      	str	r3, [r2, #104]	; 0x68
 80048ea:	2520      	movs	r5, #32
 80048ec:	f385 8811 	msr	BASEPRI, r5
  sdup->config = config;
 80048f0:	4b6f      	ldr	r3, [pc, #444]	; (8004ab0 <main+0x6a0>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 80048f2:	623a      	str	r2, [r7, #32]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 80048f4:	62fa      	str	r2, [r7, #44]	; 0x2c
    usbp->in_params[config->int_in - 1U]  = sdup;
 80048f6:	61fa      	str	r2, [r7, #28]
  sdup->state = SDU_READY;
 80048f8:	f882 9008 	strb.w	r9, [r2, #8]
  sdup->config = config;
 80048fc:	f8c2 348c 	str.w	r3, [r2, #1164]	; 0x48c
 8004900:	f38a 8811 	msr	BASEPRI, sl
  sduObjectInit(&OSTRICHPORT);
  sduStart(&OSTRICHPORT, &serusbcfg1);
//  palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
//  palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));

  usbDisconnectBus(serusbcfg1.usbp);
 8004904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004906:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004908:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800490c:	6393      	str	r3, [r2, #56]	; 0x38
  chThdSleepMilliseconds(1500);
 800490e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8004912:	f7fd f9fd 	bl	8001d10 <chThdSleep>
 8004916:	f385 8811 	msr	BASEPRI, r5
  if (usbp->state == USB_STOP) {
 800491a:	783b      	ldrb	r3, [r7, #0]
  usbp->config = config;
 800491c:	4a65      	ldr	r2, [pc, #404]	; (8004ab4 <main+0x6a4>)
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	4543      	cmp	r3, r8
    usbp->epc[i] = NULL;
 8004922:	e9c7 aa03 	strd	sl, sl, [r7, #12]
 8004926:	e9c7 aa05 	strd	sl, sl, [r7, #20]
 800492a:	f000 812f 	beq.w	8004b8c <main+0x77c>
  usbp->state = USB_READY;
 800492e:	f04f 0c02 	mov.w	ip, #2
 8004932:	f887 c000 	strb.w	ip, [r7]
 8004936:	2500      	movs	r5, #0
 8004938:	f385 8811 	msr	BASEPRI, r5
  usbStart(serusbcfg1.usbp, &usbcfg);
  usbConnectBus(serusbcfg1.usbp);
 800493c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800493e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004940:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004944:	6393      	str	r3, [r2, #56]	; 0x38
 8004946:	2720      	movs	r7, #32
 8004948:	f387 8811 	msr	BASEPRI, r7
  tp->wabase = (stkalign_t *)wsp;
 800494c:	4b5a      	ldr	r3, [pc, #360]	; (8004ab8 <main+0x6a8>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800494e:	495b      	ldr	r1, [pc, #364]	; (8004abc <main+0x6ac>)
  REG_INSERT(tp);
 8004950:	6922      	ldr	r2, [r4, #16]
  tp->mtxlist   = NULL;
 8004952:	f649 4ef8 	movw	lr, #40184	; 0x9cf8
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004956:	f649 48a0 	movw	r8, #40096	; 0x9ca0
  tp->mtxlist   = NULL;
 800495a:	f843 500e 	str.w	r5, [r3, lr]
  tp->state     = CH_STATE_WTSTART;
 800495e:	f649 4ee0 	movw	lr, #40160	; 0x9ce0
  REG_INSERT(tp);
 8004962:	f101 0024 	add.w	r0, r1, #36	; 0x24
  tp->state     = CH_STATE_WTSTART;
 8004966:	f823 c00e 	strh.w	ip, [r3, lr]
  REG_INSERT(tp);
 800496a:	f649 4ccc 	movw	ip, #40140	; 0x9ccc
  tp->wabase = (stkalign_t *)wsp;
 800496e:	f649 4edc 	movw	lr, #40156	; 0x9cdc
  REG_INSERT(tp);
 8004972:	f843 400c 	str.w	r4, [r3, ip]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004976:	f649 4cd4 	movw	ip, #40148	; 0x9cd4
  tp->wabase = (stkalign_t *)wsp;
 800497a:	f843 300e 	str.w	r3, [r3, lr]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800497e:	f843 100c 	str.w	r1, [r3, ip]
 8004982:	f649 4ebc 	movw	lr, #40124	; 0x9cbc
 8004986:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8004ad4 <main+0x6c4>
 800498a:	f8c1 c000 	str.w	ip, [r1]
 800498e:	494c      	ldr	r1, [pc, #304]	; (8004ac0 <main+0x6b0>)
 8004990:	f843 100e 	str.w	r1, [r3, lr]
  tp->prio      = prio;
 8004994:	f649 4cc8 	movw	ip, #40136	; 0x9cc8
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004998:	f843 5008 	str.w	r5, [r3, r8]
  tp->realprio  = prio;
 800499c:	f649 4efc 	movw	lr, #40188	; 0x9cfc
  tp->prio      = prio;
 80049a0:	2180      	movs	r1, #128	; 0x80
  tp->epending  = (eventmask_t)0;
 80049a2:	f649 48f4 	movw	r8, #40180	; 0x9cf4
  tp->prio      = prio;
 80049a6:	f843 100c 	str.w	r1, [r3, ip]
  tp->refs      = (trefs_t)1;
 80049aa:	f649 4ce2 	movw	ip, #40162	; 0x9ce2
  tp->epending  = (eventmask_t)0;
 80049ae:	f843 5008 	str.w	r5, [r3, r8]
  tp->realprio  = prio;
 80049b2:	f843 100e 	str.w	r1, [r3, lr]
  tp->refs      = (trefs_t)1;
 80049b6:	f04f 0801 	mov.w	r8, #1
  tp->name      = name;
 80049ba:	f649 41d8 	movw	r1, #40152	; 0x9cd8
  tp->refs      = (trefs_t)1;
 80049be:	f803 800c 	strb.w	r8, [r3, ip]
  tp->name      = name;
 80049c2:	f8df c114 	ldr.w	ip, [pc, #276]	; 8004ad8 <main+0x6c8>
 80049c6:	f843 c001 	str.w	ip, [r3, r1]
  REG_INSERT(tp);
 80049ca:	f649 4cd0 	movw	ip, #40144	; 0x9cd0
  tlp->next = (thread_t *)tlp;
 80049ce:	f649 41e8 	movw	r1, #40168	; 0x9ce8
 80049d2:	f843 200c 	str.w	r2, [r3, ip]
 80049d6:	60d0      	str	r0, [r2, #12]
 80049d8:	f100 0228 	add.w	r2, r0, #40	; 0x28
 80049dc:	505a      	str	r2, [r3, r1]
  tqp->next = (thread_t *)tqp;
 80049de:	f649 4cec 	movw	ip, #40172	; 0x9cec
  tqp->prev = (thread_t *)tqp;
 80049e2:	f649 41f0 	movw	r1, #40176	; 0x9cf0
  tqp->next = (thread_t *)tqp;
 80049e6:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 80049ea:	f843 200c 	str.w	r2, [r3, ip]
  tqp->prev = (thread_t *)tqp;
 80049ee:	505a      	str	r2, [r3, r1]
 80049f0:	6120      	str	r0, [r4, #16]
  chSchWakeupS(tp, MSG_OK);
 80049f2:	f7fc fedd 	bl	80017b0 <chSchWakeupS.constprop.0>
 80049f6:	f385 8811 	msr	BASEPRI, r5
 80049fa:	4b32      	ldr	r3, [pc, #200]	; (8004ac4 <main+0x6b4>)
 80049fc:	601b      	str	r3, [r3, #0]
 80049fe:	f387 8811 	msr	BASEPRI, r7
  esp->next     = elp;
 8004a02:	aa01      	add	r2, sp, #4
  elp->next     = esp->next;
 8004a04:	6819      	ldr	r1, [r3, #0]
  esp->next     = elp;
 8004a06:	601a      	str	r2, [r3, #0]
  elp->wflags   = wflags;
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->listener = currp;
 8004a0c:	6963      	ldr	r3, [r4, #20]
  elp->events   = events;
 8004a0e:	f8cd 800c 	str.w	r8, [sp, #12]
  elp->flags    = (eventflags_t)0;
 8004a12:	9504      	str	r5, [sp, #16]
  elp->next     = esp->next;
 8004a14:	9101      	str	r1, [sp, #4]
  elp->listener = currp;
 8004a16:	9302      	str	r3, [sp, #8]
  elp->wflags   = wflags;
 8004a18:	9005      	str	r0, [sp, #20]
 8004a1a:	f385 8811 	msr	BASEPRI, r5
 8004a1e:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004adc <main+0x6cc>
  chMtxLockS(mp);
 8004a22:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004ae0 <main+0x6d0>
  thread_t *shelltp = NULL;
 8004a26:	46ab      	mov	fp, r5
 8004a28:	463d      	mov	r5, r7
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
                                    "shell", NORMALPRIO + 1,
                                    shellThread, (void *)&shell_cfg1);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 8004a2a:	465f      	mov	r7, fp
    if (!shelltp)
 8004a2c:	f1bb 0f00 	cmp.w	fp, #0
 8004a30:	d01b      	beq.n	8004a6a <main+0x65a>
    else if (chThdTerminatedX(shelltp)) {
 8004a32:	f89b 3020 	ldrb.w	r3, [fp, #32]
 8004a36:	2b0f      	cmp	r3, #15
 8004a38:	f000 8096 	beq.w	8004b68 <main+0x758>
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8004a3c:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8004a40:	f385 8811 	msr	BASEPRI, r5
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8004a44:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8004a48:	07da      	lsls	r2, r3, #31
 8004a4a:	f140 8093 	bpl.w	8004b74 <main+0x764>
 8004a4e:	f06f 0201 	mvn.w	r2, #1
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8004a52:	4013      	ands	r3, r2
 8004a54:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 8004a58:	f387 8811 	msr	BASEPRI, r7
    }
#endif
    /* Waiting for an exit event then freeing terminated shells.*/
    chEvtWaitAny(EVENT_MASK(0));
    if (chThdTerminatedX(shelltp)) {
 8004a5c:	f89b 3020 	ldrb.w	r3, [fp, #32]
 8004a60:	2b0f      	cmp	r3, #15
 8004a62:	d1e3      	bne.n	8004a2c <main+0x61c>
      chThdRelease(shelltp);
 8004a64:	4658      	mov	r0, fp
 8004a66:	f7ff fc5b 	bl	8004320 <chThdRelease>
 8004a6a:	f385 8811 	msr	BASEPRI, r5
 8004a6e:	4640      	mov	r0, r8
 8004a70:	f7fc fee6 	bl	8001840 <chMtxLockS>
 8004a74:	f387 8811 	msr	BASEPRI, r7
  while (H_NEXT(qp) != NULL) {
 8004a78:	6871      	ldr	r1, [r6, #4]
 8004a7a:	2900      	cmp	r1, #0
 8004a7c:	d04b      	beq.n	8004b16 <main+0x706>
  qp = &heapp->header;
 8004a7e:	4812      	ldr	r0, [pc, #72]	; (8004ac8 <main+0x6b8>)
 8004a80:	4686      	mov	lr, r0
 8004a82:	e030      	b.n	8004ae6 <main+0x6d6>
 8004a84:	40023800 	.word	0x40023800
 8004a88:	e000e100 	.word	0xe000e100
 8004a8c:	40011000 	.word	0x40011000
 8004a90:	40011400 	.word	0x40011400
 8004a94:	40020000 	.word	0x40020000
 8004a98:	40020800 	.word	0x40020800
 8004a9c:	40020400 	.word	0x40020400
 8004aa0:	08006234 	.word	0x08006234
 8004aa4:	20000c40 	.word	0x20000c40
 8004aa8:	20000e9c 	.word	0x20000e9c
 8004aac:	080066ac 	.word	0x080066ac
 8004ab0:	080064c4 	.word	0x080064c4
 8004ab4:	08006578 	.word	0x08006578
 8004ab8:	20001860 	.word	0x20001860
 8004abc:	2000b4fc 	.word	0x2000b4fc
 8004ac0:	080002f1 	.word	0x080002f1
 8004ac4:	200017f8 	.word	0x200017f8
 8004ac8:	2000158c 	.word	0x2000158c
 8004acc:	08001621 	.word	0x08001621
 8004ad0:	08001581 	.word	0x08001581
 8004ad4:	08002d51 	.word	0x08002d51
 8004ad8:	08006268 	.word	0x08006268
 8004adc:	08006138 	.word	0x08006138
 8004ae0:	20001594 	.word	0x20001594
  while (H_NEXT(qp) != NULL) {
 8004ae4:	4619      	mov	r1, r3
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004ae6:	6848      	ldr	r0, [r1, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004ae8:	f101 030f 	add.w	r3, r1, #15
 8004aec:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004af0:	1c42      	adds	r2, r0, #1
 8004af2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004af6:	f1a3 0c08 	sub.w	ip, r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004afa:	eba2 0903 	sub.w	r9, r2, r3
 8004afe:	4594      	cmp	ip, r2
 8004b00:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8004b04:	d203      	bcs.n	8004b0e <main+0x6fe>
 8004b06:	f5b9 7f8c 	cmp.w	r9, #280	; 0x118
 8004b0a:	f200 80cd 	bhi.w	8004ca8 <main+0x898>
  while (H_NEXT(qp) != NULL) {
 8004b0e:	680b      	ldr	r3, [r1, #0]
 8004b10:	468e      	mov	lr, r1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e6      	bne.n	8004ae4 <main+0x6d4>
  H_UNLOCK(heapp);
 8004b16:	4640      	mov	r0, r8
 8004b18:	f7ff fb6a 	bl	80041f0 <chMtxUnlock>
  if (heapp->provider != NULL) {
 8004b1c:	6833      	ldr	r3, [r6, #0]
 8004b1e:	b333      	cbz	r3, 8004b6e <main+0x75e>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8004b20:	2208      	movs	r2, #8
 8004b22:	4611      	mov	r1, r2
 8004b24:	f640 00c8 	movw	r0, #2248	; 0x8c8
 8004b28:	4798      	blx	r3
    if (ahp != NULL) {
 8004b2a:	4681      	mov	r9, r0
 8004b2c:	b1f8      	cbz	r0, 8004b6e <main+0x75e>
      H_SIZE(hp) = size;
 8004b2e:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8004b32:	e940 6302 	strd	r6, r3, [r0, #-8]
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 8004b36:	f609 02c8 	addw	r2, r9, #2248	; 0x8c8
  thread_descriptor_t td = {
 8004b3a:	9208      	str	r2, [sp, #32]
 8004b3c:	4a79      	ldr	r2, [pc, #484]	; (8004d24 <main+0x914>)
 8004b3e:	920a      	str	r2, [sp, #40]	; 0x28
 8004b40:	2381      	movs	r3, #129	; 0x81
 8004b42:	4a79      	ldr	r2, [pc, #484]	; (8004d28 <main+0x918>)
 8004b44:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b46:	e9cd a906 	strd	sl, r9, [sp, #24]
 8004b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4c:	f385 8811 	msr	BASEPRI, r5
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8004b50:	a806      	add	r0, sp, #24
 8004b52:	f7fc f92d 	bl	8000db0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 8004b5c:	4683      	mov	fp, r0
  chSchWakeupS(tp, MSG_OK);
 8004b5e:	f7fc fe27 	bl	80017b0 <chSchWakeupS.constprop.0>
 8004b62:	f387 8811 	msr	BASEPRI, r7
 8004b66:	e769      	b.n	8004a3c <main+0x62c>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 8004b68:	4658      	mov	r0, fp
 8004b6a:	f7ff fbd9 	bl	8004320 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 8004b6e:	f04f 0b00 	mov.w	fp, #0
 8004b72:	e763      	b.n	8004a3c <main+0x62c>
    ctp->u.ewmask = events;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8004b7a:	200a      	movs	r0, #10
 8004b7c:	f7fc fe48 	bl	8001810 <chSchGoSleepS>
    m = ctp->epending & events;
 8004b80:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 8004b84:	f003 0201 	and.w	r2, r3, #1
 8004b88:	43d2      	mvns	r2, r2
 8004b8a:	e762      	b.n	8004a52 <main+0x642>
      rccEnableOTG_FS(true);
 8004b8c:	4b67      	ldr	r3, [pc, #412]	; (8004d2c <main+0x91c>)
  stm32_otg_t *otgp = usbp->otg;
 8004b8e:	f8d7 8054 	ldr.w	r8, [r7, #84]	; 0x54
      rccEnableOTG_FS(true);
 8004b92:	6b59      	ldr	r1, [r3, #52]	; 0x34
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004b94:	4a66      	ldr	r2, [pc, #408]	; (8004d30 <main+0x920>)
 8004b96:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004b9a:	6359      	str	r1, [r3, #52]	; 0x34
 8004b9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b9e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004ba2:	6559      	str	r1, [r3, #84]	; 0x54
 8004ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
      rccResetOTG_FS();
 8004ba6:	6959      	ldr	r1, [r3, #20]
 8004ba8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004bac:	6159      	str	r1, [r3, #20]
 8004bae:	6959      	ldr	r1, [r3, #20]
 8004bb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004bb4:	6159      	str	r1, [r3, #20]
 8004bb6:	695b      	ldr	r3, [r3, #20]
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8004bb8:	495e      	ldr	r1, [pc, #376]	; (8004d34 <main+0x924>)
 8004bba:	23e0      	movs	r3, #224	; 0xe0
 8004bbc:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004bc6:	6093      	str	r3, [r2, #8]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8004bc8:	4b5b      	ldr	r3, [pc, #364]	; (8004d38 <main+0x928>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8004bca:	f8c8 100c 	str.w	r1, [r8, #12]
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8004bce:	22c0      	movs	r2, #192	; 0xc0
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8004bd0:	f8c8 3800 	str.w	r3, [r8, #2048]	; 0x800
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8004bd4:	f44f 1334 	mov.w	r3, #2949120	; 0x2d0000
    otgp->PCGCCTL = 0;
 8004bd8:	f8c8 ae00 	str.w	sl, [r8, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8004bdc:	f8c8 2000 	str.w	r2, [r8]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8004be0:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8004be4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	dafb      	bge.n	8004be4 <main+0x7d4>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f8c8 3010 	str.w	r3, [r8, #16]
  chSysPolledDelayX(cycles);
 8004bf2:	200c      	movs	r0, #12
 8004bf4:	f7fc f9c4 	bl	8000f80 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8004bf8:	f8d8 5010 	ldr.w	r5, [r8, #16]
 8004bfc:	f015 0501 	ands.w	r5, r5, #1
 8004c00:	d1fa      	bne.n	8004bf8 <main+0x7e8>
 8004c02:	2012      	movs	r0, #18
 8004c04:	f7fc f9bc 	bl	8000f80 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8004c08:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	dafb      	bge.n	8004c08 <main+0x7f8>
    otg_disable_ep(usbp);
 8004c10:	e9d7 1315 	ldrd	r1, r3, [r7, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004c14:	f8d3 e008 	ldr.w	lr, [r3, #8]
    otgp->GAHBCFG = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f8c8 3008 	str.w	r3, [r8, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c22:	e000      	b.n	8004c26 <main+0x816>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004c24:	464d      	mov	r5, r9
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004c26:	eb01 1245 	add.w	r2, r1, r5, lsl #5
 8004c2a:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8004c2c:	f8d2 c900 	ldr.w	ip, [r2, #2304]	; 0x900
 8004c30:	f1bc 0f00 	cmp.w	ip, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004c34:	f105 0901 	add.w	r9, r5, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8004c38:	da05      	bge.n	8004c46 <main+0x836>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8004c3a:	f8d2 c900 	ldr.w	ip, [r2, #2304]	; 0x900
 8004c3e:	f04c 4c80 	orr.w	ip, ip, #1073741824	; 0x40000000
 8004c42:	f8c2 c900 	str.w	ip, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8004c46:	f8d2 cb00 	ldr.w	ip, [r2, #2816]	; 0xb00
 8004c4a:	f1bc 0f00 	cmp.w	ip, #0
 8004c4e:	da05      	bge.n	8004c5c <main+0x84c>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8004c50:	f8d2 cb00 	ldr.w	ip, [r2, #2816]	; 0xb00
 8004c54:	f04c 4c80 	orr.w	ip, ip, #1073741824	; 0x40000000
 8004c58:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004c5c:	4575      	cmp	r5, lr
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004c5e:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004c62:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004c66:	d1dd      	bne.n	8004c24 <main+0x814>
    if (usbp->config->sof_cb == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68da      	ldr	r2, [r3, #12]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8004c6c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004c70:	f8c1 381c 	str.w	r3, [r1, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c8 3810 	str.w	r3, [r8, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 8004c7a:	f8c8 3814 	str.w	r3, [r8, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8004c7e:	f8c8 381c 	str.w	r3, [r8, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 8004c82:	2a00      	cmp	r2, #0
 8004c84:	d045      	beq.n	8004d12 <main+0x902>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8004c86:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <main+0x92c>)
 8004c88:	f8c8 3018 	str.w	r3, [r8, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 8004c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c90:	f8c8 3014 	str.w	r3, [r8, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8004c94:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	f8c8 3008 	str.w	r3, [r8, #8]
 8004ca0:	e645      	b.n	800492e <main+0x51e>
    fck = STM32_PCLK2 / config->speed;
 8004ca2:	f240 23d9 	movw	r3, #729	; 0x2d9
 8004ca6:	e599      	b.n	80047dc <main+0x3cc>
      if (ahp > hp) {
 8004ca8:	458c      	cmp	ip, r1
 8004caa:	4683      	mov	fp, r0
 8004cac:	4670      	mov	r0, lr
 8004cae:	d81b      	bhi.n	8004ce8 <main+0x8d8>
        if (H_PAGES(hp) == pages) {
 8004cb0:	f240 1319 	movw	r3, #281	; 0x119
 8004cb4:	459b      	cmp	fp, r3
 8004cb6:	d030      	beq.n	8004d1a <main+0x90a>
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004cb8:	f601 03d8 	addw	r3, r1, #2264	; 0x8d8
 8004cbc:	1ad2      	subs	r2, r2, r3
 8004cbe:	10d2      	asrs	r2, r2, #3
          H_NEXT(fp) = H_NEXT(hp);
 8004cc0:	680b      	ldr	r3, [r1, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004cc2:	f8c1 28d4 	str.w	r2, [r1, #2260]	; 0x8d4
          fp = H_BLOCK(hp) + pages;
 8004cc6:	f501 620d 	add.w	r2, r1, #2256	; 0x8d0
          H_NEXT(fp) = H_NEXT(hp);
 8004cca:	f8c1 38d0 	str.w	r3, [r1, #2256]	; 0x8d0
          H_NEXT(qp) = fp;
 8004cce:	468c      	mov	ip, r1
 8004cd0:	6002      	str	r2, [r0, #0]
      H_HEAP(hp) = heapp;
 8004cd2:	46e1      	mov	r9, ip
      H_SIZE(hp) = size;
 8004cd4:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8004cd8:	f8cc 3004 	str.w	r3, [ip, #4]
      H_UNLOCK(heapp);
 8004cdc:	4640      	mov	r0, r8
      H_HEAP(hp) = heapp;
 8004cde:	f849 6b08 	str.w	r6, [r9], #8
      H_UNLOCK(heapp);
 8004ce2:	f7ff fa85 	bl	80041f0 <chMtxUnlock>
 8004ce6:	e726      	b.n	8004b36 <main+0x726>
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004ce8:	f101 0208 	add.w	r2, r1, #8
 8004cec:	ebac 0202 	sub.w	r2, ip, r2
        if (bpages > pages) {
 8004cf0:	f240 1019 	movw	r0, #281	; 0x119
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004cf4:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 8004cf6:	4581      	cmp	r9, r0
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004cf8:	604a      	str	r2, [r1, #4]
        if (bpages > pages) {
 8004cfa:	d0ea      	beq.n	8004cd2 <main+0x8c2>
          H_NEXT(fp) = H_NEXT(hp);
 8004cfc:	6808      	ldr	r0, [r1, #0]
 8004cfe:	f8cc 08d0 	str.w	r0, [ip, #2256]	; 0x8d0
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004d02:	f5a9 728d 	sub.w	r2, r9, #282	; 0x11a
          fp = H_BLOCK(ahp) + pages;
 8004d06:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004d0a:	f8cc 28d4 	str.w	r2, [ip, #2260]	; 0x8d4
          H_NEXT(hp) = fp;
 8004d0e:	600b      	str	r3, [r1, #0]
 8004d10:	e7df      	b.n	8004cd2 <main+0x8c2>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <main+0x930>)
 8004d14:	f8c8 3018 	str.w	r3, [r8, #24]
 8004d18:	e7b8      	b.n	8004c8c <main+0x87c>
          H_NEXT(qp) = H_NEXT(hp);
 8004d1a:	680b      	ldr	r3, [r1, #0]
 8004d1c:	6003      	str	r3, [r0, #0]
 8004d1e:	468c      	mov	ip, r1
 8004d20:	e7d7      	b.n	8004cd2 <main+0x8c2>
 8004d22:	bf00      	nop
 8004d24:	08003b41 	.word	0x08003b41
 8004d28:	080064cc 	.word	0x080064cc
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	e000e100 	.word	0xe000e100
 8004d34:	40001440 	.word	0x40001440
 8004d38:	02200003 	.word	0x02200003
 8004d3c:	c0303c08 	.word	0xc0303c08
 8004d40:	c0303c00 	.word	0xc0303c00
	...

08004d50 <cmd_threads>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8004d50:	2900      	cmp	r1, #0
 8004d52:	dc4e      	bgt.n	8004df2 <cmd_threads+0xa2>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    shellUsage(chp, "threads");
    return;
  }
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8004d58:	4928      	ldr	r1, [pc, #160]	; (8004dfc <cmd_threads+0xac>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004d5a:	b089      	sub	sp, #36	; 0x24
 8004d5c:	4605      	mov	r5, r0
 8004d5e:	2620      	movs	r6, #32
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8004d60:	f7fd fd9e 	bl	80028a0 <chprintf>
 8004d64:	f386 8811 	msr	BASEPRI, r6
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8004d68:	4f25      	ldr	r7, [pc, #148]	; (8004e00 <cmd_threads+0xb0>)
 8004d6a:	68fc      	ldr	r4, [r7, #12]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8004d6c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004d70:	3301      	adds	r3, #1
 8004d72:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8004d76:	2300      	movs	r3, #0
 8004d78:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
 8004d7c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8004e0c <cmd_threads+0xbc>
#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
    uint32_t stklimit = (uint32_t)tp->wabase;
#else
    uint32_t stklimit = 0U;
#endif
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8004d80:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004e10 <cmd_threads+0xc0>
 8004d84:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8004e14 <cmd_threads+0xc4>
 8004d88:	9607      	str	r6, [sp, #28]
 8004d8a:	e00a      	b.n	8004da2 <cmd_threads+0x52>
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
    ntp->refs++;
 8004d8c:	f89b 3022 	ldrb.w	r3, [fp, #34]	; 0x22
 8004d90:	3301      	adds	r3, #1
 8004d92:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
 8004d96:	f382 8811 	msr	BASEPRI, r2
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f7ff fac0 	bl	8004320 <chThdRelease>
 8004da0:	465c      	mov	r4, fp
    uint32_t stklimit = (uint32_t)tp->wabase;
 8004da2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
             stklimit, (uint32_t)tp->ctx.sp, (uint32_t)tp,
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 8004da6:	f894 c020 	ldrb.w	ip, [r4, #32]
 8004daa:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8004dae:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 8004db2:	68a6      	ldr	r6, [r4, #8]
 8004db4:	6963      	ldr	r3, [r4, #20]
 8004db6:	9602      	str	r6, [sp, #8]
 8004db8:	2900      	cmp	r1, #0
 8004dba:	bf08      	it	eq
 8004dbc:	4649      	moveq	r1, r9
 8004dbe:	3801      	subs	r0, #1
 8004dc0:	e9cd c103 	strd	ip, r1, [sp, #12]
 8004dc4:	9001      	str	r0, [sp, #4]
 8004dc6:	9400      	str	r4, [sp, #0]
 8004dc8:	4641      	mov	r1, r8
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f7fd fd68 	bl	80028a0 <chprintf>
 8004dd0:	9b07      	ldr	r3, [sp, #28]
 8004dd2:	f383 8811 	msr	BASEPRI, r3
  ntp = tp->newer;
 8004dd6:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  if (ntp == (thread_t *)&ch.rlist) {
 8004dda:	45bb      	cmp	fp, r7
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	d1d4      	bne.n	8004d8c <cmd_threads+0x3c>
 8004de2:	f382 8811 	msr	BASEPRI, r2
  chThdRelease(tp);
 8004de6:	4620      	mov	r0, r4
             tp->name == NULL ? "" : tp->name);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}
 8004de8:	b009      	add	sp, #36	; 0x24
 8004dea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dee:	f7ff ba97 	b.w	8004320 <chThdRelease>
    shellUsage(chp, "threads");
 8004df2:	4a04      	ldr	r2, [pc, #16]	; (8004e04 <cmd_threads+0xb4>)
 8004df4:	4904      	ldr	r1, [pc, #16]	; (8004e08 <cmd_threads+0xb8>)
 8004df6:	f7fd bd53 	b.w	80028a0 <chprintf>
 8004dfa:	bf00      	nop
 8004dfc:	08006278 	.word	0x08006278
 8004e00:	200013b0 	.word	0x200013b0
 8004e04:	08006270 	.word	0x08006270
 8004e08:	08005fa0 	.word	0x08005fa0
 8004e0c:	08006508 	.word	0x08006508
 8004e10:	08005f00 	.word	0x08005f00
 8004e14:	080062b8 	.word	0x080062b8
	...

08004e20 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004e20:	4b68      	ldr	r3, [pc, #416]	; (8004fc4 <__early_init+0x1a4>)
  gpiop->PUPDR   = config->pupdr;
 8004e22:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 800500c <__early_init+0x1ec>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004e26:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8004e28:	4867      	ldr	r0, [pc, #412]	; (8004fc8 <__early_init+0x1a8>)
 8004e2a:	4968      	ldr	r1, [pc, #416]	; (8004fcc <__early_init+0x1ac>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004e2c:	f042 021f 	orr.w	r2, r2, #31
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8004e30:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004e32:	611a      	str	r2, [r3, #16]
 8004e34:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8004e36:	4d66      	ldr	r5, [pc, #408]	; (8004fd0 <__early_init+0x1b0>)
  gpiop->AFRL    = config->afrl;
 8004e38:	4f66      	ldr	r7, [pc, #408]	; (8004fd4 <__early_init+0x1b4>)
  gpiop->OTYPER  = config->otyper;
 8004e3a:	4c67      	ldr	r4, [pc, #412]	; (8004fd8 <__early_init+0x1b8>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004e3c:	f022 021f 	bic.w	r2, r2, #31
 8004e40:	611a      	str	r2, [r3, #16]
 8004e42:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8004e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e46:	f042 021f 	orr.w	r2, r2, #31
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8004e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e4e:	f042 021f 	orr.w	r2, r2, #31
 8004e52:	651a      	str	r2, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8004e54:	f44f 7280 	mov.w	r2, #256	; 0x100
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8004e58:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8004e5a:	606a      	str	r2, [r5, #4]
  gpiop->ODR     = config->odr;
 8004e5c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 8004e60:	f06f 0250 	mvn.w	r2, #80	; 0x50
 8004e64:	60aa      	str	r2, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8004e66:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->AFRH    = config->afrh;
 8004e6a:	f44f 222a 	mov.w	r2, #696320	; 0xaa000
  gpiop->ODR     = config->odr;
 8004e6e:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8004e70:	622f      	str	r7, [r5, #32]
  gpiop->MODER   = config->moder;
 8004e72:	4f5a      	ldr	r7, [pc, #360]	; (8004fdc <__early_init+0x1bc>)
  gpiop->AFRH    = config->afrh;
 8004e74:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8004e76:	2200      	movs	r2, #0
  gpiop->MODER   = config->moder;
 8004e78:	602f      	str	r7, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8004e7a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
 8004e7e:	4f58      	ldr	r7, [pc, #352]	; (8004fe0 <__early_init+0x1c0>)
  gpiop->OTYPER  = config->otyper;
 8004e80:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004e82:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8004e84:	60c7      	str	r7, [r0, #12]
  gpiop->MODER   = config->moder;
 8004e86:	2780      	movs	r7, #128	; 0x80
  gpiop->ODR     = config->odr;
 8004e88:	6146      	str	r6, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8004e8a:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8004e8c:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004e8e:	6007      	str	r7, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8004e90:	4f54      	ldr	r7, [pc, #336]	; (8004fe4 <__early_init+0x1c4>)
  gpiop->OTYPER  = config->otyper;
 8004e92:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004e94:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8004e96:	60cf      	str	r7, [r1, #12]
  gpiop->MODER   = config->moder;
 8004e98:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->ODR     = config->odr;
 8004e9c:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004e9e:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004ea0:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004ea2:	600f      	str	r7, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8004ea4:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 8004ea8:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
 8004eac:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004eae:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8004eb0:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
 8004eb2:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8004eb4:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8004eb6:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004eb8:	6022      	str	r2, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8004eba:	f8c0 2c04 	str.w	r2, [r0, #3076]	; 0xc04
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8004ebe:	f5a4 34ce 	sub.w	r4, r4, #105472	; 0x19c00
  gpiop->OSPEEDR = config->ospeedr;
 8004ec2:	f8c0 5c08 	str.w	r5, [r0, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 8004ec6:	f8c0 7c0c 	str.w	r7, [r0, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 8004eca:	f8c0 6c14 	str.w	r6, [r0, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 8004ece:	f8c0 2c20 	str.w	r2, [r0, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 8004ed2:	f8c0 2c24 	str.w	r2, [r0, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 8004ed6:	f8c0 2c00 	str.w	r2, [r0, #3072]	; 0xc00
  gpiop->PUPDR   = config->pupdr;
 8004eda:	4843      	ldr	r0, [pc, #268]	; (8004fe8 <__early_init+0x1c8>)
  gpiop->OTYPER  = config->otyper;
 8004edc:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004ede:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8004ee0:	60c8      	str	r0, [r1, #12]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8004ee2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8004ee6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  gpiop->ODR     = config->odr;
 8004eea:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004eec:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004eee:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004ef0:	600a      	str	r2, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8004ef2:	641d      	str	r5, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8004ef4:	6020      	str	r0, [r4, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	0796      	lsls	r6, r2, #30
 8004f02:	d5fc      	bpl.n	8004efe <__early_init+0xde>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8004f04:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004f06:	4a2f      	ldr	r2, [pc, #188]	; (8004fc4 <__early_init+0x1a4>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8004f08:	f021 0103 	bic.w	r1, r1, #3
 8004f0c:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004f0e:	6893      	ldr	r3, [r2, #8]
 8004f10:	f013 030c 	ands.w	r3, r3, #12
 8004f14:	d1fb      	bne.n	8004f0e <__early_init+0xee>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004f16:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8004f18:	492a      	ldr	r1, [pc, #168]	; (8004fc4 <__early_init+0x1a4>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004f1a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8004f1e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8004f20:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 8004f22:	6813      	ldr	r3, [r2, #0]
 8004f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f28:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8004f2a:	680b      	ldr	r3, [r1, #0]
 8004f2c:	039d      	lsls	r5, r3, #14
 8004f2e:	d5fc      	bpl.n	8004f2a <__early_init+0x10a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8004f30:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004f32:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <__early_init+0x1a4>)
  RCC->CSR |= RCC_CSR_LSION;
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004f3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004f3c:	0794      	lsls	r4, r2, #30
 8004f3e:	d5fc      	bpl.n	8004f3a <__early_init+0x11a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8004f40:	4a2a      	ldr	r2, [pc, #168]	; (8004fec <__early_init+0x1cc>)
 8004f42:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8004f44:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8004f46:	492a      	ldr	r1, [pc, #168]	; (8004ff0 <__early_init+0x1d0>)
  RCC->CR |= RCC_CR_PLLON;
 8004f48:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004f4c:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8004f4e:	684b      	ldr	r3, [r1, #4]
 8004f50:	0458      	lsls	r0, r3, #17
 8004f52:	d5fc      	bpl.n	8004f4e <__early_init+0x12e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8004f54:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <__early_init+0x1a4>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	0192      	lsls	r2, r2, #6
 8004f5a:	d5fc      	bpl.n	8004f56 <__early_init+0x136>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8004f5c:	4925      	ldr	r1, [pc, #148]	; (8004ff4 <__early_init+0x1d4>)
 8004f5e:	6099      	str	r1, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8004f60:	4a25      	ldr	r2, [pc, #148]	; (8004ff8 <__early_init+0x1d8>)
    RCC->DCKCFGR = dckcfgr |
 8004f62:	2103      	movs	r1, #3
 8004f64:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <__early_init+0x1dc>)
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d01e      	beq.n	8004fae <__early_init+0x18e>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8004f70:	4b23      	ldr	r3, [pc, #140]	; (8005000 <__early_init+0x1e0>)
 8004f72:	f240 7202 	movw	r2, #1794	; 0x702
 8004f76:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8004f78:	4a21      	ldr	r2, [pc, #132]	; (8005000 <__early_init+0x1e0>)
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d1fa      	bne.n	8004f7a <__early_init+0x15a>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <__early_init+0x1a4>)
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	f042 0202 	orr.w	r2, r2, #2
 8004f8c:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	f002 020c 	and.w	r2, r2, #12
 8004f94:	2a08      	cmp	r2, #8
 8004f96:	d1fa      	bne.n	8004f8e <__early_init+0x16e>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8004f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f9e:	645a      	str	r2, [r3, #68]	; 0x44
 8004fa0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fa6:	665a      	str	r2, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8004fa8:	bcf0      	pop	{r4, r5, r6, r7}
 8004faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fac:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8004fae:	4a15      	ldr	r2, [pc, #84]	; (8005004 <__early_init+0x1e4>)
 8004fb0:	4b15      	ldr	r3, [pc, #84]	; (8005008 <__early_init+0x1e8>)
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d1db      	bne.n	8004f70 <__early_init+0x150>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <__early_init+0x1e0>)
 8004fba:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	e7da      	b.n	8004f78 <__early_init+0x158>
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40020400 	.word	0x40020400
 8004fcc:	40020800 	.word	0x40020800
 8004fd0:	40020000 	.word	0x40020000
 8004fd4:	55507700 	.word	0x55507700
 8004fd8:	40020c00 	.word	0x40020c00
 8004fdc:	2a80a9a0 	.word	0x2a80a9a0
 8004fe0:	55555455 	.word	0x55555455
 8004fe4:	01555555 	.word	0x01555555
 8004fe8:	55555550 	.word	0x55555550
 8004fec:	07415419 	.word	0x07415419
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	38881000 	.word	0x38881000
 8004ff8:	e0042000 	.word	0xe0042000
 8004ffc:	20006411 	.word	0x20006411
 8005000:	40023c00 	.word	0x40023c00
 8005004:	e000ed00 	.word	0xe000ed00
 8005008:	410fc241 	.word	0x410fc241
 800500c:	64150005 	.word	0x64150005

08005010 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8005010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8005014:	4c62      	ldr	r4, [pc, #392]	; (80051a0 <VectorD8+0x190>)
 8005016:	f8d4 6254 	ldr.w	r6, [r4, #596]	; 0x254
  uint16_t cr1 = u->CR1;
 800501a:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 800501e:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8005020:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8005022:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8005024:	d476      	bmi.n	8005114 <VectorD8+0x104>
 8005026:	2320      	movs	r3, #32
 8005028:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800502c:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8005030:	d044      	beq.n	80050bc <VectorD8+0xac>
  chEvtBroadcastFlagsI(esp, flags);
 8005032:	4f5c      	ldr	r7, [pc, #368]	; (80051a4 <VectorD8+0x194>)
  chThdDequeueNextI(tqp, msg);
 8005034:	f107 0908 	add.w	r9, r7, #8
 8005038:	e008      	b.n	800504c <VectorD8+0x3c>
    if (sr & USART_SR_RXNE)
 800503a:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800503c:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8005040:	d41e      	bmi.n	8005080 <VectorD8+0x70>
    sr = u->SR;
 8005042:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005044:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8005048:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800504a:	d037      	beq.n	80050bc <VectorD8+0xac>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800504c:	072b      	lsls	r3, r5, #28
 800504e:	d0f4      	beq.n	800503a <VectorD8+0x2a>
    sts |= SD_OVERRUN_ERROR;
 8005050:	f015 0f08 	tst.w	r5, #8
 8005054:	bf0c      	ite	eq
 8005056:	2100      	moveq	r1, #0
 8005058:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800505a:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 800505c:	bf48      	it	mi
 800505e:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8005062:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8005064:	bf48      	it	mi
 8005066:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800506a:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 800506c:	bf48      	it	mi
 800506e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8005072:	4638      	mov	r0, r7
 8005074:	f7fb ff54 	bl	8000f20 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8005078:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800507a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800507e:	d5e0      	bpl.n	8005042 <VectorD8+0x32>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8005080:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8005082:	f894 5258 	ldrb.w	r5, [r4, #600]	; 0x258
 8005086:	b3a3      	cbz	r3, 80050f2 <VectorD8+0xe2>
  if (!iqIsFullI(iqp)) {
 8005088:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800508c:	4293      	cmp	r3, r2
 800508e:	d038      	beq.n	8005102 <VectorD8+0xf2>
    iqp->q_counter++;
 8005090:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8005092:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8005094:	3201      	adds	r2, #1
 8005096:	ea05 050a 	and.w	r5, r5, sl
 800509a:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 800509c:	6221      	str	r1, [r4, #32]
 800509e:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 80050a0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d301      	bcc.n	80050ac <VectorD8+0x9c>
      iqp->q_wrptr = iqp->q_buffer;
 80050a8:	69a3      	ldr	r3, [r4, #24]
 80050aa:	6223      	str	r3, [r4, #32]
  chThdDequeueNextI(tqp, msg);
 80050ac:	4648      	mov	r0, r9
 80050ae:	f7fb ff27 	bl	8000f00 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 80050b2:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80050b4:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80050b8:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80050ba:	d1c7      	bne.n	800504c <VectorD8+0x3c>
 80050bc:	2300      	movs	r3, #0
 80050be:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80050c2:	f018 0f80 	tst.w	r8, #128	; 0x80
 80050c6:	d001      	beq.n	80050cc <VectorD8+0xbc>
 80050c8:	062a      	lsls	r2, r5, #24
 80050ca:	d432      	bmi.n	8005132 <VectorD8+0x122>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80050cc:	f018 0f40 	tst.w	r8, #64	; 0x40
 80050d0:	d00b      	beq.n	80050ea <VectorD8+0xda>
 80050d2:	066b      	lsls	r3, r5, #25
 80050d4:	d509      	bpl.n	80050ea <VectorD8+0xda>
 80050d6:	2320      	movs	r3, #32
 80050d8:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80050dc:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d043      	beq.n	800516c <VectorD8+0x15c>
 80050e4:	2300      	movs	r3, #0
 80050e6:	f383 8811 	msr	BASEPRI, r3
}
 80050ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80050ee:	f7fb bdef 	b.w	8000cd0 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 80050f2:	2104      	movs	r1, #4
 80050f4:	4638      	mov	r0, r7
 80050f6:	f7fb ff13 	bl	8000f20 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80050fa:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80050fe:	4293      	cmp	r3, r2
 8005100:	d1c6      	bne.n	8005090 <VectorD8+0x80>
 8005102:	6962      	ldr	r2, [r4, #20]
 8005104:	2a00      	cmp	r2, #0
 8005106:	d0c3      	beq.n	8005090 <VectorD8+0x80>
 8005108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800510c:	4638      	mov	r0, r7
 800510e:	f7fb ff07 	bl	8000f20 <chEvtBroadcastFlagsI>
 8005112:	e796      	b.n	8005042 <VectorD8+0x32>
 8005114:	2320      	movs	r3, #32
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800511e:	1d20      	adds	r0, r4, #4
 8005120:	f7fb fefe 	bl	8000f20 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8005124:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8005128:	6033      	str	r3, [r6, #0]
 800512a:	2300      	movs	r3, #0
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	e779      	b.n	8005026 <VectorD8+0x16>
 8005132:	2320      	movs	r3, #32
 8005134:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8005138:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800513c:	429a      	cmp	r2, r3
 800513e:	d022      	beq.n	8005186 <VectorD8+0x176>
    oqp->q_counter++;
 8005140:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8005142:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8005144:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8005146:	3201      	adds	r2, #1
 8005148:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800514a:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 800514c:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 800514e:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8005150:	d301      	bcc.n	8005156 <VectorD8+0x146>
      oqp->q_rdptr = oqp->q_buffer;
 8005152:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005154:	64a3      	str	r3, [r4, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8005156:	4814      	ldr	r0, [pc, #80]	; (80051a8 <VectorD8+0x198>)
 8005158:	f7fb fed2 	bl	8000f00 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 800515c:	6077      	str	r7, [r6, #4]
 800515e:	2300      	movs	r3, #0
 8005160:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8005164:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005168:	d0bf      	beq.n	80050ea <VectorD8+0xda>
 800516a:	e7b2      	b.n	80050d2 <VectorD8+0xc2>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800516c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0b8      	beq.n	80050e4 <VectorD8+0xd4>
  chEvtBroadcastFlagsI(esp, flags);
 8005172:	480c      	ldr	r0, [pc, #48]	; (80051a4 <VectorD8+0x194>)
 8005174:	2110      	movs	r1, #16
 8005176:	f7fb fed3 	bl	8000f20 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800517a:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800517e:	ea08 0303 	and.w	r3, r8, r3
 8005182:	60f3      	str	r3, [r6, #12]
 8005184:	e7ae      	b.n	80050e4 <VectorD8+0xd4>
  if (!oqIsEmptyI(oqp)) {
 8005186:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005188:	2a00      	cmp	r2, #0
 800518a:	d0d9      	beq.n	8005140 <VectorD8+0x130>
 800518c:	4805      	ldr	r0, [pc, #20]	; (80051a4 <VectorD8+0x194>)
 800518e:	2108      	movs	r1, #8
 8005190:	f7fb fec6 	bl	8000f20 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8005194:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8005198:	ea08 0303 	and.w	r3, r8, r3
 800519c:	60f3      	str	r3, [r6, #12]
 800519e:	e7de      	b.n	800515e <VectorD8+0x14e>
 80051a0:	20000c40 	.word	0x20000c40
 80051a4:	20000c44 	.word	0x20000c44
 80051a8:	20000c70 	.word	0x20000c70
 80051ac:	00000000 	.word	0x00000000

080051b0 <VectorB0>:
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 80051b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80051b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sr  = timp->SR;
 80051b8:	6903      	ldr	r3, [r0, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80051ba:	68c2      	ldr	r2, [r0, #12]
 80051bc:	4013      	ands	r3, r2
 80051be:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 80051c0:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 80051c2:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 80051c4:	6102      	str	r2, [r0, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 80051c6:	d403      	bmi.n	80051d0 <VectorB0+0x20>
}
 80051c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 80051cc:	f7fb bd80 	b.w	8000cd0 <_port_irq_epilogue>
 80051d0:	2320      	movs	r3, #32
 80051d2:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80051d6:	4d23      	ldr	r5, [pc, #140]	; (8005264 <VectorB0+0xb4>)
 80051d8:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80051da:	69ab      	ldr	r3, [r5, #24]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80051dc:	6a6a      	ldr	r2, [r5, #36]	; 0x24

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80051de:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 80051e0:	1abe      	subs	r6, r7, r2
 80051e2:	42b1      	cmp	r1, r6
 80051e4:	bf88      	it	hi
 80051e6:	f105 0918 	addhi.w	r9, r5, #24
 80051ea:	d825      	bhi.n	8005238 <VectorB0+0x88>
  STM32_ST_TIM->DIER = 0U;
 80051ec:	4604      	mov	r4, r0
 80051ee:	f105 0918 	add.w	r9, r5, #24
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80051f2:	f04f 0800 	mov.w	r8, #0
 80051f6:	2720      	movs	r7, #32
 80051f8:	e000      	b.n	80051fc <VectorB0+0x4c>
 80051fa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80051fc:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 80051fe:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005200:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8005202:	626a      	str	r2, [r5, #36]	; 0x24
      nowdelta -= vtp->delta;
 8005204:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 8005208:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800520a:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 800520e:	61a8      	str	r0, [r5, #24]
      vtp->func = NULL;
 8005210:	f8c3 800c 	str.w	r8, [r3, #12]
 8005214:	bf08      	it	eq
 8005216:	f8c4 800c 	streq.w	r8, [r4, #12]
 800521a:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800521e:	6918      	ldr	r0, [r3, #16]
 8005220:	4790      	blx	r2
 8005222:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8005226:	69ab      	ldr	r3, [r5, #24]
    }
    while (vtp->delta <= nowdelta);
 8005228:	6899      	ldr	r1, [r3, #8]
 800522a:	428e      	cmp	r6, r1
 800522c:	d2e5      	bcs.n	80051fa <VectorB0+0x4a>
  return (systime_t)STM32_ST_TIM->CNT;
 800522e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8005230:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8005232:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 8005234:	428e      	cmp	r6, r1
 8005236:	d2de      	bcs.n	80051f6 <VectorB0+0x46>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005238:	454b      	cmp	r3, r9
 800523a:	d00b      	beq.n	8005254 <VectorB0+0xa4>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 800523c:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 800523e:	626f      	str	r7, [r5, #36]	; 0x24
  ch.vtlist.next->delta -= nowdelta;
 8005240:	1bc9      	subs	r1, r1, r7
 8005242:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8005244:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8005248:	2a02      	cmp	r2, #2
 800524a:	bf2c      	ite	cs
 800524c:	18bf      	addcs	r7, r7, r2
 800524e:	3702      	addcc	r7, #2
 8005250:	609a      	str	r2, [r3, #8]
 8005252:	634f      	str	r7, [r1, #52]	; 0x34
 8005254:	2300      	movs	r3, #0
 8005256:	f383 8811 	msr	BASEPRI, r3
}
 800525a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800525e:	f7fb bd37 	b.w	8000cd0 <_port_irq_epilogue>
 8005262:	bf00      	nop
 8005264:	200013b0 	.word	0x200013b0
	...

08005270 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8005270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
 8005274:	4c9f      	ldr	r4, [pc, #636]	; (80054f4 <Vector14C+0x284>)
 8005276:	6d66      	ldr	r6, [r4, #84]	; 0x54
  sts  = otgp->GINTSTS;
 8005278:	6975      	ldr	r5, [r6, #20]
  sts &= otgp->GINTMSK;
 800527a:	69b3      	ldr	r3, [r6, #24]
 800527c:	401d      	ands	r5, r3
  if (sts & GINTSTS_USBRST) {
 800527e:	f415 5880 	ands.w	r8, r5, #4096	; 0x1000
  otgp->GINTSTS = sts;
 8005282:	6175      	str	r5, [r6, #20]
  if (sts & GINTSTS_USBRST) {
 8005284:	f040 8138 	bne.w	80054f8 <Vector14C+0x288>
  if (sts & GINTSTS_WKUPINT) {
 8005288:	2d00      	cmp	r5, #0
 800528a:	f2c0 80c2 	blt.w	8005412 <Vector14C+0x1a2>
  if (sts & GINTSTS_USBSUSP) {
 800528e:	0529      	lsls	r1, r5, #20
 8005290:	d538      	bpl.n	8005304 <Vector14C+0x94>
    otg_disable_ep(usbp);
 8005292:	e9d4 7315 	ldrd	r7, r3, [r4, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005296:	2100      	movs	r1, #0
 8005298:	f8d3 9008 	ldr.w	r9, [r3, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800529c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80052a0:	e000      	b.n	80052a4 <Vector14C+0x34>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80052a2:	4671      	mov	r1, lr
 80052a4:	eb07 1241 	add.w	r2, r7, r1, lsl #5
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80052a8:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80052aa:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80052ae:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80052b0:	f101 0e01 	add.w	lr, r1, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80052b4:	da05      	bge.n	80052c2 <Vector14C+0x52>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 80052b6:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80052ba:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80052be:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 80052c2:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 80052c6:	2800      	cmp	r0, #0
 80052c8:	da05      	bge.n	80052d6 <Vector14C+0x66>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 80052ca:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 80052ce:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80052d2:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80052d6:	4589      	cmp	r9, r1
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80052d8:	f8c3 c908 	str.w	ip, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80052dc:	f8c3 cb08 	str.w	ip, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80052e0:	d1df      	bne.n	80052a2 <Vector14C+0x32>
  usbp->saved_state = usbp->state;
 80052e2:	7822      	ldrb	r2, [r4, #0]
 80052e4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80052e8:	6863      	ldr	r3, [r4, #4]
  usbp->state       = USB_SUSPENDED;
 80052ea:	2205      	movs	r2, #5
 80052ec:	7022      	strb	r2, [r4, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80052ee:	681b      	ldr	r3, [r3, #0]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80052f0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80052f4:	f8c7 281c 	str.w	r2, [r7, #2076]	; 0x81c
 80052f8:	b113      	cbz	r3, 8005300 <Vector14C+0x90>
 80052fa:	487e      	ldr	r0, [pc, #504]	; (80054f4 <Vector14C+0x284>)
 80052fc:	2104      	movs	r1, #4
 80052fe:	4798      	blx	r3
  usbp->transmitting  = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	60a3      	str	r3, [r4, #8]
  if (sts & GINTSTS_ENUMDNE) {
 8005304:	04aa      	lsls	r2, r5, #18
 8005306:	d50c      	bpl.n	8005322 <Vector14C+0xb2>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8005308:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800530c:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8005310:	68f3      	ldr	r3, [r6, #12]
 8005312:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8005316:	bf0c      	ite	eq
 8005318:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 800531c:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 8005320:	60f3      	str	r3, [r6, #12]
  if (sts & GINTSTS_SOF) {
 8005322:	072b      	lsls	r3, r5, #28
 8005324:	d429      	bmi.n	800537a <Vector14C+0x10a>
  if (sts & GINTSTS_IISOIXFR) {
 8005326:	02ef      	lsls	r7, r5, #11
 8005328:	d42f      	bmi.n	800538a <Vector14C+0x11a>
  if (sts & GINTSTS_IISOOXFR) {
 800532a:	02a8      	lsls	r0, r5, #10
 800532c:	f100 80b6 	bmi.w	800549c <Vector14C+0x22c>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 8005330:	06eb      	lsls	r3, r5, #27
 8005332:	f100 8088 	bmi.w	8005446 <Vector14C+0x1d6>
  if (sts & GINTSTS_OEPINT) {
 8005336:	0329      	lsls	r1, r5, #12
  src = otgp->DAINT;
 8005338:	f8d6 4818 	ldr.w	r4, [r6, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 800533c:	d50b      	bpl.n	8005356 <Vector14C+0xe6>
    if (src & (1 << 16))
 800533e:	03e2      	lsls	r2, r4, #15
 8005340:	f100 8194 	bmi.w	800566c <Vector14C+0x3fc>
    if (src & (1 << 17))
 8005344:	03a3      	lsls	r3, r4, #14
 8005346:	f100 8187 	bmi.w	8005658 <Vector14C+0x3e8>
    if (src & (1 << 18))
 800534a:	0367      	lsls	r7, r4, #13
 800534c:	f100 818a 	bmi.w	8005664 <Vector14C+0x3f4>
    if (src & (1 << 19))
 8005350:	0326      	lsls	r6, r4, #12
 8005352:	f100 8149 	bmi.w	80055e8 <Vector14C+0x378>
  if (sts & GINTSTS_IEPINT) {
 8005356:	036d      	lsls	r5, r5, #13
 8005358:	d50b      	bpl.n	8005372 <Vector14C+0x102>
    if (src & (1 << 0))
 800535a:	07e0      	lsls	r0, r4, #31
 800535c:	f100 8192 	bmi.w	8005684 <Vector14C+0x414>
    if (src & (1 << 1))
 8005360:	07a1      	lsls	r1, r4, #30
 8005362:	f100 818b 	bmi.w	800567c <Vector14C+0x40c>
    if (src & (1 << 2))
 8005366:	0762      	lsls	r2, r4, #29
 8005368:	f100 8184 	bmi.w	8005674 <Vector14C+0x404>
    if (src & (1 << 3))
 800536c:	0723      	lsls	r3, r4, #28
 800536e:	f100 8142 	bmi.w	80055f6 <Vector14C+0x386>
}
 8005372:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8005376:	f7fb bcab 	b.w	8000cd0 <_port_irq_epilogue>
    _usb_isr_invoke_sof_cb(usbp);
 800537a:	6863      	ldr	r3, [r4, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0d1      	beq.n	8005326 <Vector14C+0xb6>
 8005382:	485c      	ldr	r0, [pc, #368]	; (80054f4 <Vector14C+0x284>)
 8005384:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 8005386:	02ef      	lsls	r7, r5, #11
 8005388:	d5cf      	bpl.n	800532a <Vector14C+0xba>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800538a:	2100      	movs	r1, #0
  stm32_otg_t *otgp = usbp->otg;
 800538c:	f8d4 b054 	ldr.w	fp, [r4, #84]	; 0x54
      _usb_isr_invoke_in_cb(usbp, ep);
 8005390:	f8df a160 	ldr.w	sl, [pc, #352]	; 80054f4 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8005394:	460f      	mov	r7, r1
      _usb_isr_invoke_in_cb(usbp, ep);
 8005396:	f04f 0901 	mov.w	r9, #1
 800539a:	e006      	b.n	80053aa <Vector14C+0x13a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800539c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800539e:	3701      	adds	r7, #1
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	b2ff      	uxtb	r7, r7
 80053a4:	429f      	cmp	r7, r3
 80053a6:	4639      	mov	r1, r7
 80053a8:	d8bf      	bhi.n	800532a <Vector14C+0xba>
 80053aa:	eb0b 1347 	add.w	r3, fp, r7, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 80053ae:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80053b2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80053b6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80053ba:	d1ef      	bne.n	800539c <Vector14C+0x12c>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 80053bc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 80053c0:	2a00      	cmp	r2, #0
 80053c2:	daeb      	bge.n	800539c <Vector14C+0x12c>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 80053c4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80053c8:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 80053cc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 80053d0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	dbfb      	blt.n	80053d0 <Vector14C+0x160>
      otg_txfifo_flush(usbp, ep);
 80053d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80053da:	0189      	lsls	r1, r1, #6
 80053dc:	f041 0120 	orr.w	r1, r1, #32
 80053e0:	6111      	str	r1, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80053e2:	6913      	ldr	r3, [r2, #16]
 80053e4:	0699      	lsls	r1, r3, #26
 80053e6:	d4fc      	bmi.n	80053e2 <Vector14C+0x172>
  chSysPolledDelayX(cycles);
 80053e8:	2012      	movs	r0, #18
 80053ea:	f7fb fdc9 	bl	8000f80 <chSysPolledDelayX>
      _usb_isr_invoke_in_cb(usbp, ep);
 80053ee:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 80053f2:	8921      	ldrh	r1, [r4, #8]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	fa09 f307 	lsl.w	r3, r9, r7
 80053fa:	6892      	ldr	r2, [r2, #8]
 80053fc:	ea21 0303 	bic.w	r3, r1, r3
 8005400:	8123      	strh	r3, [r4, #8]
 8005402:	b112      	cbz	r2, 800540a <Vector14C+0x19a>
 8005404:	4639      	mov	r1, r7
 8005406:	4650      	mov	r0, sl
 8005408:	4790      	blx	r2
      otg_txfifo_handler(usbp, ep);
 800540a:	4638      	mov	r0, r7
 800540c:	f7fb fa08 	bl	8000820 <otg_txfifo_handler.constprop.0>
 8005410:	e7c4      	b.n	800539c <Vector14C+0x12c>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8005412:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 8005416:	0798      	lsls	r0, r3, #30
 8005418:	f040 80df 	bne.w	80055da <Vector14C+0x36a>
  usbp->state = usbp->saved_state;
 800541c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8005420:	6862      	ldr	r2, [r4, #4]
  usbp->state = usbp->saved_state;
 8005422:	7023      	strb	r3, [r4, #0]
    otgp->DCTL &= ~DCTL_RWUSIG;
 8005424:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 8005432:	2a00      	cmp	r2, #0
 8005434:	f43f af2b 	beq.w	800528e <Vector14C+0x1e>
 8005438:	2105      	movs	r1, #5
 800543a:	482e      	ldr	r0, [pc, #184]	; (80054f4 <Vector14C+0x284>)
 800543c:	4790      	blx	r2
  if (sts & GINTSTS_USBSUSP) {
 800543e:	0529      	lsls	r1, r5, #20
 8005440:	f57f af60 	bpl.w	8005304 <Vector14C+0x94>
 8005444:	e725      	b.n	8005292 <Vector14C+0x22>
  sts = usbp->otg->GRXSTSP;
 8005446:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005448:	6a0b      	ldr	r3, [r1, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 800544a:	f403 10f0 	and.w	r0, r3, #1966080	; 0x1e0000
 800544e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8005452:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8005456:	f003 030f 	and.w	r3, r3, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 800545a:	f000 80d3 	beq.w	8005604 <Vector14C+0x394>
 800545e:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
 8005462:	f47f af68 	bne.w	8005336 <Vector14C+0xc6>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8005466:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	6a18      	ldr	r0, [r3, #32]
  while (i < n) {
 800546e:	2a00      	cmp	r2, #0
 8005470:	f43f af61 	beq.w	8005336 <Vector14C+0xc6>
      w = *fifop;
 8005474:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
  size_t i = 0;
 8005478:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 800547a:	079f      	lsls	r7, r3, #30
      w = *fifop;
 800547c:	bf08      	it	eq
 800547e:	f8d4 8000 	ldreq.w	r8, [r4]
    if (i < max) {
 8005482:	2b07      	cmp	r3, #7
      *buf++ = (uint8_t)w;
 8005484:	4601      	mov	r1, r0
    i++;
 8005486:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 800548a:	d804      	bhi.n	8005496 <Vector14C+0x226>
      *buf++ = (uint8_t)w;
 800548c:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 8005490:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 8005494:	4608      	mov	r0, r1
  while (i < n) {
 8005496:	429a      	cmp	r2, r3
 8005498:	d1ef      	bne.n	800547a <Vector14C+0x20a>
 800549a:	e74c      	b.n	8005336 <Vector14C+0xc6>
  stm32_otg_t *otgp = usbp->otg;
 800549c:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
      _usb_isr_invoke_out_cb(usbp, ep);
 80054a0:	f8df b050 	ldr.w	fp, [pc, #80]	; 80054f4 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80054a4:	2700      	movs	r7, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 80054a6:	f04f 0a01 	mov.w	sl, #1
 80054aa:	e006      	b.n	80054ba <Vector14C+0x24a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80054ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054ae:	3701      	adds	r7, #1
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	b2ff      	uxtb	r7, r7
 80054b4:	429f      	cmp	r7, r3
 80054b6:	f63f af3b 	bhi.w	8005330 <Vector14C+0xc0>
 80054ba:	eb09 1247 	add.w	r2, r9, r7, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 80054be:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80054c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80054c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054ca:	d1ef      	bne.n	80054ac <Vector14C+0x23c>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 80054cc:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 80054d0:	2b00      	cmp	r3, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 80054d2:	eb04 0087 	add.w	r0, r4, r7, lsl #2
 80054d6:	fa0a f107 	lsl.w	r1, sl, r7
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 80054da:	dae7      	bge.n	80054ac <Vector14C+0x23c>
      _usb_isr_invoke_out_cb(usbp, ep);
 80054dc:	68c2      	ldr	r2, [r0, #12]
 80054de:	8963      	ldrh	r3, [r4, #10]
 80054e0:	68d2      	ldr	r2, [r2, #12]
 80054e2:	ea23 0301 	bic.w	r3, r3, r1
 80054e6:	4658      	mov	r0, fp
 80054e8:	4639      	mov	r1, r7
 80054ea:	8163      	strh	r3, [r4, #10]
 80054ec:	2a00      	cmp	r2, #0
 80054ee:	d0dd      	beq.n	80054ac <Vector14C+0x23c>
 80054f0:	4790      	blx	r2
 80054f2:	e7db      	b.n	80054ac <Vector14C+0x23c>
 80054f4:	2000132c 	.word	0x2000132c
  usbp->status        = 0;
 80054f8:	2300      	movs	r3, #0
  usbp->state         = USB_READY;
 80054fa:	2102      	movs	r1, #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80054fc:	2220      	movs	r2, #32
    usbp->epc[i] = NULL;
 80054fe:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8005502:	e9c4 3305 	strd	r3, r3, [r4, #20]
  usbp->status        = 0;
 8005506:	64e3      	str	r3, [r4, #76]	; 0x4c
  usbp->ep0state = USB_EP0_STP_WAITING;
 8005508:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  usbp->transmitting  = 0;
 800550c:	60a3      	str	r3, [r4, #8]
  usbp->state         = USB_READY;
 800550e:	7021      	strb	r1, [r4, #0]
 8005510:	6132      	str	r2, [r6, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8005512:	6935      	ldr	r5, [r6, #16]
 8005514:	f015 0520 	ands.w	r5, r5, #32
 8005518:	d1fb      	bne.n	8005512 <Vector14C+0x2a2>
 800551a:	2012      	movs	r0, #18
 800551c:	f7fb fd30 	bl	8000f80 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005520:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
  otgp->DIEPEMPMSK = 0;
 8005524:	f8c6 5834 	str.w	r5, [r6, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8005528:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800552c:	f8dc 7008 	ldr.w	r7, [ip, #8]
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8005530:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8005534:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8005538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800553c:	eb06 1345 	add.w	r3, r6, r5, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005540:	42af      	cmp	r7, r5
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8005542:	f8c3 0900 	str.w	r0, [r3, #2304]	; 0x900
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005546:	f105 0501 	add.w	r5, r5, #1
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800554a:	f8c3 0b00 	str.w	r0, [r3, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800554e:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8005552:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005556:	d1f1      	bne.n	800553c <Vector14C+0x2cc>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8005558:	f8dc 3000 	ldr.w	r3, [ip]
 800555c:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800555e:	f8dc 2000 	ldr.w	r2, [ip]
  otg_rxfifo_flush(usbp);
 8005562:	6d63      	ldr	r3, [r4, #84]	; 0x54
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8005564:	6272      	str	r2, [r6, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8005566:	2210      	movs	r2, #16
 8005568:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 800556a:	691d      	ldr	r5, [r3, #16]
 800556c:	f015 0510 	ands.w	r5, r5, #16
 8005570:	d1fb      	bne.n	800556a <Vector14C+0x2fa>
 8005572:	2012      	movs	r0, #18
 8005574:	f7fb fd04 	bl	8000f80 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8005578:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800557c:	6861      	ldr	r1, [r4, #4]
  next = usbp->pmnext;
 800557e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005580:	680f      	ldr	r7, [r1, #0]
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8005582:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005586:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800558a:	69b3      	ldr	r3, [r6, #24]
 800558c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005590:	f043 0310 	orr.w	r3, r3, #16
 8005594:	61b3      	str	r3, [r6, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8005596:	2309      	movs	r3, #9
 8005598:	f8c6 3810 	str.w	r3, [r6, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800559c:	f8c6 3814 	str.w	r3, [r6, #2068]	; 0x814
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 80055a0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80055a4:	f8c6 3b10 	str.w	r3, [r6, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 80055a8:	4b38      	ldr	r3, [pc, #224]	; (800568c <Vector14C+0x41c>)
 80055aa:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 80055ae:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 80055b2:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
  usbp->pmnext += size;
 80055b6:	f102 0310 	add.w	r3, r2, #16
 80055ba:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 80055bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  usbp->epc[0] = &ep0config;
 80055c0:	4b33      	ldr	r3, [pc, #204]	; (8005690 <Vector14C+0x420>)
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 80055c2:	62b2      	str	r2, [r6, #40]	; 0x28
  usbp->epc[0] = &ep0config;
 80055c4:	60e3      	str	r3, [r4, #12]
 80055c6:	2f00      	cmp	r7, #0
 80055c8:	f43f aed3 	beq.w	8005372 <Vector14C+0x102>
 80055cc:	4629      	mov	r1, r5
 80055ce:	4831      	ldr	r0, [pc, #196]	; (8005694 <Vector14C+0x424>)
 80055d0:	47b8      	blx	r7
}
 80055d2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80055d6:	f7fb bb7b 	b.w	8000cd0 <_port_irq_epilogue>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 80055da:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 80055de:	f023 0303 	bic.w	r3, r3, #3
 80055e2:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
 80055e6:	e719      	b.n	800541c <Vector14C+0x1ac>
      otg_epout_handler(usbp, 3);
 80055e8:	2003      	movs	r0, #3
 80055ea:	f7fb fdb9 	bl	8001160 <otg_epout_handler.constprop.0>
  if (sts & GINTSTS_IEPINT) {
 80055ee:	036d      	lsls	r5, r5, #13
 80055f0:	f57f aebf 	bpl.w	8005372 <Vector14C+0x102>
 80055f4:	e6b1      	b.n	800535a <Vector14C+0xea>
      otg_epin_handler(usbp, 3);
 80055f6:	2003      	movs	r0, #3
 80055f8:	f7fb fd2a 	bl	8001050 <otg_epin_handler.constprop.0>
}
 80055fc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8005600:	f7fb bb66 	b.w	8000cd0 <_port_irq_epilogue>
                            usbp->epc[ep]->out_state->rxbuf,
 8005604:	f103 0a02 	add.w	sl, r3, #2
 8005608:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8005610:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	eba0 0e09 	sub.w	lr, r0, r9
  while (i < n) {
 800561a:	b1c2      	cbz	r2, 800564e <Vector14C+0x3de>
      w = *fifop;
 800561c:	f501 5c80 	add.w	ip, r1, #4096	; 0x1000
  size_t i = 0;
 8005620:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 8005622:	0798      	lsls	r0, r3, #30
      w = *fifop;
 8005624:	bf08      	it	eq
 8005626:	f8dc 8000 	ldreq.w	r8, [ip]
    if (i < max) {
 800562a:	459e      	cmp	lr, r3
      *buf++ = (uint8_t)w;
 800562c:	4639      	mov	r1, r7
    i++;
 800562e:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 8005632:	d904      	bls.n	800563e <Vector14C+0x3ce>
      *buf++ = (uint8_t)w;
 8005634:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 8005638:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 800563c:	460f      	mov	r7, r1
  while (i < n) {
 800563e:	429a      	cmp	r2, r3
 8005640:	d1ef      	bne.n	8005622 <Vector14C+0x3b2>
 8005642:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8005646:	6863      	ldr	r3, [r4, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
 800564e:	4417      	add	r7, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8005650:	444a      	add	r2, r9
 8005652:	e9c3 2701 	strd	r2, r7, [r3, #4]
 8005656:	e66e      	b.n	8005336 <Vector14C+0xc6>
      otg_epout_handler(usbp, 1);
 8005658:	2001      	movs	r0, #1
 800565a:	f7fb fd81 	bl	8001160 <otg_epout_handler.constprop.0>
    if (src & (1 << 18))
 800565e:	0367      	lsls	r7, r4, #13
 8005660:	f57f ae76 	bpl.w	8005350 <Vector14C+0xe0>
      otg_epout_handler(usbp, 2);
 8005664:	2002      	movs	r0, #2
 8005666:	f7fb fd7b 	bl	8001160 <otg_epout_handler.constprop.0>
 800566a:	e671      	b.n	8005350 <Vector14C+0xe0>
      otg_epout_handler(usbp, 0);
 800566c:	2000      	movs	r0, #0
 800566e:	f7fb fd77 	bl	8001160 <otg_epout_handler.constprop.0>
 8005672:	e667      	b.n	8005344 <Vector14C+0xd4>
      otg_epin_handler(usbp, 2);
 8005674:	2002      	movs	r0, #2
 8005676:	f7fb fceb 	bl	8001050 <otg_epin_handler.constprop.0>
 800567a:	e677      	b.n	800536c <Vector14C+0xfc>
      otg_epin_handler(usbp, 1);
 800567c:	2001      	movs	r0, #1
 800567e:	f7fb fce7 	bl	8001050 <otg_epin_handler.constprop.0>
 8005682:	e670      	b.n	8005366 <Vector14C+0xf6>
      otg_epin_handler(usbp, 0);
 8005684:	2000      	movs	r0, #0
 8005686:	f7fb fce3 	bl	8001050 <otg_epin_handler.constprop.0>
 800568a:	e669      	b.n	8005360 <Vector14C+0xf0>
 800568c:	10008040 	.word	0x10008040
 8005690:	080063b0 	.word	0x080063b0
 8005694:	2000132c 	.word	0x2000132c
	...

080056a0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80056a0:	b4f0      	push	{r4, r5, r6, r7}
 80056a2:	4f14      	ldr	r7, [pc, #80]	; (80056f4 <__init_ram_areas+0x54>)
 80056a4:	4d14      	ldr	r5, [pc, #80]	; (80056f8 <__init_ram_areas+0x58>)
 80056a6:	4815      	ldr	r0, [pc, #84]	; (80056fc <__init_ram_areas+0x5c>)
 80056a8:	4b15      	ldr	r3, [pc, #84]	; (8005700 <__init_ram_areas+0x60>)
 80056aa:	4916      	ldr	r1, [pc, #88]	; (8005704 <__init_ram_areas+0x64>)
 80056ac:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80056b0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 80056b2:	4298      	cmp	r0, r3
 80056b4:	d911      	bls.n	80056da <__init_ram_areas+0x3a>
 80056b6:	3904      	subs	r1, #4
 80056b8:	461a      	mov	r2, r3
      *p = *tp;
 80056ba:	f851 4f04 	ldr.w	r4, [r1, #4]!
 80056be:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 80056c2:	4290      	cmp	r0, r2
 80056c4:	d8f9      	bhi.n	80056ba <__init_ram_areas+0x1a>
 80056c6:	1e42      	subs	r2, r0, #1
 80056c8:	1ad2      	subs	r2, r2, r3
 80056ca:	f022 0203 	bic.w	r2, r2, #3
 80056ce:	3204      	adds	r2, #4
 80056d0:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 80056d2:	429d      	cmp	r5, r3
 80056d4:	d903      	bls.n	80056de <__init_ram_areas+0x3e>
      *p = 0;
 80056d6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 80056da:	429d      	cmp	r5, r3
 80056dc:	d8fb      	bhi.n	80056d6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80056de:	4567      	cmp	r7, ip
 80056e0:	d005      	beq.n	80056ee <__init_ram_areas+0x4e>
 80056e2:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 80056e6:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 80056ea:	3710      	adds	r7, #16
 80056ec:	e7e1      	b.n	80056b2 <__init_ram_areas+0x12>
#endif
}
 80056ee:	bcf0      	pop	{r4, r5, r6, r7}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	08006444 	.word	0x08006444
 80056f8:	2000b56c 	.word	0x2000b56c
 80056fc:	2000b56c 	.word	0x2000b56c
 8005700:	2000b56c 	.word	0x2000b56c
 8005704:	08006c14 	.word	0x08006c14
	...

08005710 <__default_exit>:
  while (true) {
 8005710:	e7fe      	b.n	8005710 <__default_exit>
 8005712:	bf00      	nop
	...

08005720 <__late_init>:
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
	...

08005730 <__core_init>:
}
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop

08005734 <_strtol_l.isra.0>:
 8005734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005738:	4f40      	ldr	r7, [pc, #256]	; (800583c <_strtol_l.isra.0+0x108>)
 800573a:	4681      	mov	r9, r0
 800573c:	460d      	mov	r5, r1
 800573e:	4628      	mov	r0, r5
 8005740:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005744:	5d3e      	ldrb	r6, [r7, r4]
 8005746:	f016 0608 	ands.w	r6, r6, #8
 800574a:	d1f8      	bne.n	800573e <_strtol_l.isra.0+0xa>
 800574c:	2c2d      	cmp	r4, #45	; 0x2d
 800574e:	d04f      	beq.n	80057f0 <_strtol_l.isra.0+0xbc>
 8005750:	2c2b      	cmp	r4, #43	; 0x2b
 8005752:	bf0a      	itet	eq
 8005754:	f895 b000 	ldrbeq.w	fp, [r5]
 8005758:	46a3      	movne	fp, r4
 800575a:	1c85      	addeq	r5, r0, #2
 800575c:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8005760:	b11b      	cbz	r3, 800576a <_strtol_l.isra.0+0x36>
 8005762:	2b10      	cmp	r3, #16
 8005764:	d04b      	beq.n	80057fe <_strtol_l.isra.0+0xca>
 8005766:	469e      	mov	lr, r3
 8005768:	e004      	b.n	8005774 <_strtol_l.isra.0+0x40>
 800576a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800576e:	d050      	beq.n	8005812 <_strtol_l.isra.0+0xde>
 8005770:	230a      	movs	r3, #10
 8005772:	469e      	mov	lr, r3
 8005774:	2700      	movs	r7, #0
 8005776:	fbb8 fcfe 	udiv	ip, r8, lr
 800577a:	4638      	mov	r0, r7
 800577c:	fb0e 8a1c 	mls	sl, lr, ip, r8
 8005780:	e005      	b.n	800578e <_strtol_l.isra.0+0x5a>
 8005782:	d029      	beq.n	80057d8 <_strtol_l.isra.0+0xa4>
 8005784:	fb0e 4000 	mla	r0, lr, r0, r4
 8005788:	2701      	movs	r7, #1
 800578a:	f815 bb01 	ldrb.w	fp, [r5], #1
 800578e:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
 8005792:	2c09      	cmp	r4, #9
 8005794:	d905      	bls.n	80057a2 <_strtol_l.isra.0+0x6e>
 8005796:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
 800579a:	2c19      	cmp	r4, #25
 800579c:	d80b      	bhi.n	80057b6 <_strtol_l.isra.0+0x82>
 800579e:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	dd0f      	ble.n	80057c6 <_strtol_l.isra.0+0x92>
 80057a6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80057aa:	d0ee      	beq.n	800578a <_strtol_l.isra.0+0x56>
 80057ac:	4584      	cmp	ip, r0
 80057ae:	d2e8      	bcs.n	8005782 <_strtol_l.isra.0+0x4e>
 80057b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80057b4:	e7e9      	b.n	800578a <_strtol_l.isra.0+0x56>
 80057b6:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
 80057ba:	2c19      	cmp	r4, #25
 80057bc:	d803      	bhi.n	80057c6 <_strtol_l.isra.0+0x92>
 80057be:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
 80057c2:	42a3      	cmp	r3, r4
 80057c4:	dcef      	bgt.n	80057a6 <_strtol_l.isra.0+0x72>
 80057c6:	1c7b      	adds	r3, r7, #1
 80057c8:	d00b      	beq.n	80057e2 <_strtol_l.isra.0+0xae>
 80057ca:	b106      	cbz	r6, 80057ce <_strtol_l.isra.0+0x9a>
 80057cc:	4240      	negs	r0, r0
 80057ce:	b10a      	cbz	r2, 80057d4 <_strtol_l.isra.0+0xa0>
 80057d0:	bb77      	cbnz	r7, 8005830 <_strtol_l.isra.0+0xfc>
 80057d2:	6011      	str	r1, [r2, #0]
 80057d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d8:	45a2      	cmp	sl, r4
 80057da:	dad3      	bge.n	8005784 <_strtol_l.isra.0+0x50>
 80057dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80057e0:	e7d3      	b.n	800578a <_strtol_l.isra.0+0x56>
 80057e2:	2322      	movs	r3, #34	; 0x22
 80057e4:	f8c9 3000 	str.w	r3, [r9]
 80057e8:	b1fa      	cbz	r2, 800582a <_strtol_l.isra.0+0xf6>
 80057ea:	1e69      	subs	r1, r5, #1
 80057ec:	4640      	mov	r0, r8
 80057ee:	e7f0      	b.n	80057d2 <_strtol_l.isra.0+0x9e>
 80057f0:	f895 b000 	ldrb.w	fp, [r5]
 80057f4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80057f8:	1c85      	adds	r5, r0, #2
 80057fa:	2601      	movs	r6, #1
 80057fc:	e7b0      	b.n	8005760 <_strtol_l.isra.0+0x2c>
 80057fe:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8005802:	d1b0      	bne.n	8005766 <_strtol_l.isra.0+0x32>
 8005804:	7828      	ldrb	r0, [r5, #0]
 8005806:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800580a:	2858      	cmp	r0, #88	; 0x58
 800580c:	d006      	beq.n	800581c <_strtol_l.isra.0+0xe8>
 800580e:	469e      	mov	lr, r3
 8005810:	e7b0      	b.n	8005774 <_strtol_l.isra.0+0x40>
 8005812:	782b      	ldrb	r3, [r5, #0]
 8005814:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005818:	2b58      	cmp	r3, #88	; 0x58
 800581a:	d10b      	bne.n	8005834 <_strtol_l.isra.0+0x100>
 800581c:	f04f 0e10 	mov.w	lr, #16
 8005820:	f895 b001 	ldrb.w	fp, [r5, #1]
 8005824:	4673      	mov	r3, lr
 8005826:	3502      	adds	r5, #2
 8005828:	e7a4      	b.n	8005774 <_strtol_l.isra.0+0x40>
 800582a:	4640      	mov	r0, r8
 800582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005830:	4680      	mov	r8, r0
 8005832:	e7da      	b.n	80057ea <_strtol_l.isra.0+0xb6>
 8005834:	2308      	movs	r3, #8
 8005836:	469e      	mov	lr, r3
 8005838:	e79c      	b.n	8005774 <_strtol_l.isra.0+0x40>
 800583a:	bf00      	nop
 800583c:	080066d9 	.word	0x080066d9

08005840 <strtol>:
 8005840:	b430      	push	{r4, r5}
 8005842:	4c04      	ldr	r4, [pc, #16]	; (8005854 <strtol+0x14>)
 8005844:	460d      	mov	r5, r1
 8005846:	4613      	mov	r3, r2
 8005848:	4601      	mov	r1, r0
 800584a:	462a      	mov	r2, r5
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	bc30      	pop	{r4, r5}
 8005850:	f7ff bf70 	b.w	8005734 <_strtol_l.isra.0>
 8005854:	20000808 	.word	0x20000808

08005858 <memset>:
 8005858:	b4f0      	push	{r4, r5, r6, r7}
 800585a:	0786      	lsls	r6, r0, #30
 800585c:	d046      	beq.n	80058ec <memset+0x94>
 800585e:	1e54      	subs	r4, r2, #1
 8005860:	2a00      	cmp	r2, #0
 8005862:	d03c      	beq.n	80058de <memset+0x86>
 8005864:	b2ca      	uxtb	r2, r1
 8005866:	4603      	mov	r3, r0
 8005868:	e001      	b.n	800586e <memset+0x16>
 800586a:	3c01      	subs	r4, #1
 800586c:	d337      	bcc.n	80058de <memset+0x86>
 800586e:	f803 2b01 	strb.w	r2, [r3], #1
 8005872:	079d      	lsls	r5, r3, #30
 8005874:	d1f9      	bne.n	800586a <memset+0x12>
 8005876:	2c03      	cmp	r4, #3
 8005878:	d92a      	bls.n	80058d0 <memset+0x78>
 800587a:	b2cd      	uxtb	r5, r1
 800587c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005880:	2c0f      	cmp	r4, #15
 8005882:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005886:	d934      	bls.n	80058f2 <memset+0x9a>
 8005888:	f1a4 0210 	sub.w	r2, r4, #16
 800588c:	f022 0c0f 	bic.w	ip, r2, #15
 8005890:	f103 0720 	add.w	r7, r3, #32
 8005894:	0916      	lsrs	r6, r2, #4
 8005896:	4467      	add	r7, ip
 8005898:	f103 0210 	add.w	r2, r3, #16
 800589c:	e942 5504 	strd	r5, r5, [r2, #-16]
 80058a0:	e942 5502 	strd	r5, r5, [r2, #-8]
 80058a4:	3210      	adds	r2, #16
 80058a6:	42ba      	cmp	r2, r7
 80058a8:	d1f8      	bne.n	800589c <memset+0x44>
 80058aa:	1c72      	adds	r2, r6, #1
 80058ac:	f014 0f0c 	tst.w	r4, #12
 80058b0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80058b4:	f004 060f 	and.w	r6, r4, #15
 80058b8:	d013      	beq.n	80058e2 <memset+0x8a>
 80058ba:	1f33      	subs	r3, r6, #4
 80058bc:	f023 0303 	bic.w	r3, r3, #3
 80058c0:	3304      	adds	r3, #4
 80058c2:	4413      	add	r3, r2
 80058c4:	f842 5b04 	str.w	r5, [r2], #4
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d1fb      	bne.n	80058c4 <memset+0x6c>
 80058cc:	f006 0403 	and.w	r4, r6, #3
 80058d0:	b12c      	cbz	r4, 80058de <memset+0x86>
 80058d2:	b2ca      	uxtb	r2, r1
 80058d4:	441c      	add	r4, r3
 80058d6:	f803 2b01 	strb.w	r2, [r3], #1
 80058da:	429c      	cmp	r4, r3
 80058dc:	d1fb      	bne.n	80058d6 <memset+0x7e>
 80058de:	bcf0      	pop	{r4, r5, r6, r7}
 80058e0:	4770      	bx	lr
 80058e2:	4634      	mov	r4, r6
 80058e4:	4613      	mov	r3, r2
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	d1f3      	bne.n	80058d2 <memset+0x7a>
 80058ea:	e7f8      	b.n	80058de <memset+0x86>
 80058ec:	4614      	mov	r4, r2
 80058ee:	4603      	mov	r3, r0
 80058f0:	e7c1      	b.n	8005876 <memset+0x1e>
 80058f2:	461a      	mov	r2, r3
 80058f4:	4626      	mov	r6, r4
 80058f6:	e7e0      	b.n	80058ba <memset+0x62>

080058f8 <strchr>:
 80058f8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80058fc:	4603      	mov	r3, r0
 80058fe:	d044      	beq.n	800598a <strchr+0x92>
 8005900:	0782      	lsls	r2, r0, #30
 8005902:	d132      	bne.n	800596a <strchr+0x72>
 8005904:	b470      	push	{r4, r5, r6}
 8005906:	6804      	ldr	r4, [r0, #0]
 8005908:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800590c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8005910:	ea86 0504 	eor.w	r5, r6, r4
 8005914:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 8005918:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800591c:	ea23 0305 	bic.w	r3, r3, r5
 8005920:	ea22 0204 	bic.w	r2, r2, r4
 8005924:	4313      	orrs	r3, r2
 8005926:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800592a:	d10f      	bne.n	800594c <strchr+0x54>
 800592c:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8005930:	ea84 0506 	eor.w	r5, r4, r6
 8005934:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8005938:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 800593c:	ea22 0205 	bic.w	r2, r2, r5
 8005940:	ea23 0304 	bic.w	r3, r3, r4
 8005944:	4313      	orrs	r3, r2
 8005946:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800594a:	d0ef      	beq.n	800592c <strchr+0x34>
 800594c:	7803      	ldrb	r3, [r0, #0]
 800594e:	b923      	cbnz	r3, 800595a <strchr+0x62>
 8005950:	e036      	b.n	80059c0 <strchr+0xc8>
 8005952:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8005956:	2b00      	cmp	r3, #0
 8005958:	d032      	beq.n	80059c0 <strchr+0xc8>
 800595a:	4299      	cmp	r1, r3
 800595c:	d1f9      	bne.n	8005952 <strchr+0x5a>
 800595e:	e030      	b.n	80059c2 <strchr+0xca>
 8005960:	428a      	cmp	r2, r1
 8005962:	d011      	beq.n	8005988 <strchr+0x90>
 8005964:	079a      	lsls	r2, r3, #30
 8005966:	4618      	mov	r0, r3
 8005968:	d0cc      	beq.n	8005904 <strchr+0xc>
 800596a:	4618      	mov	r0, r3
 800596c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005970:	2a00      	cmp	r2, #0
 8005972:	d1f5      	bne.n	8005960 <strchr+0x68>
 8005974:	4610      	mov	r0, r2
 8005976:	4770      	bx	lr
 8005978:	0799      	lsls	r1, r3, #30
 800597a:	4618      	mov	r0, r3
 800597c:	d007      	beq.n	800598e <strchr+0x96>
 800597e:	4618      	mov	r0, r3
 8005980:	3301      	adds	r3, #1
 8005982:	7802      	ldrb	r2, [r0, #0]
 8005984:	2a00      	cmp	r2, #0
 8005986:	d1f7      	bne.n	8005978 <strchr+0x80>
 8005988:	4770      	bx	lr
 800598a:	0782      	lsls	r2, r0, #30
 800598c:	d1f7      	bne.n	800597e <strchr+0x86>
 800598e:	6802      	ldr	r2, [r0, #0]
 8005990:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8005994:	ea23 0302 	bic.w	r3, r3, r2
 8005998:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800599c:	d108      	bne.n	80059b0 <strchr+0xb8>
 800599e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80059a2:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 80059a6:	ea23 0302 	bic.w	r3, r3, r2
 80059aa:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80059ae:	d0f6      	beq.n	800599e <strchr+0xa6>
 80059b0:	7803      	ldrb	r3, [r0, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0e8      	beq.n	8005988 <strchr+0x90>
 80059b6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1fb      	bne.n	80059b6 <strchr+0xbe>
 80059be:	4770      	bx	lr
 80059c0:	4618      	mov	r0, r3
 80059c2:	bc70      	pop	{r4, r5, r6}
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop

080059c8 <strpbrk>:
 80059c8:	b430      	push	{r4, r5}
 80059ca:	7804      	ldrb	r4, [r0, #0]
 80059cc:	b1a4      	cbz	r4, 80059f8 <strpbrk+0x30>
 80059ce:	780d      	ldrb	r5, [r1, #0]
 80059d0:	460a      	mov	r2, r1
 80059d2:	462b      	mov	r3, r5
 80059d4:	b91d      	cbnz	r5, 80059de <strpbrk+0x16>
 80059d6:	e00a      	b.n	80059ee <strpbrk+0x26>
 80059d8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80059dc:	b13b      	cbz	r3, 80059ee <strpbrk+0x26>
 80059de:	429c      	cmp	r4, r3
 80059e0:	d1fa      	bne.n	80059d8 <strpbrk+0x10>
 80059e2:	7813      	ldrb	r3, [r2, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bf08      	it	eq
 80059e8:	2000      	moveq	r0, #0
 80059ea:	bc30      	pop	{r4, r5}
 80059ec:	4770      	bx	lr
 80059ee:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80059f2:	2c00      	cmp	r4, #0
 80059f4:	d1ec      	bne.n	80059d0 <strpbrk+0x8>
 80059f6:	e7f4      	b.n	80059e2 <strpbrk+0x1a>
 80059f8:	4620      	mov	r0, r4
 80059fa:	bc30      	pop	{r4, r5}
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop

08005a00 <strspn>:
 8005a00:	b470      	push	{r4, r5, r6}
 8005a02:	7804      	ldrb	r4, [r0, #0]
 8005a04:	b18c      	cbz	r4, 8005a2a <strspn+0x2a>
 8005a06:	780e      	ldrb	r6, [r1, #0]
 8005a08:	4605      	mov	r5, r0
 8005a0a:	b15e      	cbz	r6, 8005a24 <strspn+0x24>
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	4633      	mov	r3, r6
 8005a10:	e002      	b.n	8005a18 <strspn+0x18>
 8005a12:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005a16:	b12b      	cbz	r3, 8005a24 <strspn+0x24>
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	d1fa      	bne.n	8005a12 <strspn+0x12>
 8005a1c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8005a20:	2c00      	cmp	r4, #0
 8005a22:	d1f2      	bne.n	8005a0a <strspn+0xa>
 8005a24:	1a28      	subs	r0, r5, r0
 8005a26:	bc70      	pop	{r4, r5, r6}
 8005a28:	4770      	bx	lr
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	e7fb      	b.n	8005a26 <strspn+0x26>
 8005a2e:	bf00      	nop

08005a30 <two_way_long_needle>:
 8005a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	461d      	mov	r5, r3
 8005a38:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8005a3c:	4681      	mov	r9, r0
 8005a3e:	460f      	mov	r7, r1
 8005a40:	4690      	mov	r8, r2
 8005a42:	f04f 0301 	mov.w	r3, #1
 8005a46:	f240 8144 	bls.w	8005cd2 <two_way_long_needle+0x2a2>
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	469c      	mov	ip, r3
 8005a4e:	2400      	movs	r4, #0
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a54:	e006      	b.n	8005a64 <two_way_long_needle+0x34>
 8005a56:	eba3 0c00 	sub.w	ip, r3, r0
 8005a5a:	461c      	mov	r4, r3
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	1863      	adds	r3, r4, r1
 8005a60:	429d      	cmp	r5, r3
 8005a62:	d910      	bls.n	8005a86 <two_way_long_needle+0x56>
 8005a64:	eb08 0200 	add.w	r2, r8, r0
 8005a68:	f818 6003 	ldrb.w	r6, [r8, r3]
 8005a6c:	5c52      	ldrb	r2, [r2, r1]
 8005a6e:	4296      	cmp	r6, r2
 8005a70:	d3f1      	bcc.n	8005a56 <two_way_long_needle+0x26>
 8005a72:	f000 8082 	beq.w	8005b7a <two_way_long_needle+0x14a>
 8005a76:	f04f 0c01 	mov.w	ip, #1
 8005a7a:	4661      	mov	r1, ip
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	4464      	add	r4, ip
 8005a80:	1863      	adds	r3, r4, r1
 8005a82:	429d      	cmp	r5, r3
 8005a84:	d8ee      	bhi.n	8005a64 <two_way_long_needle+0x34>
 8005a86:	f8cd c008 	str.w	ip, [sp, #8]
 8005a8a:	f04f 0c01 	mov.w	ip, #1
 8005a8e:	4661      	mov	r1, ip
 8005a90:	4663      	mov	r3, ip
 8005a92:	2400      	movs	r4, #0
 8005a94:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005a98:	e006      	b.n	8005aa8 <two_way_long_needle+0x78>
 8005a9a:	eba3 0c06 	sub.w	ip, r3, r6
 8005a9e:	461c      	mov	r4, r3
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	1863      	adds	r3, r4, r1
 8005aa4:	429d      	cmp	r5, r3
 8005aa6:	d90f      	bls.n	8005ac8 <two_way_long_needle+0x98>
 8005aa8:	eb08 0201 	add.w	r2, r8, r1
 8005aac:	f818 e003 	ldrb.w	lr, [r8, r3]
 8005ab0:	5d92      	ldrb	r2, [r2, r6]
 8005ab2:	4596      	cmp	lr, r2
 8005ab4:	d8f1      	bhi.n	8005a9a <two_way_long_needle+0x6a>
 8005ab6:	d066      	beq.n	8005b86 <two_way_long_needle+0x156>
 8005ab8:	f04f 0c01 	mov.w	ip, #1
 8005abc:	4661      	mov	r1, ip
 8005abe:	4626      	mov	r6, r4
 8005ac0:	4464      	add	r4, ip
 8005ac2:	1863      	adds	r3, r4, r1
 8005ac4:	429d      	cmp	r5, r3
 8005ac6:	d8ef      	bhi.n	8005aa8 <two_way_long_needle+0x78>
 8005ac8:	3601      	adds	r6, #1
 8005aca:	f100 0b01 	add.w	fp, r0, #1
 8005ace:	455e      	cmp	r6, fp
 8005ad0:	d302      	bcc.n	8005ad8 <two_way_long_needle+0xa8>
 8005ad2:	f8cd c008 	str.w	ip, [sp, #8]
 8005ad6:	46b3      	mov	fp, r6
 8005ad8:	ab05      	add	r3, sp, #20
 8005ada:	f20d 4214 	addw	r2, sp, #1044	; 0x414
 8005ade:	f843 5f04 	str.w	r5, [r3, #4]!
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d1fb      	bne.n	8005ade <two_way_long_needle+0xae>
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	f000 80f7 	beq.w	8005cda <two_way_long_needle+0x2aa>
 8005aec:	1e6c      	subs	r4, r5, #1
 8005aee:	ae06      	add	r6, sp, #24
 8005af0:	eb08 0004 	add.w	r0, r8, r4
 8005af4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8005af8:	9601      	str	r6, [sp, #4]
 8005afa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005afe:	43d3      	mvns	r3, r2
 8005b00:	442b      	add	r3, r5
 8005b02:	4443      	add	r3, r8
 8005b04:	4290      	cmp	r0, r2
 8005b06:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
 8005b0a:	d1f6      	bne.n	8005afa <two_way_long_needle+0xca>
 8005b0c:	9b02      	ldr	r3, [sp, #8]
 8005b0e:	465a      	mov	r2, fp
 8005b10:	eb08 0103 	add.w	r1, r8, r3
 8005b14:	4640      	mov	r0, r8
 8005b16:	f000 f997 	bl	8005e48 <memcmp>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	f040 8081 	bne.w	8005c22 <two_way_long_needle+0x1f2>
 8005b20:	9b02      	ldr	r3, [sp, #8]
 8005b22:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8005b26:	1aeb      	subs	r3, r5, r3
 8005b28:	4682      	mov	sl, r0
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	9205      	str	r2, [sp, #20]
 8005b2e:	9303      	str	r3, [sp, #12]
 8005b30:	eb09 0e06 	add.w	lr, r9, r6
 8005b34:	9a01      	ldr	r2, [sp, #4]
 8005b36:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8005b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3e:	b343      	cbz	r3, 8005b92 <two_way_long_needle+0x162>
 8005b40:	f1ba 0f00 	cmp.w	sl, #0
 8005b44:	d004      	beq.n	8005b50 <two_way_long_needle+0x120>
 8005b46:	9a02      	ldr	r2, [sp, #8]
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	9a03      	ldr	r2, [sp, #12]
 8005b4c:	bf38      	it	cc
 8005b4e:	4613      	movcc	r3, r2
 8005b50:	441e      	add	r6, r3
 8005b52:	f04f 0a00 	mov.w	sl, #0
 8005b56:	1b7b      	subs	r3, r7, r5
 8005b58:	42b3      	cmp	r3, r6
 8005b5a:	d2e9      	bcs.n	8005b30 <two_way_long_needle+0x100>
 8005b5c:	eb09 0007 	add.w	r0, r9, r7
 8005b60:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
 8005b64:	f000 f9a0 	bl	8005ea8 <strnlen>
 8005b68:	4407      	add	r7, r0
 8005b6a:	1b7b      	subs	r3, r7, r5
 8005b6c:	42b3      	cmp	r3, r6
 8005b6e:	d2df      	bcs.n	8005b30 <two_way_long_needle+0x100>
 8005b70:	2000      	movs	r0, #0
 8005b72:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	458c      	cmp	ip, r1
 8005b7c:	bf12      	itee	ne
 8005b7e:	3101      	addne	r1, #1
 8005b80:	4464      	addeq	r4, ip
 8005b82:	2101      	moveq	r1, #1
 8005b84:	e76b      	b.n	8005a5e <two_way_long_needle+0x2e>
 8005b86:	4561      	cmp	r1, ip
 8005b88:	bf0a      	itet	eq
 8005b8a:	1864      	addeq	r4, r4, r1
 8005b8c:	3101      	addne	r1, #1
 8005b8e:	2101      	moveq	r1, #1
 8005b90:	e787      	b.n	8005aa2 <two_way_long_needle+0x72>
 8005b92:	45d3      	cmp	fp, sl
 8005b94:	465b      	mov	r3, fp
 8005b96:	bf38      	it	cc
 8005b98:	4653      	movcc	r3, sl
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	d211      	bcs.n	8005bc2 <two_way_long_needle+0x192>
 8005b9e:	1e59      	subs	r1, r3, #1
 8005ba0:	199a      	adds	r2, r3, r6
 8005ba2:	4441      	add	r1, r8
 8005ba4:	444a      	add	r2, r9
 8005ba6:	e002      	b.n	8005bae <two_way_long_needle+0x17e>
 8005ba8:	3301      	adds	r3, #1
 8005baa:	42a3      	cmp	r3, r4
 8005bac:	d209      	bcs.n	8005bc2 <two_way_long_needle+0x192>
 8005bae:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005bb2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005bb6:	4584      	cmp	ip, r0
 8005bb8:	d0f6      	beq.n	8005ba8 <two_way_long_needle+0x178>
 8005bba:	f1cb 0201 	rsb	r2, fp, #1
 8005bbe:	4416      	add	r6, r2
 8005bc0:	e7c6      	b.n	8005b50 <two_way_long_needle+0x120>
 8005bc2:	45d3      	cmp	fp, sl
 8005bc4:	9b05      	ldr	r3, [sp, #20]
 8005bc6:	d97d      	bls.n	8005cc4 <two_way_long_needle+0x294>
 8005bc8:	eb0b 0206 	add.w	r2, fp, r6
 8005bcc:	444a      	add	r2, r9
 8005bce:	eb08 010b 	add.w	r1, r8, fp
 8005bd2:	f8cd b010 	str.w	fp, [sp, #16]
 8005bd6:	e002      	b.n	8005bde <two_way_long_needle+0x1ae>
 8005bd8:	4553      	cmp	r3, sl
 8005bda:	d016      	beq.n	8005c0a <two_way_long_needle+0x1da>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8005be2:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8005be6:	4584      	cmp	ip, r0
 8005be8:	f103 0b01 	add.w	fp, r3, #1
 8005bec:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8005bf0:	d0f2      	beq.n	8005bd8 <two_way_long_needle+0x1a8>
 8005bf2:	465b      	mov	r3, fp
 8005bf4:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005bf8:	f10a 0a01 	add.w	sl, sl, #1
 8005bfc:	459a      	cmp	sl, r3
 8005bfe:	d80b      	bhi.n	8005c18 <two_way_long_needle+0x1e8>
 8005c00:	9b02      	ldr	r3, [sp, #8]
 8005c02:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8005c06:	441e      	add	r6, r3
 8005c08:	e7a5      	b.n	8005b56 <two_way_long_needle+0x126>
 8005c0a:	4653      	mov	r3, sl
 8005c0c:	f10a 0a01 	add.w	sl, sl, #1
 8005c10:	459a      	cmp	sl, r3
 8005c12:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005c16:	d9f3      	bls.n	8005c00 <two_way_long_needle+0x1d0>
 8005c18:	4670      	mov	r0, lr
 8005c1a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8005c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c22:	eba5 030b 	sub.w	r3, r5, fp
 8005c26:	455b      	cmp	r3, fp
 8005c28:	bf38      	it	cc
 8005c2a:	465b      	movcc	r3, fp
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	9304      	str	r3, [sp, #16]
 8005c30:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005c34:	9302      	str	r3, [sp, #8]
 8005c36:	f1cb 0301 	rsb	r3, fp, #1
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	9303      	str	r3, [sp, #12]
 8005c3e:	f445 6a00 	orr.w	sl, r5, #2048	; 0x800
 8005c42:	eb09 0e06 	add.w	lr, r9, r6
 8005c46:	9a01      	ldr	r2, [sp, #4]
 8005c48:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8005c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c50:	b16b      	cbz	r3, 8005c6e <two_way_long_needle+0x23e>
 8005c52:	441e      	add	r6, r3
 8005c54:	1b7b      	subs	r3, r7, r5
 8005c56:	429e      	cmp	r6, r3
 8005c58:	d9f3      	bls.n	8005c42 <two_way_long_needle+0x212>
 8005c5a:	eb09 0007 	add.w	r0, r9, r7
 8005c5e:	4651      	mov	r1, sl
 8005c60:	f000 f922 	bl	8005ea8 <strnlen>
 8005c64:	4407      	add	r7, r0
 8005c66:	1b7b      	subs	r3, r7, r5
 8005c68:	429e      	cmp	r6, r3
 8005c6a:	d9ea      	bls.n	8005c42 <two_way_long_needle+0x212>
 8005c6c:	e780      	b.n	8005b70 <two_way_long_needle+0x140>
 8005c6e:	45a3      	cmp	fp, r4
 8005c70:	d214      	bcs.n	8005c9c <two_way_long_needle+0x26c>
 8005c72:	9b02      	ldr	r3, [sp, #8]
 8005c74:	eb0b 0206 	add.w	r2, fp, r6
 8005c78:	eb08 0103 	add.w	r1, r8, r3
 8005c7c:	444a      	add	r2, r9
 8005c7e:	465b      	mov	r3, fp
 8005c80:	e002      	b.n	8005c88 <two_way_long_needle+0x258>
 8005c82:	3301      	adds	r3, #1
 8005c84:	42a3      	cmp	r3, r4
 8005c86:	d209      	bcs.n	8005c9c <two_way_long_needle+0x26c>
 8005c88:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005c8c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005c90:	4584      	cmp	ip, r0
 8005c92:	d0f6      	beq.n	8005c82 <two_way_long_needle+0x252>
 8005c94:	9a03      	ldr	r2, [sp, #12]
 8005c96:	4416      	add	r6, r2
 8005c98:	441e      	add	r6, r3
 8005c9a:	e7db      	b.n	8005c54 <two_way_long_needle+0x224>
 8005c9c:	f1bb 0f00 	cmp.w	fp, #0
 8005ca0:	d012      	beq.n	8005cc8 <two_way_long_needle+0x298>
 8005ca2:	eb0b 0106 	add.w	r1, fp, r6
 8005ca6:	4449      	add	r1, r9
 8005ca8:	eb08 020b 	add.w	r2, r8, fp
 8005cac:	e001      	b.n	8005cb2 <two_way_long_needle+0x282>
 8005cae:	4543      	cmp	r3, r8
 8005cb0:	d00a      	beq.n	8005cc8 <two_way_long_needle+0x298>
 8005cb2:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
 8005cb6:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8005cba:	4584      	cmp	ip, r0
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	d0f6      	beq.n	8005cae <two_way_long_needle+0x27e>
 8005cc0:	9b04      	ldr	r3, [sp, #16]
 8005cc2:	e7c6      	b.n	8005c52 <two_way_long_needle+0x222>
 8005cc4:	465b      	mov	r3, fp
 8005cc6:	e797      	b.n	8005bf8 <two_way_long_needle+0x1c8>
 8005cc8:	4670      	mov	r0, lr
 8005cca:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8005cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd2:	9302      	str	r3, [sp, #8]
 8005cd4:	f04f 0b00 	mov.w	fp, #0
 8005cd8:	e6fe      	b.n	8005ad8 <two_way_long_needle+0xa8>
 8005cda:	ab06      	add	r3, sp, #24
 8005cdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	e713      	b.n	8005b0c <two_way_long_needle+0xdc>

08005ce4 <strstr>:
 8005ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce8:	460e      	mov	r6, r1
 8005cea:	7809      	ldrb	r1, [r1, #0]
 8005cec:	b090      	sub	sp, #64	; 0x40
 8005cee:	4604      	mov	r4, r0
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	d050      	beq.n	8005d96 <strstr+0xb2>
 8005cf4:	7872      	ldrb	r2, [r6, #1]
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	f000 8082 	beq.w	8005e00 <strstr+0x11c>
 8005cfc:	78b3      	ldrb	r3, [r6, #2]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d04d      	beq.n	8005d9e <strstr+0xba>
 8005d02:	78f0      	ldrb	r0, [r6, #3]
 8005d04:	2800      	cmp	r0, #0
 8005d06:	f000 8082 	beq.w	8005e0e <strstr+0x12a>
 8005d0a:	7933      	ldrb	r3, [r6, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d054      	beq.n	8005dba <strstr+0xd6>
 8005d10:	4630      	mov	r0, r6
 8005d12:	f7fa fd15 	bl	8000740 <strlen>
 8005d16:	4607      	mov	r7, r0
 8005d18:	f440 7100 	orr.w	r1, r0, #512	; 0x200
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 f8c3 	bl	8005ea8 <strnlen>
 8005d22:	4287      	cmp	r7, r0
 8005d24:	d867      	bhi.n	8005df6 <strstr+0x112>
 8005d26:	2ffe      	cmp	r7, #254	; 0xfe
 8005d28:	f200 8085 	bhi.w	8005e36 <strstr+0x152>
 8005d2c:	eba0 0807 	sub.w	r8, r0, r7
 8005d30:	2240      	movs	r2, #64	; 0x40
 8005d32:	1c79      	adds	r1, r7, #1
 8005d34:	4668      	mov	r0, sp
 8005d36:	44a0      	add	r8, r4
 8005d38:	f7ff fd8e 	bl	8005858 <memset>
 8005d3c:	b177      	cbz	r7, 8005d5c <strstr+0x78>
 8005d3e:	1e72      	subs	r2, r6, #1
 8005d40:	19d5      	adds	r5, r2, r7
 8005d42:	b2f8      	uxtb	r0, r7
 8005d44:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005d48:	a910      	add	r1, sp, #64	; 0x40
 8005d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d4e:	440b      	add	r3, r1
 8005d50:	1ab1      	subs	r1, r6, r2
 8005d52:	4401      	add	r1, r0
 8005d54:	42aa      	cmp	r2, r5
 8005d56:	f803 1c40 	strb.w	r1, [r3, #-64]
 8005d5a:	d1f3      	bne.n	8005d44 <strstr+0x60>
 8005d5c:	3c01      	subs	r4, #1
 8005d5e:	aa10      	add	r2, sp, #64	; 0x40
 8005d60:	5de3      	ldrb	r3, [r4, r7]
 8005d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d66:	4413      	add	r3, r2
 8005d68:	f813 0c40 	ldrb.w	r0, [r3, #-64]
 8005d6c:	4404      	add	r4, r0
 8005d6e:	45a0      	cmp	r8, r4
 8005d70:	d203      	bcs.n	8005d7a <strstr+0x96>
 8005d72:	e034      	b.n	8005dde <strstr+0xfa>
 8005d74:	442c      	add	r4, r5
 8005d76:	45a0      	cmp	r8, r4
 8005d78:	d331      	bcc.n	8005dde <strstr+0xfa>
 8005d7a:	5de5      	ldrb	r5, [r4, r7]
 8005d7c:	ab10      	add	r3, sp, #64	; 0x40
 8005d7e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8005d82:	441d      	add	r5, r3
 8005d84:	463a      	mov	r2, r7
 8005d86:	4631      	mov	r1, r6
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f815 5c40 	ldrb.w	r5, [r5, #-64]
 8005d8e:	f000 f85b 	bl	8005e48 <memcmp>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d1ee      	bne.n	8005d74 <strstr+0x90>
 8005d96:	4620      	mov	r0, r4
 8005d98:	b010      	add	sp, #64	; 0x40
 8005d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d9e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8005da2:	7802      	ldrb	r2, [r0, #0]
 8005da4:	e000      	b.n	8005da8 <strstr+0xc4>
 8005da6:	4604      	mov	r4, r0
 8005da8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8005dac:	1c60      	adds	r0, r4, #1
 8005dae:	b312      	cbz	r2, 8005df6 <strstr+0x112>
 8005db0:	4299      	cmp	r1, r3
 8005db2:	7862      	ldrb	r2, [r4, #1]
 8005db4:	d1f7      	bne.n	8005da6 <strstr+0xc2>
 8005db6:	3c01      	subs	r4, #1
 8005db8:	e7ed      	b.n	8005d96 <strstr+0xb2>
 8005dba:	7822      	ldrb	r2, [r4, #0]
 8005dbc:	b1da      	cbz	r2, 8005df6 <strstr+0x112>
 8005dbe:	6831      	ldr	r1, [r6, #0]
 8005dc0:	ba09      	rev	r1, r1
 8005dc2:	e001      	b.n	8005dc8 <strstr+0xe4>
 8005dc4:	4299      	cmp	r1, r3
 8005dc6:	d008      	beq.n	8005dda <strstr+0xf6>
 8005dc8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8005dd2:	2a00      	cmp	r2, #0
 8005dd4:	d1f6      	bne.n	8005dc4 <strstr+0xe0>
 8005dd6:	4299      	cmp	r1, r3
 8005dd8:	d10d      	bne.n	8005df6 <strstr+0x112>
 8005dda:	1ec4      	subs	r4, r0, #3
 8005ddc:	e7db      	b.n	8005d96 <strstr+0xb2>
 8005dde:	f818 3007 	ldrb.w	r3, [r8, r7]
 8005de2:	eb08 0007 	add.w	r0, r8, r7
 8005de6:	b133      	cbz	r3, 8005df6 <strstr+0x112>
 8005de8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005dec:	f000 f85c 	bl	8005ea8 <strnlen>
 8005df0:	4480      	add	r8, r0
 8005df2:	4544      	cmp	r4, r8
 8005df4:	d9b2      	bls.n	8005d5c <strstr+0x78>
 8005df6:	2400      	movs	r4, #0
 8005df8:	4620      	mov	r0, r4
 8005dfa:	b010      	add	sp, #64	; 0x40
 8005dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e00:	f7ff fd7a 	bl	80058f8 <strchr>
 8005e04:	4604      	mov	r4, r0
 8005e06:	4620      	mov	r0, r4
 8005e08:	b010      	add	sp, #64	; 0x40
 8005e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e0e:	0412      	lsls	r2, r2, #16
 8005e10:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005e14:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005e18:	7822      	ldrb	r2, [r4, #0]
 8005e1a:	e000      	b.n	8005e1e <strstr+0x13a>
 8005e1c:	462c      	mov	r4, r5
 8005e1e:	ea42 0100 	orr.w	r1, r2, r0
 8005e22:	1c65      	adds	r5, r4, #1
 8005e24:	0208      	lsls	r0, r1, #8
 8005e26:	2a00      	cmp	r2, #0
 8005e28:	d0e5      	beq.n	8005df6 <strstr+0x112>
 8005e2a:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 8005e2e:	7862      	ldrb	r2, [r4, #1]
 8005e30:	d1f4      	bne.n	8005e1c <strstr+0x138>
 8005e32:	3c02      	subs	r4, #2
 8005e34:	e7af      	b.n	8005d96 <strstr+0xb2>
 8005e36:	4601      	mov	r1, r0
 8005e38:	463b      	mov	r3, r7
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	4632      	mov	r2, r6
 8005e3e:	f7ff fdf7 	bl	8005a30 <two_way_long_needle>
 8005e42:	4604      	mov	r4, r0
 8005e44:	e7a7      	b.n	8005d96 <strstr+0xb2>
 8005e46:	bf00      	nop

08005e48 <memcmp>:
 8005e48:	2a03      	cmp	r2, #3
 8005e4a:	b470      	push	{r4, r5, r6}
 8005e4c:	d912      	bls.n	8005e74 <memcmp+0x2c>
 8005e4e:	ea40 0501 	orr.w	r5, r0, r1
 8005e52:	07ad      	lsls	r5, r5, #30
 8005e54:	4604      	mov	r4, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	d11e      	bne.n	8005e98 <memcmp+0x50>
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e62:	f854 6b04 	ldr.w	r6, [r4], #4
 8005e66:	42ae      	cmp	r6, r5
 8005e68:	d116      	bne.n	8005e98 <memcmp+0x50>
 8005e6a:	3a04      	subs	r2, #4
 8005e6c:	2a03      	cmp	r2, #3
 8005e6e:	4620      	mov	r0, r4
 8005e70:	4619      	mov	r1, r3
 8005e72:	d8f2      	bhi.n	8005e5a <memcmp+0x12>
 8005e74:	1e56      	subs	r6, r2, #1
 8005e76:	b1a2      	cbz	r2, 8005ea2 <memcmp+0x5a>
 8005e78:	3901      	subs	r1, #1
 8005e7a:	1e44      	subs	r4, r0, #1
 8005e7c:	e001      	b.n	8005e82 <memcmp+0x3a>
 8005e7e:	18c3      	adds	r3, r0, r3
 8005e80:	d00c      	beq.n	8005e9c <memcmp+0x54>
 8005e82:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8005e86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005e8a:	4295      	cmp	r5, r2
 8005e8c:	eba6 0304 	sub.w	r3, r6, r4
 8005e90:	d0f5      	beq.n	8005e7e <memcmp+0x36>
 8005e92:	1aa8      	subs	r0, r5, r2
 8005e94:	bc70      	pop	{r4, r5, r6}
 8005e96:	4770      	bx	lr
 8005e98:	1e56      	subs	r6, r2, #1
 8005e9a:	e7ed      	b.n	8005e78 <memcmp+0x30>
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bc70      	pop	{r4, r5, r6}
 8005ea0:	4770      	bx	lr
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	e7f6      	b.n	8005e94 <memcmp+0x4c>
 8005ea6:	bf00      	nop

08005ea8 <strnlen>:
 8005ea8:	b181      	cbz	r1, 8005ecc <strnlen+0x24>
 8005eaa:	b410      	push	{r4}
 8005eac:	4603      	mov	r3, r0
 8005eae:	1844      	adds	r4, r0, r1
 8005eb0:	e001      	b.n	8005eb6 <strnlen+0xe>
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	d007      	beq.n	8005ec6 <strnlen+0x1e>
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	3301      	adds	r3, #1
 8005eba:	7811      	ldrb	r1, [r2, #0]
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	d1f8      	bne.n	8005eb2 <strnlen+0xa>
 8005ec0:	1a10      	subs	r0, r2, r0
 8005ec2:	bc10      	pop	{r4}
 8005ec4:	4770      	bx	lr
 8005ec6:	1a18      	subs	r0, r3, r0
 8005ec8:	bc10      	pop	{r4}
 8005eca:	4770      	bx	lr
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4770      	bx	lr
