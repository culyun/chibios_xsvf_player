
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	08004141 	.word	0x08004141
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	080002db 	.word	0x080002db
 800005c:	080002db 	.word	0x080002db
 8000060:	080002db 	.word	0x080002db
 8000064:	080002db 	.word	0x080002db
 8000068:	080002db 	.word	0x080002db
 800006c:	080002db 	.word	0x080002db
 8000070:	080002db 	.word	0x080002db
 8000074:	080002db 	.word	0x080002db
 8000078:	080002db 	.word	0x080002db
 800007c:	080002db 	.word	0x080002db
 8000080:	080002db 	.word	0x080002db
 8000084:	080002db 	.word	0x080002db
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080002db 	.word	0x080002db
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	08005161 	.word	0x08005161
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	080002db 	.word	0x080002db
 80000c0:	080002db 	.word	0x080002db
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	080002db 	.word	0x080002db
 80000d8:	08004fc1 	.word	0x08004fc1
 80000dc:	080002db 	.word	0x080002db
 80000e0:	080002db 	.word	0x080002db
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080002db 	.word	0x080002db
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	080002db 	.word	0x080002db
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	080002db 	.word	0x080002db
 8000124:	080002db 	.word	0x080002db
 8000128:	080002db 	.word	0x080002db
 800012c:	080002db 	.word	0x080002db
 8000130:	080002db 	.word	0x080002db
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	08005221 	.word	0x08005221
 8000150:	080002db 	.word	0x080002db
 8000154:	080002db 	.word	0x080002db
 8000158:	080002db 	.word	0x080002db
 800015c:	080002db 	.word	0x080002db
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000224:	f005 fa5c 	bl	80056e0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f004 fdd2 	bl	8004dd0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f005 f9ee 	bl	8005650 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f005 fa2c 	bl	80056d0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f004 f8a2 	bl	80043d0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f005 ba10 	b.w	80056c0 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002b4:	08006824 	.word	0x08006824
                ldr     r2, =__data_base__
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002bc:	20000c38 	.word	0x20000c38
                ldr     r1, =__bss_base__
 80002c0:	20000c38 	.word	0x20000c38
                ldr     r2, =__bss_end__
 80002c4:	2000992c 	.word	0x2000992c
                ldr     r4, =__init_array_base__
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d014 	str.w	sp, [r1, #20]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	6943      	ldr	r3, [r0, #20]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002f6:	4628      	mov	r0, r5
                blx     r4
 80002f8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002fa:	2000      	movs	r0, #0
                bl      chThdExit
 80002fc:	f003 ff30 	bl	8004160 <chThdExit>

08000300 <_zombies>:
_zombies:       b       _zombies
 8000300:	e7fe      	b.n	8000300 <_zombies>

08000302 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000302:	f003 ff35 	bl	8004170 <chSchDoReschedule>

08000306 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000306:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000308:	e7fe      	b.n	8000308 <_port_exit_from_isr+0x2>
	...

0800030c <memcpy>:
 800030c:	4684      	mov	ip, r0
 800030e:	ea41 0300 	orr.w	r3, r1, r0
 8000312:	f013 0303 	ands.w	r3, r3, #3
 8000316:	d16d      	bne.n	80003f4 <memcpy+0xe8>
 8000318:	3a40      	subs	r2, #64	; 0x40
 800031a:	d341      	bcc.n	80003a0 <memcpy+0x94>
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	3a40      	subs	r2, #64	; 0x40
 800039e:	d2bd      	bcs.n	800031c <memcpy+0x10>
 80003a0:	3230      	adds	r2, #48	; 0x30
 80003a2:	d311      	bcc.n	80003c8 <memcpy+0xbc>
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	3a10      	subs	r2, #16
 80003c6:	d2ed      	bcs.n	80003a4 <memcpy+0x98>
 80003c8:	320c      	adds	r2, #12
 80003ca:	d305      	bcc.n	80003d8 <memcpy+0xcc>
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a04      	subs	r2, #4
 80003d6:	d2f9      	bcs.n	80003cc <memcpy+0xc0>
 80003d8:	3204      	adds	r2, #4
 80003da:	d008      	beq.n	80003ee <memcpy+0xe2>
 80003dc:	07d2      	lsls	r2, r2, #31
 80003de:	bf1c      	itt	ne
 80003e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e8:	d301      	bcc.n	80003ee <memcpy+0xe2>
 80003ea:	880b      	ldrh	r3, [r1, #0]
 80003ec:	8003      	strh	r3, [r0, #0]
 80003ee:	4660      	mov	r0, ip
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	2a08      	cmp	r2, #8
 80003f6:	d313      	bcc.n	8000420 <memcpy+0x114>
 80003f8:	078b      	lsls	r3, r1, #30
 80003fa:	d08d      	beq.n	8000318 <memcpy+0xc>
 80003fc:	f010 0303 	ands.w	r3, r0, #3
 8000400:	d08a      	beq.n	8000318 <memcpy+0xc>
 8000402:	f1c3 0304 	rsb	r3, r3, #4
 8000406:	1ad2      	subs	r2, r2, r3
 8000408:	07db      	lsls	r3, r3, #31
 800040a:	bf1c      	itt	ne
 800040c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000410:	f800 3b01 	strbne.w	r3, [r0], #1
 8000414:	d380      	bcc.n	8000318 <memcpy+0xc>
 8000416:	f831 3b02 	ldrh.w	r3, [r1], #2
 800041a:	f820 3b02 	strh.w	r3, [r0], #2
 800041e:	e77b      	b.n	8000318 <memcpy+0xc>
 8000420:	3a04      	subs	r2, #4
 8000422:	d3d9      	bcc.n	80003d8 <memcpy+0xcc>
 8000424:	3a01      	subs	r2, #1
 8000426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800042a:	f800 3b01 	strb.w	r3, [r0], #1
 800042e:	d2f9      	bcs.n	8000424 <memcpy+0x118>
 8000430:	780b      	ldrb	r3, [r1, #0]
 8000432:	7003      	strb	r3, [r0, #0]
 8000434:	784b      	ldrb	r3, [r1, #1]
 8000436:	7043      	strb	r3, [r0, #1]
 8000438:	788b      	ldrb	r3, [r1, #2]
 800043a:	7083      	strb	r3, [r0, #2]
 800043c:	4660      	mov	r0, ip
 800043e:	4770      	bx	lr
 8000440:	eba2 0003 	sub.w	r0, r2, r3
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <strcmp>:
 8000448:	7802      	ldrb	r2, [r0, #0]
 800044a:	780b      	ldrb	r3, [r1, #0]
 800044c:	2a01      	cmp	r2, #1
 800044e:	bf28      	it	cs
 8000450:	429a      	cmpcs	r2, r3
 8000452:	d1f5      	bne.n	8000440 <memcpy+0x134>
 8000454:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000458:	ea40 0401 	orr.w	r4, r0, r1
 800045c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000460:	f06f 0c00 	mvn.w	ip, #0
 8000464:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000468:	b312      	cbz	r2, 80004b0 <strcmp+0x68>
 800046a:	ea80 0401 	eor.w	r4, r0, r1
 800046e:	f014 0f07 	tst.w	r4, #7
 8000472:	d16a      	bne.n	800054a <strcmp+0x102>
 8000474:	f000 0407 	and.w	r4, r0, #7
 8000478:	f020 0007 	bic.w	r0, r0, #7
 800047c:	f004 0503 	and.w	r5, r4, #3
 8000480:	f021 0107 	bic.w	r1, r1, #7
 8000484:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000488:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800048c:	f014 0f04 	tst.w	r4, #4
 8000490:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000494:	fa0c f405 	lsl.w	r4, ip, r5
 8000498:	ea62 0204 	orn	r2, r2, r4
 800049c:	ea66 0604 	orn	r6, r6, r4
 80004a0:	d00a      	beq.n	80004b8 <strcmp+0x70>
 80004a2:	ea63 0304 	orn	r3, r3, r4
 80004a6:	4662      	mov	r2, ip
 80004a8:	ea67 0704 	orn	r7, r7, r4
 80004ac:	4666      	mov	r6, ip
 80004ae:	e003      	b.n	80004b8 <strcmp+0x70>
 80004b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80004b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80004b8:	fa82 f54c 	uadd8	r5, r2, ip
 80004bc:	ea82 0406 	eor.w	r4, r2, r6
 80004c0:	faa4 f48c 	sel	r4, r4, ip
 80004c4:	bb6c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004c6:	fa83 f54c 	uadd8	r5, r3, ip
 80004ca:	ea83 0507 	eor.w	r5, r3, r7
 80004ce:	faa5 f58c 	sel	r5, r5, ip
 80004d2:	b995      	cbnz	r5, 80004fa <strcmp+0xb2>
 80004d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004dc:	fa82 f54c 	uadd8	r5, r2, ip
 80004e0:	ea82 0406 	eor.w	r4, r2, r6
 80004e4:	faa4 f48c 	sel	r4, r4, ip
 80004e8:	fa83 f54c 	uadd8	r5, r3, ip
 80004ec:	ea83 0507 	eor.w	r5, r3, r7
 80004f0:	faa5 f58c 	sel	r5, r5, ip
 80004f4:	4325      	orrs	r5, r4
 80004f6:	d0db      	beq.n	80004b0 <strcmp+0x68>
 80004f8:	b99c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004fa:	ba2d      	rev	r5, r5
 80004fc:	fab5 f485 	clz	r4, r5
 8000500:	f024 0407 	bic.w	r4, r4, #7
 8000504:	fa27 f104 	lsr.w	r1, r7, r4
 8000508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800050c:	fa23 f304 	lsr.w	r3, r3, r4
 8000510:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000514:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000518:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800051c:	eba0 0001 	sub.w	r0, r0, r1
 8000520:	4770      	bx	lr
 8000522:	ba24      	rev	r4, r4
 8000524:	fab4 f484 	clz	r4, r4
 8000528:	f024 0407 	bic.w	r4, r4, #7
 800052c:	fa26 f104 	lsr.w	r1, r6, r4
 8000530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000534:	fa22 f204 	lsr.w	r2, r2, r4
 8000538:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800053c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000540:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000544:	eba0 0001 	sub.w	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	f014 0f03 	tst.w	r4, #3
 800054e:	d13c      	bne.n	80005ca <strcmp+0x182>
 8000550:	f010 0403 	ands.w	r4, r0, #3
 8000554:	d128      	bne.n	80005a8 <strcmp+0x160>
 8000556:	f850 2b08 	ldr.w	r2, [r0], #8
 800055a:	f851 3b08 	ldr.w	r3, [r1], #8
 800055e:	fa82 f54c 	uadd8	r5, r2, ip
 8000562:	ea82 0503 	eor.w	r5, r2, r3
 8000566:	faa5 f58c 	sel	r5, r5, ip
 800056a:	b95d      	cbnz	r5, 8000584 <strcmp+0x13c>
 800056c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000574:	fa82 f54c 	uadd8	r5, r2, ip
 8000578:	ea82 0503 	eor.w	r5, r2, r3
 800057c:	faa5 f58c 	sel	r5, r5, ip
 8000580:	2d00      	cmp	r5, #0
 8000582:	d0e8      	beq.n	8000556 <strcmp+0x10e>
 8000584:	ba2d      	rev	r5, r5
 8000586:	fab5 f485 	clz	r4, r5
 800058a:	f024 0407 	bic.w	r4, r4, #7
 800058e:	fa23 f104 	lsr.w	r1, r3, r4
 8000592:	fa22 f204 	lsr.w	r2, r2, r4
 8000596:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800059a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800059e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80005a2:	eba0 0001 	sub.w	r0, r0, r1
 80005a6:	4770      	bx	lr
 80005a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80005ac:	f020 0003 	bic.w	r0, r0, #3
 80005b0:	f850 2b08 	ldr.w	r2, [r0], #8
 80005b4:	f021 0103 	bic.w	r1, r1, #3
 80005b8:	f851 3b08 	ldr.w	r3, [r1], #8
 80005bc:	fa0c f404 	lsl.w	r4, ip, r4
 80005c0:	ea62 0204 	orn	r2, r2, r4
 80005c4:	ea63 0304 	orn	r3, r3, r4
 80005c8:	e7c9      	b.n	800055e <strcmp+0x116>
 80005ca:	f010 0403 	ands.w	r4, r0, #3
 80005ce:	d01a      	beq.n	8000606 <strcmp+0x1be>
 80005d0:	eba1 0104 	sub.w	r1, r1, r4
 80005d4:	f020 0003 	bic.w	r0, r0, #3
 80005d8:	07e4      	lsls	r4, r4, #31
 80005da:	f850 2b04 	ldr.w	r2, [r0], #4
 80005de:	d006      	beq.n	80005ee <strcmp+0x1a6>
 80005e0:	d20f      	bcs.n	8000602 <strcmp+0x1ba>
 80005e2:	788b      	ldrb	r3, [r1, #2]
 80005e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	d106      	bne.n	80005fa <strcmp+0x1b2>
 80005ec:	b12b      	cbz	r3, 80005fa <strcmp+0x1b2>
 80005ee:	78cb      	ldrb	r3, [r1, #3]
 80005f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	d100      	bne.n	80005fa <strcmp+0x1b2>
 80005f8:	b91b      	cbnz	r3, 8000602 <strcmp+0x1ba>
 80005fa:	4620      	mov	r0, r4
 80005fc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000600:	4770      	bx	lr
 8000602:	f101 0104 	add.w	r1, r1, #4
 8000606:	f850 2b04 	ldr.w	r2, [r0], #4
 800060a:	07cc      	lsls	r4, r1, #31
 800060c:	f021 0103 	bic.w	r1, r1, #3
 8000610:	f851 3b04 	ldr.w	r3, [r1], #4
 8000614:	d848      	bhi.n	80006a8 <strcmp+0x260>
 8000616:	d224      	bcs.n	8000662 <strcmp+0x21a>
 8000618:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800061c:	fa82 f54c 	uadd8	r5, r2, ip
 8000620:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000624:	faa5 f58c 	sel	r5, r5, ip
 8000628:	d10a      	bne.n	8000640 <strcmp+0x1f8>
 800062a:	b965      	cbnz	r5, 8000646 <strcmp+0x1fe>
 800062c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000630:	ea84 0402 	eor.w	r4, r4, r2
 8000634:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000638:	d10e      	bne.n	8000658 <strcmp+0x210>
 800063a:	f850 2b04 	ldr.w	r2, [r0], #4
 800063e:	e7eb      	b.n	8000618 <strcmp+0x1d0>
 8000640:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000644:	e055      	b.n	80006f2 <strcmp+0x2aa>
 8000646:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800064a:	d14d      	bne.n	80006e8 <strcmp+0x2a0>
 800064c:	7808      	ldrb	r0, [r1, #0]
 800064e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000652:	f1c0 0000 	rsb	r0, r0, #0
 8000656:	4770      	bx	lr
 8000658:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800065c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000660:	e047      	b.n	80006f2 <strcmp+0x2aa>
 8000662:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000666:	fa82 f54c 	uadd8	r5, r2, ip
 800066a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800066e:	faa5 f58c 	sel	r5, r5, ip
 8000672:	d10a      	bne.n	800068a <strcmp+0x242>
 8000674:	b965      	cbnz	r5, 8000690 <strcmp+0x248>
 8000676:	f851 3b04 	ldr.w	r3, [r1], #4
 800067a:	ea84 0402 	eor.w	r4, r4, r2
 800067e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000682:	d10c      	bne.n	800069e <strcmp+0x256>
 8000684:	f850 2b04 	ldr.w	r2, [r0], #4
 8000688:	e7eb      	b.n	8000662 <strcmp+0x21a>
 800068a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800068e:	e030      	b.n	80006f2 <strcmp+0x2aa>
 8000690:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000694:	d128      	bne.n	80006e8 <strcmp+0x2a0>
 8000696:	880b      	ldrh	r3, [r1, #0]
 8000698:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800069c:	e029      	b.n	80006f2 <strcmp+0x2aa>
 800069e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80006a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80006a6:	e024      	b.n	80006f2 <strcmp+0x2aa>
 80006a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80006ac:	fa82 f54c 	uadd8	r5, r2, ip
 80006b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80006b4:	faa5 f58c 	sel	r5, r5, ip
 80006b8:	d10a      	bne.n	80006d0 <strcmp+0x288>
 80006ba:	b965      	cbnz	r5, 80006d6 <strcmp+0x28e>
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	ea84 0402 	eor.w	r4, r4, r2
 80006c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006c8:	d109      	bne.n	80006de <strcmp+0x296>
 80006ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ce:	e7eb      	b.n	80006a8 <strcmp+0x260>
 80006d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006d4:	e00d      	b.n	80006f2 <strcmp+0x2aa>
 80006d6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006da:	d105      	bne.n	80006e8 <strcmp+0x2a0>
 80006dc:	680b      	ldr	r3, [r1, #0]
 80006de:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006e6:	e004      	b.n	80006f2 <strcmp+0x2aa>
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006f0:	4770      	bx	lr
 80006f2:	ba12      	rev	r2, r2
 80006f4:	ba1b      	rev	r3, r3
 80006f6:	fa82 f44c 	uadd8	r4, r2, ip
 80006fa:	ea82 0403 	eor.w	r4, r2, r3
 80006fe:	faa4 f58c 	sel	r5, r4, ip
 8000702:	fab5 f485 	clz	r4, r5
 8000706:	fa02 f204 	lsl.w	r2, r2, r4
 800070a:	fa03 f304 	lsl.w	r3, r3, r4
 800070e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000712:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000716:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800071a:	4770      	bx	lr
	...

08000740 <strlen>:
 8000740:	f890 f000 	pld	[r0]
 8000744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000748:	f020 0107 	bic.w	r1, r0, #7
 800074c:	f06f 0c00 	mvn.w	ip, #0
 8000750:	f010 0407 	ands.w	r4, r0, #7
 8000754:	f891 f020 	pld	[r1, #32]
 8000758:	f040 8049 	bne.w	80007ee <strlen+0xae>
 800075c:	f04f 0400 	mov.w	r4, #0
 8000760:	f06f 0007 	mvn.w	r0, #7
 8000764:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000768:	f891 f040 	pld	[r1, #64]	; 0x40
 800076c:	f100 0008 	add.w	r0, r0, #8
 8000770:	fa82 f24c 	uadd8	r2, r2, ip
 8000774:	faa4 f28c 	sel	r2, r4, ip
 8000778:	fa83 f34c 	uadd8	r3, r3, ip
 800077c:	faa2 f38c 	sel	r3, r2, ip
 8000780:	bb4b      	cbnz	r3, 80007d6 <strlen+0x96>
 8000782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000786:	fa82 f24c 	uadd8	r2, r2, ip
 800078a:	f100 0008 	add.w	r0, r0, #8
 800078e:	faa4 f28c 	sel	r2, r4, ip
 8000792:	fa83 f34c 	uadd8	r3, r3, ip
 8000796:	faa2 f38c 	sel	r3, r2, ip
 800079a:	b9e3      	cbnz	r3, 80007d6 <strlen+0x96>
 800079c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007a0:	fa82 f24c 	uadd8	r2, r2, ip
 80007a4:	f100 0008 	add.w	r0, r0, #8
 80007a8:	faa4 f28c 	sel	r2, r4, ip
 80007ac:	fa83 f34c 	uadd8	r3, r3, ip
 80007b0:	faa2 f38c 	sel	r3, r2, ip
 80007b4:	b97b      	cbnz	r3, 80007d6 <strlen+0x96>
 80007b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007ba:	f101 0120 	add.w	r1, r1, #32
 80007be:	fa82 f24c 	uadd8	r2, r2, ip
 80007c2:	f100 0008 	add.w	r0, r0, #8
 80007c6:	faa4 f28c 	sel	r2, r4, ip
 80007ca:	fa83 f34c 	uadd8	r3, r3, ip
 80007ce:	faa2 f38c 	sel	r3, r2, ip
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0c6      	beq.n	8000764 <strlen+0x24>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	bf04      	itt	eq
 80007da:	3004      	addeq	r0, #4
 80007dc:	461a      	moveq	r2, r3
 80007de:	ba12      	rev	r2, r2
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80007e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80007ec:	4770      	bx	lr
 80007ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007f2:	f004 0503 	and.w	r5, r4, #3
 80007f6:	f1c4 0000 	rsb	r0, r4, #0
 80007fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80007fe:	f014 0f04 	tst.w	r4, #4
 8000802:	f891 f040 	pld	[r1, #64]	; 0x40
 8000806:	fa0c f505 	lsl.w	r5, ip, r5
 800080a:	ea62 0205 	orn	r2, r2, r5
 800080e:	bf1c      	itt	ne
 8000810:	ea63 0305 	ornne	r3, r3, r5
 8000814:	4662      	movne	r2, ip
 8000816:	f04f 0400 	mov.w	r4, #0
 800081a:	e7a9      	b.n	8000770 <strlen+0x30>
 800081c:	0000      	movs	r0, r0
	...

08000820 <otg_txfifo_handler.constprop.0>:
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <otg_txfifo_handler.constprop.0+0x8c>)
 8000822:	eb02 0380 	add.w	r3, r2, r0, lsl #2
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8000826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800082a:	68d9      	ldr	r1, [r3, #12]
 800082c:	f8d2 9054 	ldr.w	r9, [r2, #84]	; 0x54
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8000830:	4680      	mov	r8, r0
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000832:	6948      	ldr	r0, [r1, #20]
 8000834:	e9d0 3700 	ldrd	r3, r7, [r0]
 8000838:	42bb      	cmp	r3, r7
 800083a:	d928      	bls.n	800088e <otg_txfifo_handler.constprop.0+0x6e>
      return false;

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800083c:	f108 0401 	add.w	r4, r8, #1
    if (n > usbp->epc[ep]->in_maxsize)
 8000840:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000844:	eb09 3404 	add.w	r4, r9, r4, lsl #12
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8000848:	eb09 1c48 	add.w	ip, r9, r8, lsl #5
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800084c:	1bde      	subs	r6, r3, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800084e:	f8dc 2918 	ldr.w	r2, [ip, #2328]	; 0x918
 8000852:	4576      	cmp	r6, lr
 8000854:	bf28      	it	cs
 8000856:	4676      	movcs	r6, lr
 8000858:	b293      	uxth	r3, r2
 800085a:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800085e:	d821      	bhi.n	80008a4 <otg_txfifo_handler.constprop.0+0x84>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000860:	6885      	ldr	r5, [r0, #8]
    if (n <= 4) {
 8000862:	2e04      	cmp	r6, #4
    *fifop = *((uint32_t *)buf);
 8000864:	682b      	ldr	r3, [r5, #0]
 8000866:	6023      	str	r3, [r4, #0]
    if (n <= 4) {
 8000868:	d90a      	bls.n	8000880 <otg_txfifo_handler.constprop.0+0x60>
 800086a:	1f71      	subs	r1, r6, #5
 800086c:	f021 0103 	bic.w	r1, r1, #3
 8000870:	3104      	adds	r1, #4
 8000872:	4429      	add	r1, r5
 8000874:	462b      	mov	r3, r5
    *fifop = *((uint32_t *)buf);
 8000876:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800087a:	6022      	str	r2, [r4, #0]
    if (n <= 4) {
 800087c:	4299      	cmp	r1, r3
 800087e:	d1fa      	bne.n	8000876 <otg_txfifo_handler.constprop.0+0x56>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000880:	6803      	ldr	r3, [r0, #0]
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
    usbp->epc[ep]->in_state->txcnt += n;
 8000882:	4437      	add	r7, r6
    usbp->epc[ep]->in_state->txbuf += n;
 8000884:	4435      	add	r5, r6
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000886:	42bb      	cmp	r3, r7
    usbp->epc[ep]->in_state->txcnt += n;
 8000888:	e9c0 7501 	strd	r7, r5, [r0, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800088c:	d8de      	bhi.n	800084c <otg_txfifo_handler.constprop.0+0x2c>
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 800088e:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
 8000892:	2001      	movs	r0, #1
 8000894:	fa00 f808 	lsl.w	r8, r0, r8
 8000898:	ea23 0308 	bic.w	r3, r3, r8
 800089c:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
  }
}
 80008a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
 80008a4:	2000      	movs	r0, #0
}
 80008a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008aa:	bf00      	nop
 80008ac:	2000132c 	.word	0x2000132c

080008b0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80008b0:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80008b2:	2320      	movs	r3, #32
 80008b4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80008b8:	4c0b      	ldr	r4, [pc, #44]	; (80008e8 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80008ba:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80008be:	4249      	negs	r1, r1
 80008c0:	1a28      	subs	r0, r5, r0
 80008c2:	4008      	ands	r0, r1
  prev = p - offset;
 80008c4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d307      	bcc.n	80008da <chCoreAllocFromTop+0x2a>
 80008ca:	4295      	cmp	r5, r2
 80008cc:	d305      	bcc.n	80008da <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 80008ce:	6062      	str	r2, [r4, #4]
 80008d0:	2300      	movs	r3, #0
 80008d2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 80008d6:	bc30      	pop	{r4, r5}
 80008d8:	4770      	bx	lr
    return NULL;
 80008da:	2000      	movs	r0, #0
 80008dc:	2300      	movs	r3, #0
 80008de:	f383 8811 	msr	BASEPRI, r3
}
 80008e2:	bc30      	pop	{r4, r5}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20001548 	.word	0x20001548
 80008ec:	00000000 	.word	0x00000000

080008f0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80008f0:	4a02      	ldr	r2, [pc, #8]	; (80008fc <notify2+0xc>)
 80008f2:	68d3      	ldr	r3, [r2, #12]
 80008f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008f8:	60d3      	str	r3, [r2, #12]
}
 80008fa:	4770      	bx	lr
 80008fc:	40004400 	.word	0x40004400

08000900 <set_port.part.0>:

	/* clock TMS and TDI on falling TCK */
	if (p == TCK) {
		if (val == 0) {
			//chprintf(dbg, "Clock Low\r\n");
			XSVF_GPIO_BSRR = BSRR_TMS | BSRR_TDI | ((1 << TCK_Pin) << 16);
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <set_port.part.0+0x14>)
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <set_port.part.0+0x18>)
 8000904:	6811      	ldr	r1, [r2, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <set_port.part.0+0x1c>)
 800090a:	430b      	orrs	r3, r1
 800090c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000910:	6193      	str	r3, [r2, #24]
		} else {
			//chprintf(dbg, "Clock Hi\r\n");
			XSVF_GPIO_BSRR = (1 << TCK_Pin);
		}
	}
}
 8000912:	4770      	bx	lr
 8000914:	20000c38 	.word	0x20000c38
 8000918:	20000c3c 	.word	0x20000c3c
 800091c:	40020800 	.word	0x40020800

08000920 <shift.constprop.0>:
		}
	}
}

/* output dataVal onto the TDI ports; store the TDO value returned */
static void shift(int flags, uint8_t *data, uint8_t *tdo, uint32_t length){
 8000920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i,j;
	int n_bytes = BYTES(length);
 8000924:	1dd3      	adds	r3, r2, #7
static void shift(int flags, uint8_t *data, uint8_t *tdo, uint32_t length){
 8000926:	b085      	sub	sp, #20

	for (i=0; i<n_bytes; i++) {
 8000928:	08db      	lsrs	r3, r3, #3
static void shift(int flags, uint8_t *data, uint8_t *tdo, uint32_t length){
 800092a:	9001      	str	r0, [sp, #4]
	for (i=0; i<n_bytes; i++) {
 800092c:	d050      	beq.n	80009d0 <shift.constprop.0+0xb0>
 800092e:	4616      	mov	r6, r2
 8000930:	440b      	add	r3, r1
 8000932:	4a29      	ldr	r2, [pc, #164]	; (80009d8 <shift.constprop.0+0xb8>)
 8000934:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80009e8 <shift.constprop.0+0xc8>
			XSVF_GPIO_BSRR = (1 << TCK_Pin);
 8000938:	4828      	ldr	r0, [pc, #160]	; (80009dc <shift.constprop.0+0xbc>)
	return (palReadLine(TDO_PIN) == PAL_HIGH) ? 1 : 0 ;
 800093a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80009ec <shift.constprop.0+0xcc>
 800093e:	9202      	str	r2, [sp, #8]
 8000940:	460f      	mov	r7, r1
 8000942:	9303      	str	r3, [sp, #12]
 8000944:	4689      	mov	r9, r1
		uint8_t byte = data[i];
 8000946:	9b02      	ldr	r3, [sp, #8]
		uint8_t in = 0;
 8000948:	2400      	movs	r4, #0
		uint8_t byte = data[i];
 800094a:	f813 ab01 	ldrb.w	sl, [r3], #1
 800094e:	9302      	str	r3, [sp, #8]
		for (j=0;j<8;j++) {
 8000950:	4625      	mov	r5, r4
 8000952:	e003      	b.n	800095c <shift.constprop.0+0x3c>
			/* on the last bit, set TMS to 1 so that we go to the EXIT state */
			if ((length==1) && (flags&SDR_END)) {
				set_port(TMS,1);
				state_ack(1);
			}
			if (length>0) {
 8000954:	b9ae      	cbnz	r6, 8000982 <shift.constprop.0+0x62>
		for (j=0;j<8;j++) {
 8000956:	3501      	adds	r5, #1
 8000958:	2d08      	cmp	r5, #8
 800095a:	d031      	beq.n	80009c0 <shift.constprop.0+0xa0>
			if ((length==1) && (flags&SDR_END)) {
 800095c:	2e01      	cmp	r6, #1
 800095e:	d1f9      	bne.n	8000954 <shift.constprop.0+0x34>
 8000960:	9a01      	ldr	r2, [sp, #4]
		current_state = (tms_transitions[current_state]>>4)&0xf;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <shift.constprop.0+0xc0>)
 8000964:	f8df c088 	ldr.w	ip, [pc, #136]	; 80009f0 <shift.constprop.0+0xd0>
			if ((length==1) && (flags&SDR_END)) {
 8000968:	f012 0f02 	tst.w	r2, #2
	if (p == TMS && val == 1) BSRR_TMS = ((1 << TMS_Pin));
 800096c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
			if ((length==1) && (flags&SDR_END)) {
 8000970:	d007      	beq.n	8000982 <shift.constprop.0+0x62>
		current_state = (tms_transitions[current_state]>>4)&0xf;
 8000972:	f893 e000 	ldrb.w	lr, [r3]
	if (p == TMS && val == 1) BSRR_TMS = ((1 << TMS_Pin));
 8000976:	491b      	ldr	r1, [pc, #108]	; (80009e4 <shift.constprop.0+0xc4>)
 8000978:	600a      	str	r2, [r1, #0]
		current_state = (tms_transitions[current_state]>>4)&0xf;
 800097a:	f81c 100e 	ldrb.w	r1, [ip, lr]
 800097e:	0909      	lsrs	r1, r1, #4
 8000980:	7019      	strb	r1, [r3, #0]
				if (tdo) {
 8000982:	b137      	cbz	r7, 8000992 <shift.constprop.0+0x72>
	return (palReadLine(TDO_PIN) == PAL_HIGH) ? 1 : 0 ;
 8000984:	f8db 3010 	ldr.w	r3, [fp, #16]
					in |= read_tdo()<<j;
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	40ab      	lsls	r3, r5
 800098e:	431c      	orrs	r4, r3
 8000990:	b2e4      	uxtb	r4, r4
	if (p == TDI && val == 0) BSRR_TDI = ((1 << TDI_Pin) << 16);
 8000992:	f01a 0f01 	tst.w	sl, #1
 8000996:	bf14      	ite	ne
 8000998:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 800099c:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 80009a0:	f8c8 3000 	str.w	r3, [r8]
 80009a4:	f7ff ffac 	bl	8000900 <set_port.part.0>
			XSVF_GPIO_BSRR = (1 << TCK_Pin);
 80009a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ac:	6183      	str	r3, [r0, #24]
		for (j=0;j<8;j++) {
 80009ae:	3501      	adds	r5, #1
 80009b0:	f7ff ffa6 	bl	8000900 <set_port.part.0>
 80009b4:	2d08      	cmp	r5, #8
				}
				set_port(TDI, byte&1);
				byte >>= 1;
 80009b6:	ea4f 0a5a 	mov.w	sl, sl, lsr #1

				pulse_clock();
				length--;
 80009ba:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
		for (j=0;j<8;j++) {
 80009be:	d1cd      	bne.n	800095c <shift.constprop.0+0x3c>
			}
		}
		if (tdo)
 80009c0:	b10f      	cbz	r7, 80009c6 <shift.constprop.0+0xa6>
			tdo[i] = in;
 80009c2:	f889 4000 	strb.w	r4, [r9]
	for (i=0; i<n_bytes; i++) {
 80009c6:	9b03      	ldr	r3, [sp, #12]
 80009c8:	f109 0901 	add.w	r9, r9, #1
 80009cc:	4599      	cmp	r9, r3
 80009ce:	d1ba      	bne.n	8000946 <shift.constprop.0+0x26>
	}
}
 80009d0:	b005      	add	sp, #20
 80009d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009d6:	bf00      	nop
 80009d8:	200017fc 	.word	0x200017fc
 80009dc:	40020800 	.word	0x40020800
 80009e0:	20001567 	.word	0x20001567
 80009e4:	20000c3c 	.word	0x20000c3c
 80009e8:	20000c38 	.word	0x20000c38
 80009ec:	40020000 	.word	0x40020000
 80009f0:	080065b0 	.word	0x080065b0
	...

08000a00 <state_step>:
void state_step(uint8_t tms){
 8000a00:	b508      	push	{r3, lr}
	if (p == TMS && val == 0) BSRR_TMS = ((1 << TMS_Pin) << 16);
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <state_step+0x50>)
 8000a04:	b990      	cbnz	r0, 8000a2c <state_step+0x2c>
 8000a06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a0a:	601a      	str	r2, [r3, #0]
		if (val == 0) {
 8000a0c:	f7ff ff78 	bl	8000900 <set_port.part.0>
			XSVF_GPIO_BSRR = (1 << TCK_Pin);
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <state_step+0x54>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a16:	619a      	str	r2, [r3, #24]
		if (val == 0) {
 8000a18:	f7ff ff72 	bl	8000900 <set_port.part.0>
		current_state = tms_transitions[current_state]&0xf;
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <state_step+0x58>)
 8000a1e:	490f      	ldr	r1, [pc, #60]	; (8000a5c <state_step+0x5c>)
 8000a20:	7813      	ldrb	r3, [r2, #0]
 8000a22:	5ccb      	ldrb	r3, [r1, r3]
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	7013      	strb	r3, [r2, #0]
}
 8000a2a:	bd08      	pop	{r3, pc}
	if (p == TMS && val == 1) BSRR_TMS = ((1 << TMS_Pin));
 8000a2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a30:	601a      	str	r2, [r3, #0]
		if (val == 0) {
 8000a32:	f7ff ff65 	bl	8000900 <set_port.part.0>
			XSVF_GPIO_BSRR = (1 << TCK_Pin);
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <state_step+0x54>)
 8000a38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a3c:	619a      	str	r2, [r3, #24]
		if (val == 0) {
 8000a3e:	f7ff ff5f 	bl	8000900 <set_port.part.0>
		current_state = (tms_transitions[current_state]>>4)&0xf;
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <state_step+0x58>)
 8000a44:	4905      	ldr	r1, [pc, #20]	; (8000a5c <state_step+0x5c>)
 8000a46:	7813      	ldrb	r3, [r2, #0]
 8000a48:	5ccb      	ldrb	r3, [r1, r3]
 8000a4a:	091b      	lsrs	r3, r3, #4
 8000a4c:	7013      	strb	r3, [r2, #0]
}
 8000a4e:	bd08      	pop	{r3, pc}
 8000a50:	20000c3c 	.word	0x20000c3c
 8000a54:	40020800 	.word	0x40020800
 8000a58:	20001567 	.word	0x20001567
 8000a5c:	080065b0 	.word	0x080065b0

08000a60 <state_goto.part.0>:
void state_goto(uint8_t state){
 8000a60:	b570      	push	{r4, r5, r6, lr}
		while (current_state != state) {
 8000a62:	4d08      	ldr	r5, [pc, #32]	; (8000a84 <state_goto.part.0+0x24>)
 8000a64:	782b      	ldrb	r3, [r5, #0]
 8000a66:	4298      	cmp	r0, r3
 8000a68:	d00b      	beq.n	8000a82 <state_goto.part.0+0x22>
 8000a6a:	4e07      	ldr	r6, [pc, #28]	; (8000a88 <state_goto.part.0+0x28>)
 8000a6c:	4604      	mov	r4, r0
			uint8_t tms = (tms_map[current_state]>>state) & 1;
 8000a6e:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 8000a72:	4120      	asrs	r0, r4
			state_step(tms);
 8000a74:	f000 0001 	and.w	r0, r0, #1
 8000a78:	f7ff ffc2 	bl	8000a00 <state_step>
		while (current_state != state) {
 8000a7c:	782b      	ldrb	r3, [r5, #0]
 8000a7e:	42a3      	cmp	r3, r4
 8000a80:	d1f5      	bne.n	8000a6e <state_goto.part.0+0xe>
}
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	20001567 	.word	0x20001567
 8000a88:	08006590 	.word	0x08006590
 8000a8c:	00000000 	.word	0x00000000

08000a90 <delay>:
void delay(uint32_t microsec){
 8000a90:	b538      	push	{r3, r4, r5, lr}
    __NOP();
 8000a92:	bf00      	nop
    __NOP();
 8000a94:	bf00      	nop
    __NOP();
 8000a96:	bf00      	nop
    __NOP();
 8000a98:	bf00      	nop
		if (val == 0) {
 8000a9a:	f7ff ff31 	bl	8000900 <set_port.part.0>
	while (--microsec > 0) {
 8000a9e:	3801      	subs	r0, #1
 8000aa0:	d007      	beq.n	8000ab2 <delay+0x22>
			XSVF_GPIO_BSRR = (1 << TCK_Pin);
 8000aa2:	4d04      	ldr	r5, [pc, #16]	; (8000ab4 <delay+0x24>)
 8000aa4:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 8000aa8:	61ac      	str	r4, [r5, #24]
		if (val == 0) {
 8000aaa:	f7ff ff29 	bl	8000900 <set_port.part.0>
	while (--microsec > 0) {
 8000aae:	3801      	subs	r0, #1
 8000ab0:	d1fa      	bne.n	8000aa8 <delay+0x18>
}
 8000ab2:	bd38      	pop	{r3, r4, r5, pc}
 8000ab4:	40020800 	.word	0x40020800
	...

08000ac0 <sdr>:

static int sdr(int flags){
 8000ac0:	b510      	push	{r4, lr}
	int failTimes=0;
	uint8_t tdo_actual[MAX_SIZE];

	if (flags&SDR_BEGIN) {
 8000ac2:	07c2      	lsls	r2, r0, #31
static int sdr(int flags){
 8000ac4:	b088      	sub	sp, #32
 8000ac6:	4604      	mov	r4, r0
	if (flags&SDR_BEGIN) {
 8000ac8:	d40d      	bmi.n	8000ae6 <sdr+0x26>

	/* data processing loop */
	while (1)
	{

		shift(flags, tdi_value, tdo_actual, sdr_size);
 8000aca:	2200      	movs	r2, #0
 8000acc:	4669      	mov	r1, sp
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f7ff ff26 	bl	8000920 <shift.constprop.0>
			/* No TDO check - exit */
			break;
		}

	}
	if (flags&SDR_END) {
 8000ad4:	07a3      	lsls	r3, r4, #30
 8000ad6:	d40a      	bmi.n	8000aee <sdr+0x2e>
		state_goto(STATE_RTI);
	}
	
	delay(run_test);
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <sdr+0x38>)
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	f7ff ffd8 	bl	8000a90 <delay>
	return 0;
}
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	b008      	add	sp, #32
 8000ae4:	bd10      	pop	{r4, pc}
	if (state==STATE_TLR) {
 8000ae6:	2004      	movs	r0, #4
 8000ae8:	f7ff ffba 	bl	8000a60 <state_goto.part.0>
 8000aec:	e7ed      	b.n	8000aca <sdr+0xa>
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff ffb6 	bl	8000a60 <state_goto.part.0>
 8000af4:	e7f0      	b.n	8000ad8 <sdr+0x18>
 8000af6:	bf00      	nop
 8000af8:	200017f0 	.word	0x200017f0
 8000afc:	00000000 	.word	0x00000000

08000b00 <requests_hook>:
 * Handling messages not implemented in the default handler nor in the
 * SerialUSB handler.
 */
static bool requests_hook(USBDriver *usbp) {

  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8000b00:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
static bool requests_hook(USBDriver *usbp) {
 8000b04:	4603      	mov	r3, r0
  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8000b06:	f002 001f 	and.w	r0, r2, #31
 8000b0a:	2801      	cmp	r0, #1
 8000b0c:	d103      	bne.n	8000b16 <requests_hook+0x16>
 8000b0e:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8000b12:	290b      	cmp	r1, #11
 8000b14:	d01b      	beq.n	8000b4e <requests_hook+0x4e>
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8000b16:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8000b1a:	2a20      	cmp	r2, #32
 8000b1c:	d001      	beq.n	8000b22 <requests_hook+0x22>
      return true;
    default:
      return false;
    }
  }
  return false;
 8000b1e:	2000      	movs	r0, #0
      (usbp->setup[1] == USB_REQ_SET_INTERFACE)) {
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  }
  return sduRequestsHook(usbp);
}
 8000b20:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000b22:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000b26:	2a21      	cmp	r2, #33	; 0x21
 8000b28:	d809      	bhi.n	8000b3e <requests_hook+0x3e>
 8000b2a:	2a1f      	cmp	r2, #31
 8000b2c:	d9f7      	bls.n	8000b1e <requests_hook+0x1e>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <requests_hook+0x58>)
 8000b30:	639a      	str	r2, [r3, #56]	; 0x38
 8000b32:	2107      	movs	r1, #7
 8000b34:	2200      	movs	r2, #0
 8000b36:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
      return true;
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000b3e:	2a22      	cmp	r2, #34	; 0x22
 8000b40:	d1ed      	bne.n	8000b1e <requests_hook+0x1e>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000b42:	2200      	movs	r2, #0
 8000b44:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8000b48:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4770      	bx	lr
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8000b54:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8000b56:	4770      	bx	lr
 8000b58:	20000800 	.word	0x20000800
 8000b5c:	00000000 	.word	0x00000000

08000b60 <get_descriptor>:
  switch (dtype) {
 8000b60:	2902      	cmp	r1, #2
 8000b62:	d006      	beq.n	8000b72 <get_descriptor+0x12>
 8000b64:	2903      	cmp	r1, #3
 8000b66:	d006      	beq.n	8000b76 <get_descriptor+0x16>
 8000b68:	2901      	cmp	r1, #1
    return &vcom_device_descriptor;
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <get_descriptor+0x28>)
 8000b6c:	bf18      	it	ne
 8000b6e:	2000      	movne	r0, #0
 8000b70:	4770      	bx	lr
  switch (dtype) {
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <get_descriptor+0x2c>)
 8000b74:	4770      	bx	lr
    if (dindex < 4)
 8000b76:	2a03      	cmp	r2, #3
 8000b78:	d803      	bhi.n	8000b82 <get_descriptor+0x22>
      return &vcom_strings[dindex];
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <get_descriptor+0x30>)
 8000b7c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8000b80:	4770      	bx	lr
  return NULL;
 8000b82:	2000      	movs	r0, #0
}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	08006624 	.word	0x08006624
 8000b8c:	080065d0 	.word	0x080065d0
 8000b90:	080066ac 	.word	0x080066ac
	...

08000ba0 <_port_irq_epilogue>:
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <_port_irq_epilogue+0x3c>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000bae:	d102      	bne.n	8000bb6 <_port_irq_epilogue+0x16>
 8000bb0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000bb4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000bb6:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 8000bba:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bc0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000bc2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000bc6:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <_port_irq_epilogue+0x40>)
 8000bc8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000bca:	6952      	ldr	r2, [r2, #20]
    if (chSchIsPreemptionRequired()) {
 8000bcc:	6889      	ldr	r1, [r1, #8]
 8000bce:	6892      	ldr	r2, [r2, #8]
 8000bd0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000bd2:	bf8c      	ite	hi
 8000bd4:	4a03      	ldrhi	r2, [pc, #12]	; (8000be4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000bd6:	4a04      	ldrls	r2, [pc, #16]	; (8000be8 <_port_irq_epilogue+0x48>)
 8000bd8:	619a      	str	r2, [r3, #24]
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00
 8000be0:	200013b0 	.word	0x200013b0
 8000be4:	08000303 	.word	0x08000303
 8000be8:	08000306 	.word	0x08000306
 8000bec:	00000000 	.word	0x00000000

08000bf0 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000bf0:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000bf2:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000bf4:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000bf8:	4249      	negs	r1, r1
 8000bfa:	1a20      	subs	r0, r4, r0
 8000bfc:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000bfe:	4298      	cmp	r0, r3
 8000c00:	d304      	bcc.n	8000c0c <chCoreAllocAlignedI+0x1c>
 8000c02:	4284      	cmp	r4, r0
 8000c04:	d302      	bcc.n	8000c0c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000c06:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8000c08:	6050      	str	r0, [r2, #4]
 8000c0a:	4770      	bx	lr
    return NULL;
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	bc10      	pop	{r4}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20001548 	.word	0x20001548
	...

08000c20 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000c20:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <chTMStopMeasurementX+0x40>)
 8000c24:	6852      	ldr	r2, [r2, #4]
 8000c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  tmp->last = (now - tmp->last) - offset;
 8000c28:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000c2a:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 8000c2c:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8000c2e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000c32:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000c34:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000c36:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 8000c38:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8000c3a:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c3c:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 8000c3e:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000c40:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c42:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000c46:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000c48:	bf88      	it	hi
 8000c4a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8000c4c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000c4e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000c52:	bf38      	it	cc
 8000c54:	6003      	strcc	r3, [r0, #0]
}
 8000c56:	bc30      	pop	{r4, r5}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e0001000 	.word	0xe0001000
 8000c60:	200013b0 	.word	0x200013b0
	...

08000c70 <chTMStartMeasurementX>:
 8000c70:	4b01      	ldr	r3, [pc, #4]	; (8000c78 <chTMStartMeasurementX+0x8>)
 8000c72:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000c74:	6083      	str	r3, [r0, #8]
}
 8000c76:	4770      	bx	lr
 8000c78:	e0001000 	.word	0xe0001000
 8000c7c:	00000000 	.word	0x00000000

08000c80 <chThdCreateSuspendedI>:
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000c80:	6883      	ldr	r3, [r0, #8]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8000c82:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 8000c84:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8000c86:	b4f0      	push	{r4, r5, r6, r7}
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000c88:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 8000c8c:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 8000c8e:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 8000c92:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000c94:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000c96:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8000c9a:	6805      	ldr	r5, [r0, #0]
 8000c9c:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000c9e:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8000ca2:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8000ca6:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 8000caa:	f843 2c3c 	str.w	r2, [r3, #-60]
 8000cae:	6914      	ldr	r4, [r2, #16]
  tp->prio      = prio;
 8000cb0:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8000cb4:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 8000cb8:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000cbc:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8000cc0:	4d0c      	ldr	r5, [pc, #48]	; (8000cf4 <chThdCreateSuspendedI+0x74>)
 8000cc2:	f843 0c34 	str.w	r0, [r3, #-52]
  tp->epending  = (eventmask_t)0;
 8000cc6:	e943 1105 	strd	r1, r1, [r3, #-20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000cca:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000cce:	f843 5c4c 	str.w	r5, [r3, #-76]
  queue_init(&tp->msgqueue);
 8000cd2:	f1a3 011c 	sub.w	r1, r3, #28
  list_init(&tp->waiting);
 8000cd6:	f1a3 0520 	sub.w	r5, r3, #32
  REG_INSERT(tp);
 8000cda:	f843 4c38 	str.w	r4, [r3, #-56]
 8000cde:	60e0      	str	r0, [r4, #12]
 8000ce0:	6110      	str	r0, [r2, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000ce2:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8000ce6:	f843 1c18 	str.w	r1, [r3, #-24]
}
 8000cea:	bcf0      	pop	{r4, r5, r6, r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200013b0 	.word	0x200013b0
 8000cf4:	080002f1 	.word	0x080002f1
	...

08000d00 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d00:	2320      	movs	r3, #32
 8000d02:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000d06:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	d80d      	bhi.n	8000d2a <wakeup+0x2a>
 8000d0e:	e8df f003 	tbb	[pc, r3]
 8000d12:	0c27      	.short	0x0c27
 8000d14:	0408230c 	.word	0x0408230c
 8000d18:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 8000d1a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000d1c:	6893      	ldr	r3, [r2, #8]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000d22:	e9d0 3200 	ldrd	r3, r2, [r0]
 8000d26:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000d28:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 8000d2a:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8000d2c:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000d2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8000d32:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000d36:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8000d38:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000d3c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	428a      	cmp	r2, r1
 8000d42:	d2fb      	bcs.n	8000d3c <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	2100      	movs	r1, #0
 8000d48:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000d4c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000d4e:	6058      	str	r0, [r3, #4]
 8000d50:	f381 8811 	msr	BASEPRI, r1
}
 8000d54:	bc10      	pop	{r4}
 8000d56:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8000d58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
    break;
 8000d5e:	e7e4      	b.n	8000d2a <wakeup+0x2a>
 8000d60:	2300      	movs	r3, #0
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	4770      	bx	lr
 8000d68:	200013b0 	.word	0x200013b0
 8000d6c:	00000000 	.word	0x00000000

08000d70 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000d70:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8000d72:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8000d76:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000d7a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d2fb      	bcs.n	8000d7a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000d88:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000d8a:	6058      	str	r0, [r3, #4]
}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200013b0 	.word	0x200013b0
	...

08000da0 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000da4:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 8000da6:	4284      	cmp	r4, r0
 8000da8:	d00a      	beq.n	8000dc0 <chThdDequeueAllI.constprop.0+0x20>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000daa:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 8000dae:	6803      	ldr	r3, [r0, #0]
 8000db0:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000db2:	605c      	str	r4, [r3, #4]
 8000db4:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000db6:	f7ff ffdb 	bl	8000d70 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000dba:	6820      	ldr	r0, [r4, #0]
 8000dbc:	42a0      	cmp	r0, r4
 8000dbe:	d1f6      	bne.n	8000dae <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000dc0:	bd38      	pop	{r3, r4, r5, pc}
 8000dc2:	bf00      	nop
	...

08000dd0 <chThdDequeueNextI.constprop.0>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	6800      	ldr	r0, [r0, #0]
  if (queue_notempty(tqp)) {
 8000dd4:	4283      	cmp	r3, r0
 8000dd6:	d006      	beq.n	8000de6 <chThdDequeueNextI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8000dd8:	6802      	ldr	r2, [r0, #0]
 8000dda:	601a      	str	r2, [r3, #0]
  tp->u.rdymsg = msg;
 8000ddc:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000dde:	6053      	str	r3, [r2, #4]
 8000de0:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000de2:	f7ff bfc5 	b.w	8000d70 <chSchReadyI>
}
 8000de6:	4770      	bx	lr
	...

08000df0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000df2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000df4:	42a0      	cmp	r0, r4
 8000df6:	d021      	beq.n	8000e3c <chEvtBroadcastFlagsI+0x4c>
 8000df8:	4607      	mov	r7, r0
 8000dfa:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	e004      	b.n	8000e0a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000e00:	2a0b      	cmp	r2, #11
 8000e02:	d01c      	beq.n	8000e3e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8000e04:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000e06:	42a7      	cmp	r7, r4
 8000e08:	d018      	beq.n	8000e3c <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 8000e0a:	68e3      	ldr	r3, [r4, #12]
 8000e0c:	432b      	orrs	r3, r5
 8000e0e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000e10:	b115      	cbz	r5, 8000e18 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000e12:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000e14:	421d      	tst	r5, r3
 8000e16:	d0f5      	beq.n	8000e04 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 8000e18:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8000e1c:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000e1e:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000e22:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000e24:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000e26:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000e28:	d1ea      	bne.n	8000e00 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000e2a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000e2c:	4213      	tst	r3, r2
 8000e2e:	d0e9      	beq.n	8000e04 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8000e30:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000e32:	f7ff ff9d 	bl	8000d70 <chSchReadyI>
    elp = elp->next;
 8000e36:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000e38:	42a7      	cmp	r7, r4
 8000e3a:	d1e6      	bne.n	8000e0a <chEvtBroadcastFlagsI+0x1a>
}
 8000e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000e3e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000e40:	ea32 0303 	bics.w	r3, r2, r3
 8000e44:	d1de      	bne.n	8000e04 <chEvtBroadcastFlagsI+0x14>
 8000e46:	e7f3      	b.n	8000e30 <chEvtBroadcastFlagsI+0x40>
	...

08000e50 <chSysPolledDelayX>:
 8000e50:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <chSysPolledDelayX+0x10>)
 8000e52:	6851      	ldr	r1, [r2, #4]
 8000e54:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 8000e56:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	d8fb      	bhi.n	8000e54 <chSysPolledDelayX+0x4>
  }
}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e0001000 	.word	0xe0001000
	...

08000e70 <_idle_thread>:
}
 8000e70:	e7fe      	b.n	8000e70 <_idle_thread>
 8000e72:	bf00      	nop
	...

08000e80 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000e80:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8000e84:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000e86:	68dc      	ldr	r4, [r3, #12]
 8000e88:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 8000e8a:	6813      	ldr	r3, [r2, #0]
 8000e8c:	60d3      	str	r3, [r2, #12]
  if (isp->txsize == 0) {
 8000e8e:	b9f3      	cbnz	r3, 8000ece <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8000e90:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8000e92:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8000e96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e9a:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d02a      	beq.n	8000efe <usb_lld_start_in+0x7e>
 8000ea8:	b208      	sxth	r0, r1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8000eaa:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8000eae:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8000eb0:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8000eb4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8000eb8:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8000ebc:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
 8000ec0:	fa03 f101 	lsl.w	r1, r3, r1
 8000ec4:	4301      	orrs	r1, r0
}
 8000ec6:	bc30      	pop	{r4, r5}
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8000ec8:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 8000ecc:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8000ece:	b919      	cbnz	r1, 8000ed8 <usb_lld_start_in+0x58>
 8000ed0:	2b40      	cmp	r3, #64	; 0x40
      isp->txsize = EP0_MAX_INSIZE;
 8000ed2:	bf84      	itt	hi
 8000ed4:	2340      	movhi	r3, #64	; 0x40
 8000ed6:	6013      	strhi	r3, [r2, #0]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8000ed8:	8a25      	ldrh	r5, [r4, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8000eda:	6d42      	ldr	r2, [r0, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8000edc:	1e68      	subs	r0, r5, #1
 8000ede:	4418      	add	r0, r3
 8000ee0:	fbb0 f0f5 	udiv	r0, r0, r5
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8000ee4:	eb02 1541 	add.w	r5, r2, r1, lsl #5
 8000ee8:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8000eec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ef0:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000ef4:	6823      	ldr	r3, [r4, #0]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d1d4      	bne.n	8000ea8 <usb_lld_start_in+0x28>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8000efe:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8000f02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f06:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8000f0a:	b208      	sxth	r0, r1
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8000f0c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8000f10:	bf14      	ite	ne
 8000f12:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8000f16:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
 8000f1a:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8000f1e:	e7c4      	b.n	8000eaa <usb_lld_start_in+0x2a>

08000f20 <otg_epin_handler.constprop.0>:
  stm32_otg_t *otgp = usbp->otg;
 8000f20:	4a20      	ldr	r2, [pc, #128]	; (8000fa4 <otg_epin_handler.constprop.0+0x84>)
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8000f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
 8000f24:	6d56      	ldr	r6, [r2, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8000f26:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8000f2a:	4604      	mov	r4, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8000f2c:	f8d3 5908 	ldr.w	r5, [r3, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8000f30:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8000f34:	07e8      	lsls	r0, r5, #31
 8000f36:	d503      	bpl.n	8000f40 <otg_epin_handler.constprop.0+0x20>
 8000f38:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8000f3c:	07d9      	lsls	r1, r3, #31
 8000f3e:	d408      	bmi.n	8000f52 <otg_epin_handler.constprop.0+0x32>
  if ((epint & DIEPINT_TXFE) &&
 8000f40:	062b      	lsls	r3, r5, #24
 8000f42:	d505      	bpl.n	8000f50 <otg_epin_handler.constprop.0+0x30>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8000f44:	f8d6 2834 	ldr.w	r2, [r6, #2100]	; 0x834
 8000f48:	2301      	movs	r3, #1
 8000f4a:	40a3      	lsls	r3, r4
  if ((epint & DIEPINT_TXFE) &&
 8000f4c:	4213      	tst	r3, r2
 8000f4e:	d115      	bne.n	8000f7c <otg_epin_handler.constprop.0+0x5c>
}
 8000f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000f52:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8000f56:	68d8      	ldr	r0, [r3, #12]
 8000f58:	6943      	ldr	r3, [r0, #20]
    if (isp->txsize < isp->totsize) {
 8000f5a:	681f      	ldr	r7, [r3, #0]
 8000f5c:	68d9      	ldr	r1, [r3, #12]
 8000f5e:	428f      	cmp	r7, r1
 8000f60:	d311      	bcc.n	8000f86 <otg_epin_handler.constprop.0+0x66>
      _usb_isr_invoke_in_cb(usbp, ep);
 8000f62:	8913      	ldrh	r3, [r2, #8]
 8000f64:	6887      	ldr	r7, [r0, #8]
 8000f66:	2101      	movs	r1, #1
 8000f68:	40a1      	lsls	r1, r4
 8000f6a:	ea23 0301 	bic.w	r3, r3, r1
 8000f6e:	8113      	strh	r3, [r2, #8]
 8000f70:	2f00      	cmp	r7, #0
 8000f72:	d0e5      	beq.n	8000f40 <otg_epin_handler.constprop.0+0x20>
 8000f74:	4610      	mov	r0, r2
 8000f76:	4621      	mov	r1, r4
 8000f78:	47b8      	blx	r7
 8000f7a:	e7e1      	b.n	8000f40 <otg_epin_handler.constprop.0+0x20>
    otg_txfifo_handler(usbp, ep);
 8000f7c:	4620      	mov	r0, r4
}
 8000f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    otg_txfifo_handler(usbp, ep);
 8000f82:	f7ff bc4d 	b.w	8000820 <otg_txfifo_handler.constprop.0>
      isp->txsize = isp->totsize - isp->txsize;
 8000f86:	1bc9      	subs	r1, r1, r7
      isp->txcnt  = 0;
 8000f88:	2700      	movs	r7, #0
 8000f8a:	e9c3 1700 	strd	r1, r7, [r3]
 8000f8e:	2320      	movs	r3, #32
 8000f90:	f383 8811 	msr	BASEPRI, r3
      usb_lld_start_in(usbp, ep);
 8000f94:	4610      	mov	r0, r2
 8000f96:	4621      	mov	r1, r4
 8000f98:	f7ff ff72 	bl	8000e80 <usb_lld_start_in>
 8000f9c:	f387 8811 	msr	BASEPRI, r7
 8000fa0:	e7ce      	b.n	8000f40 <otg_epin_handler.constprop.0+0x20>
 8000fa2:	bf00      	nop
 8000fa4:	2000132c 	.word	0x2000132c
	...

08000fb0 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000fb0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8000fb4:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000fb6:	68dd      	ldr	r5, [r3, #12]
 8000fb8:	69ab      	ldr	r3, [r5, #24]
  osp->totsize = osp->rxsize;
 8000fba:	681c      	ldr	r4, [r3, #0]
 8000fbc:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8000fbe:	b919      	cbnz	r1, 8000fc8 <usb_lld_start_out+0x18>
 8000fc0:	2c40      	cmp	r4, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 8000fc2:	bf84      	itt	hi
 8000fc4:	2440      	movhi	r4, #64	; 0x40
 8000fc6:	601c      	strhi	r4, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8000fc8:	8a6b      	ldrh	r3, [r5, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8000fca:	6d40      	ldr	r0, [r0, #84]	; 0x54
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000fcc:	682d      	ldr	r5, [r5, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	4422      	add	r2, r4
 8000fd2:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	3303      	adds	r3, #3
 8000fdc:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8000fe0:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8000fe4:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000fe8:	f005 0203 	and.w	r2, r5, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8000fec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000ff0:	2a01      	cmp	r2, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8000ff2:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000ff6:	d00a      	beq.n	800100e <usb_lld_start_out+0x5e>
 8000ff8:	b209      	sxth	r1, r1
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8000ffa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000ffe:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8001000:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8001004:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001008:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 800100c:	4770      	bx	lr
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800100e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001012:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8001016:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 800101a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800101e:	bf14      	ite	ne
 8001020:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8001024:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8001028:	b209      	sxth	r1, r1
 800102a:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 800102e:	e7e4      	b.n	8000ffa <usb_lld_start_out+0x4a>

08001030 <otg_epout_handler.constprop.0>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001034:	4f24      	ldr	r7, [pc, #144]	; (80010c8 <otg_epout_handler.constprop.0+0x98>)
 8001036:	6d7e      	ldr	r6, [r7, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8001038:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800103c:	4604      	mov	r4, r0
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800103e:	f8d3 5b08 	ldr.w	r5, [r3, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8001042:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8001046:	0728      	lsls	r0, r5, #28
 8001048:	d503      	bpl.n	8001052 <otg_epout_handler.constprop.0+0x22>
 800104a:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 800104e:	0719      	lsls	r1, r3, #28
 8001050:	d431      	bmi.n	80010b6 <otg_epout_handler.constprop.0+0x86>
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8001052:	07ea      	lsls	r2, r5, #31
 8001054:	d52d      	bpl.n	80010b2 <otg_epout_handler.constprop.0+0x82>
 8001056:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 800105a:	07db      	lsls	r3, r3, #31
 800105c:	d529      	bpl.n	80010b2 <otg_epout_handler.constprop.0+0x82>
    osp = usbp->epc[ep]->out_state;
 800105e:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8001062:	68d9      	ldr	r1, [r3, #12]
    if (ep == 0) {
 8001064:	b95c      	cbnz	r4, 800107e <otg_epout_handler.constprop.0+0x4e>
    osp = usbp->epc[ep]->out_state;
 8001066:	698a      	ldr	r2, [r1, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8001068:	8a48      	ldrh	r0, [r1, #18]
 800106a:	6855      	ldr	r5, [r2, #4]
 800106c:	fbb5 f3f0 	udiv	r3, r5, r0
 8001070:	fb00 5313 	mls	r3, r0, r3, r5
 8001074:	b91b      	cbnz	r3, 800107e <otg_epout_handler.constprop.0+0x4e>
          (osp->rxsize < osp->totsize)) {
 8001076:	6810      	ldr	r0, [r2, #0]
 8001078:	68d3      	ldr	r3, [r2, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 800107a:	4298      	cmp	r0, r3
 800107c:	d30d      	bcc.n	800109a <otg_epout_handler.constprop.0+0x6a>
    _usb_isr_invoke_out_cb(usbp, ep);
 800107e:	897b      	ldrh	r3, [r7, #10]
 8001080:	68cd      	ldr	r5, [r1, #12]
 8001082:	2201      	movs	r2, #1
 8001084:	40a2      	lsls	r2, r4
 8001086:	ea23 0302 	bic.w	r3, r3, r2
 800108a:	817b      	strh	r3, [r7, #10]
 800108c:	b18d      	cbz	r5, 80010b2 <otg_epout_handler.constprop.0+0x82>
 800108e:	4621      	mov	r1, r4
 8001090:	462b      	mov	r3, r5
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <otg_epout_handler.constprop.0+0x98>)
}
 8001094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _usb_isr_invoke_out_cb(usbp, ep);
 8001098:	4718      	bx	r3
        osp->rxsize = osp->totsize - osp->rxsize;
 800109a:	1a1b      	subs	r3, r3, r0
        osp->rxcnt  = 0;
 800109c:	e9c2 3400 	strd	r3, r4, [r2]
 80010a0:	2320      	movs	r3, #32
 80010a2:	f383 8811 	msr	BASEPRI, r3
        usb_lld_start_out(usbp, ep);
 80010a6:	4808      	ldr	r0, [pc, #32]	; (80010c8 <otg_epout_handler.constprop.0+0x98>)
 80010a8:	4621      	mov	r1, r4
 80010aa:	f7ff ff81 	bl	8000fb0 <usb_lld_start_out>
 80010ae:	f384 8811 	msr	BASEPRI, r4
}
 80010b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _usb_isr_invoke_setup_cb(usbp, ep);
 80010b6:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 80010ba:	4621      	mov	r1, r4
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	4638      	mov	r0, r7
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4798      	blx	r3
 80010c4:	e7c5      	b.n	8001052 <otg_epout_handler.constprop.0+0x22>
 80010c6:	bf00      	nop
 80010c8:	2000132c 	.word	0x2000132c
 80010cc:	00000000 	.word	0x00000000

080010d0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80010d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010d4:	b083      	sub	sp, #12

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80010d6:	f002 0c03 	and.w	ip, r2, #3
                           iomode_t mode) {
 80010da:	9201      	str	r2, [sp, #4]
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80010dc:	4666      	mov	r6, ip
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80010de:	f3c2 05c1 	ubfx	r5, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80010e2:	09d7      	lsrs	r7, r2, #7
  uint32_t bit     = 0;
 80010e4:	2400      	movs	r4, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 80010e6:	f04f 090f 	mov.w	r9, #15
      m1 = 1 << bit;
 80010ea:	f04f 0801 	mov.w	r8, #1
      m2 = 3 << (bit * 2);
 80010ee:	f04f 0e03 	mov.w	lr, #3
 80010f2:	e012      	b.n	800111a <_pal_lld_setgroupmode+0x4a>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80010f4:	f8d0 b000 	ldr.w	fp, [r0]
 80010f8:	ea03 030b 	and.w	r3, r3, fp
 80010fc:	4333      	orrs	r3, r6
        if (bit < 8)
 80010fe:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8001100:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8001102:	d83e      	bhi.n	8001182 <_pal_lld_setgroupmode+0xb2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001104:	6a03      	ldr	r3, [r0, #32]
 8001106:	ea23 0202 	bic.w	r2, r3, r2
 800110a:	ea42 020a 	orr.w	r2, r2, sl
 800110e:	6202      	str	r2, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8001110:	0849      	lsrs	r1, r1, #1
 8001112:	d033      	beq.n	800117c <_pal_lld_setgroupmode+0xac>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
 8001114:	00ad      	lsls	r5, r5, #2
    pupdr <<= 2;
    moder <<= 2;
 8001116:	00b6      	lsls	r6, r6, #2
    bit++;
 8001118:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 800111a:	07cb      	lsls	r3, r1, #31
 800111c:	d5f8      	bpl.n	8001110 <_pal_lld_setgroupmode+0x40>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800111e:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8001120:	fa08 f204 	lsl.w	r2, r8, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001124:	ea23 0302 	bic.w	r3, r3, r2
 8001128:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800112a:	6882      	ldr	r2, [r0, #8]
      m2 = 3 << (bit * 2);
 800112c:	0063      	lsls	r3, r4, #1
 800112e:	fa0e f303 	lsl.w	r3, lr, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001132:	ea22 0203 	bic.w	r2, r2, r3
 8001136:	432a      	orrs	r2, r5
 8001138:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800113a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 800113e:	f004 0207 	and.w	r2, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001142:	ea2a 0a03 	bic.w	sl, sl, r3
      altrmask = altr << ((bit & 7) * 4);
 8001146:	0092      	lsls	r2, r2, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001148:	f1bc 0f02 	cmp.w	ip, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800114c:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001150:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8001154:	fa07 fa02 	lsl.w	sl, r7, r2
      m4 = 15 << ((bit & 7) * 4);
 8001158:	fa09 f202 	lsl.w	r2, r9, r2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 800115c:	d1ca      	bne.n	80010f4 <_pal_lld_setgroupmode+0x24>
        if (bit < 8)
 800115e:	2c07      	cmp	r4, #7
 8001160:	d816      	bhi.n	8001190 <_pal_lld_setgroupmode+0xc0>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001162:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8001166:	ea2b 0202 	bic.w	r2, fp, r2
 800116a:	ea42 020a 	orr.w	r2, r2, sl
 800116e:	6202      	str	r2, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8001170:	6802      	ldr	r2, [r0, #0]
 8001172:	4013      	ands	r3, r2
 8001174:	4333      	orrs	r3, r6
    if (!mask)
 8001176:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8001178:	6003      	str	r3, [r0, #0]
    if (!mask)
 800117a:	d1cb      	bne.n	8001114 <_pal_lld_setgroupmode+0x44>
  }
}
 800117c:	b003      	add	sp, #12
 800117e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001182:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001184:	ea23 0202 	bic.w	r2, r3, r2
 8001188:	ea42 020a 	orr.w	r2, r2, sl
 800118c:	6242      	str	r2, [r0, #36]	; 0x24
 800118e:	e7bf      	b.n	8001110 <_pal_lld_setgroupmode+0x40>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001190:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8001194:	ea2b 0202 	bic.w	r2, fp, r2
 8001198:	ea42 020a 	orr.w	r2, r2, sl
 800119c:	6242      	str	r2, [r0, #36]	; 0x24
 800119e:	e7e7      	b.n	8001170 <_pal_lld_setgroupmode+0xa0>

080011a0 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80011a6:	4604      	mov	r4, r0
 80011a8:	2b15      	cmp	r3, #21
 80011aa:	d816      	bhi.n	80011da <_usb_ep0out+0x3a>
 80011ac:	e8df f003 	tbb	[pc, r3]
 80011b0:	15151516 	.word	0x15151516
 80011b4:	15161515 	.word	0x15161515
 80011b8:	16161615 	.word	0x16161615
 80011bc:	15151515 	.word	0x15151515
 80011c0:	15151515 	.word	0x15151515
 80011c4:	2c0b      	.short	0x2c0b
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 80011c6:	68c3      	ldr	r3, [r0, #12]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	b92b      	cbnz	r3, 80011da <_usb_ep0out+0x3a>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 80011ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80011d0:	b103      	cbz	r3, 80011d4 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 80011d2:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 80011da:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 80011dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80011de:	6841      	ldr	r1, [r0, #4]
 80011e0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80011e4:	680d      	ldr	r5, [r1, #0]
 80011e6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80011ea:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80011ee:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80011f2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80011f6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80011fa:	b10d      	cbz	r5, 8001200 <_usb_ep0out+0x60>
 80011fc:	2106      	movs	r1, #6
 80011fe:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001200:	2306      	movs	r3, #6
 8001202:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001206:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001208:	230b      	movs	r3, #11
 800120a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 800120e:	2320      	movs	r3, #32
 8001210:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001214:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001216:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001218:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 800121a:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800121c:	f042 0201 	orr.w	r2, r2, #1
 8001220:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8001222:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 8001224:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001228:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 800122a:	f7ff fe29 	bl	8000e80 <usb_lld_start_in>
 800122e:	f385 8811 	msr	BASEPRI, r5
}
 8001232:	bd38      	pop	{r3, r4, r5, pc}
	...

08001240 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001240:	b538      	push	{r3, r4, r5, lr}
 8001242:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001246:	4604      	mov	r4, r0
 8001248:	2b15      	cmp	r3, #21
 800124a:	d821      	bhi.n	8001290 <_usb_ep0in+0x50>
 800124c:	e8df f003 	tbb	[pc, r3]
 8001250:	2020200b 	.word	0x2020200b
 8001254:	200b2020 	.word	0x200b2020
 8001258:	48312120 	.word	0x48312120
 800125c:	20202020 	.word	0x20202020
 8001260:	20202020 	.word	0x20202020
 8001264:	0b0b      	.short	0x0b0b
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001266:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001268:	6841      	ldr	r1, [r0, #4]
 800126a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800126e:	680d      	ldr	r5, [r1, #0]
 8001270:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001274:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001278:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800127c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001280:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8001284:	b10d      	cbz	r5, 800128a <_usb_ep0in+0x4a>
 8001286:	2106      	movs	r1, #6
 8001288:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 800128a:	2306      	movs	r3, #6
 800128c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001290:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 8001292:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 8001296:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 800129a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    max = (size_t)get_hword(&usbp->setup[6]);
 800129c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if ((usbp->ep0n < max) &&
 80012a0:	4299      	cmp	r1, r3
 80012a2:	d206      	bcs.n	80012b2 <_usb_ep0in+0x72>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 80012a4:	68c3      	ldr	r3, [r0, #12]
 80012a6:	8a1b      	ldrh	r3, [r3, #16]
 80012a8:	fbb1 f5f3 	udiv	r5, r1, r3
 80012ac:	fb03 1515 	mls	r5, r3, r5, r1
    if ((usbp->ep0n < max) &&
 80012b0:	b1ed      	cbz	r5, 80012ee <_usb_ep0in+0xae>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 80012b2:	2314      	movs	r3, #20
 80012b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80012b8:	2320      	movs	r3, #32
 80012ba:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 80012be:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80012c0:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 80012c2:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 80012c4:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80012c6:	f042 0201 	orr.w	r2, r2, #1
 80012ca:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 80012cc:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 80012ce:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 80012d2:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 80012d4:	4629      	mov	r1, r5
 80012d6:	f7ff fe6b 	bl	8000fb0 <usb_lld_start_out>
 80012da:	f385 8811 	msr	BASEPRI, r5
}
 80012de:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 80012e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012e2:	b103      	cbz	r3, 80012e6 <_usb_ep0in+0xa6>
      usbp->ep0endcb(usbp);
 80012e4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80012ec:	bd38      	pop	{r3, r4, r5, pc}
 80012ee:	2320      	movs	r3, #32
 80012f0:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 80012f4:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80012f6:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 80012f8:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80012fa:	f042 0201 	orr.w	r2, r2, #1
 80012fe:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8001300:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 8001302:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001306:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8001308:	f7ff fdba 	bl	8000e80 <usb_lld_start_in>
 800130c:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8001310:	230a      	movs	r3, #10
 8001312:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001316:	bd38      	pop	{r3, r4, r5, pc}
	...

08001320 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 8001320:	b4f0      	push	{r4, r5, r6, r7}
  isp = usbp->epc[ep]->in_state;
 8001322:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001326:	8907      	ldrh	r7, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001328:	f8d5 c00c 	ldr.w	ip, [r5, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800132c:	2501      	movs	r5, #1
  isp = usbp->epc[ep]->in_state;
 800132e:	f8dc 6014 	ldr.w	r6, [ip, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001332:	408d      	lsls	r5, r1
 8001334:	433d      	orrs	r5, r7
  isp->txcnt  = 0;
 8001336:	2700      	movs	r7, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001338:	8105      	strh	r5, [r0, #8]
  isp->txcnt  = 0;
 800133a:	e9c6 3700 	strd	r3, r7, [r6]
  isp->txbuf  = buf;
 800133e:	60b2      	str	r2, [r6, #8]
}
 8001340:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_in(usbp, ep);
 8001342:	f7ff bd9d 	b.w	8000e80 <usb_lld_start_in>
 8001346:	bf00      	nop
	...

08001350 <usbDisableEndpointsI>:
  otg_ram_reset(usbp);
 8001350:	6d81      	ldr	r1, [r0, #88]	; 0x58
  usbp->transmitting &= 1U;
 8001352:	6883      	ldr	r3, [r0, #8]
void usbDisableEndpointsI(USBDriver *usbp) {
 8001354:	b4f0      	push	{r4, r5, r6, r7}
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8001356:	680c      	ldr	r4, [r1, #0]
 8001358:	65c4      	str	r4, [r0, #92]	; 0x5c
    usbp->epc[i] = NULL;
 800135a:	2200      	movs	r2, #0
  usbp->transmitting &= 1U;
 800135c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001360:	688f      	ldr	r7, [r1, #8]
  otg_disable_ep(usbp);
 8001362:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001364:	6083      	str	r3, [r0, #8]
    usbp->epc[i] = NULL;
 8001366:	e9c0 2204 	strd	r2, r2, [r0, #16]
 800136a:	6182      	str	r2, [r0, #24]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800136c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001370:	e000      	b.n	8001374 <usbDisableEndpointsI+0x24>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001372:	4632      	mov	r2, r6
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001374:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8001378:	460b      	mov	r3, r1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 800137a:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 800137e:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001380:	f102 0601 	add.w	r6, r2, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8001384:	da05      	bge.n	8001392 <usbDisableEndpointsI+0x42>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8001386:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 800138a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800138e:	f8c1 0900 	str.w	r0, [r1, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8001392:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 8001396:	2800      	cmp	r0, #0
 8001398:	da05      	bge.n	80013a6 <usbDisableEndpointsI+0x56>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 800139a:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 800139e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80013a2:	f8c1 0b00 	str.w	r0, [r1, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80013a6:	42ba      	cmp	r2, r7
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80013a8:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80013ac:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80013b0:	d1df      	bne.n	8001372 <usbDisableEndpointsI+0x22>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80013b2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80013b6:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
}
 80013ba:	bcf0      	pop	{r4, r5, r6, r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
	...

080013d0 <_ctl.lto_priv.0>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 80013d0:	2000      	movs	r0, #0
 80013d2:	4770      	bx	lr
	...

080013e0 <_ctl.lto_priv.1>:
 80013e0:	2000      	movs	r0, #0
 80013e2:	4770      	bx	lr
	...

080013f0 <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80013f2:	f8d0 148c 	ldr.w	r1, [r0, #1164]	; 0x48c
 80013f6:	680a      	ldr	r2, [r1, #0]
 80013f8:	7813      	ldrb	r3, [r2, #0]
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	d102      	bne.n	8001404 <sdu_start_receive+0x14>
 80013fe:	7a03      	ldrb	r3, [r0, #8]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d001      	beq.n	8001408 <sdu_start_receive+0x18>
    return true;
 8001404:	2001      	movs	r0, #1
}
 8001406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001408:	790c      	ldrb	r4, [r1, #4]
 800140a:	8955      	ldrh	r5, [r2, #10]
 800140c:	2301      	movs	r3, #1
 800140e:	fa03 f404 	lsl.w	r4, r3, r4
 8001412:	4225      	tst	r5, r4
 8001414:	d1f6      	bne.n	8001404 <sdu_start_receive+0x14>
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8001416:	e9d0 4607 	ldrd	r4, r6, [r0, #28]
 800141a:	42b4      	cmp	r4, r6
 800141c:	d014      	beq.n	8001448 <sdu_start_receive+0x58>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800141e:	7949      	ldrb	r1, [r1, #5]
  osp = usbp->epc[ep]->out_state;
 8001420:	eb02 0381 	add.w	r3, r2, r1, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001424:	2001      	movs	r0, #1
  osp = usbp->epc[ep]->out_state;
 8001426:	68db      	ldr	r3, [r3, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001428:	4088      	lsls	r0, r1
  osp = usbp->epc[ep]->out_state;
 800142a:	699e      	ldr	r6, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800142c:	4305      	orrs	r5, r0
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 800142e:	1d23      	adds	r3, r4, #4
  osp->rxsize = n;
 8001430:	f44f 7780 	mov.w	r7, #256	; 0x100
  osp->rxcnt  = 0;
 8001434:	2400      	movs	r4, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001436:	8155      	strh	r5, [r2, #10]
  usb_lld_start_out(usbp, ep);
 8001438:	4610      	mov	r0, r2
  osp->rxcnt  = 0;
 800143a:	e9c6 7400 	strd	r7, r4, [r6]
  osp->rxbuf  = buf;
 800143e:	60b3      	str	r3, [r6, #8]
  usb_lld_start_out(usbp, ep);
 8001440:	f7ff fdb6 	bl	8000fb0 <usb_lld_start_out>
  return false;
 8001444:	4620      	mov	r0, r4
}
 8001446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ibqIsFullI(ibqp)) {
 8001448:	6980      	ldr	r0, [r0, #24]
 800144a:	2800      	cmp	r0, #0
 800144c:	d0e7      	beq.n	800141e <sdu_start_receive+0x2e>
 800144e:	e7d9      	b.n	8001404 <sdu_start_receive+0x14>

08001450 <ibnotify>:
  (void) sdu_start_receive(sdup);
 8001450:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001452:	f7ff bfcd 	b.w	80013f0 <sdu_start_receive>
 8001456:	bf00      	nop
	...

08001460 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001460:	3109      	adds	r1, #9
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8001462:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001464:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8001468:	b194      	cbz	r4, 8001490 <sduDataReceived+0x30>
 800146a:	2320      	movs	r3, #32
 800146c:	f383 8811 	msr	BASEPRI, r3
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8001470:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001474:	6813      	ldr	r3, [r2, #0]
 8001476:	7952      	ldrb	r2, [r2, #5]
 8001478:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 8001482:	b935      	cbnz	r5, 8001492 <sduDataReceived+0x32>
  (void) sdu_start_receive(sdup);
 8001484:	4620      	mov	r0, r4
 8001486:	f7ff ffb3 	bl	80013f0 <sdu_start_receive>
 800148a:	2300      	movs	r3, #0
 800148c:	f383 8811 	msr	BASEPRI, r3
}
 8001490:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001492:	2104      	movs	r1, #4
 8001494:	1860      	adds	r0, r4, r1
 8001496:	f7ff fcab 	bl	8000df0 <chEvtBroadcastFlagsI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 800149a:	69e3      	ldr	r3, [r4, #28]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 800149c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  *((size_t *)ibqp->bwrptr) = size;
 800149e:	601d      	str	r5, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 80014a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  ibqp->bcounter++;
 80014a2:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 80014a4:	4403      	add	r3, r0
  if (ibqp->bwrptr >= ibqp->btop) {
 80014a6:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 80014a8:	61e3      	str	r3, [r4, #28]
  ibqp->bcounter++;
 80014aa:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 80014ae:	bf28      	it	cs
 80014b0:	6b23      	ldrcs	r3, [r4, #48]	; 0x30
  ibqp->bcounter++;
 80014b2:	61a2      	str	r2, [r4, #24]
    ibqPostFullBufferI(&sdup->ibqueue, size);
 80014b4:	f104 000c 	add.w	r0, r4, #12
    ibqp->bwrptr = ibqp->buffers;
 80014b8:	bf28      	it	cs
 80014ba:	61e3      	strcs	r3, [r4, #28]
  chThdDequeueNextI(tqp, msg);
 80014bc:	f7ff fc88 	bl	8000dd0 <chThdDequeueNextI.constprop.0>
 80014c0:	e7e0      	b.n	8001484 <sduDataReceived+0x24>
 80014c2:	bf00      	nop
	...

080014d0 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 80014d0:	4603      	mov	r3, r0

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 80014d2:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 80014d6:	4282      	cmp	r2, r0
 80014d8:	d003      	beq.n	80014e2 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 80014da:	f850 3b04 	ldr.w	r3, [r0], #4
 80014de:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 80014e0:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f8      	beq.n	80014da <obqGetFullBufferI+0xa>
    return NULL;
 80014e8:	2000      	movs	r0, #0
 80014ea:	4770      	bx	lr
 80014ec:	0000      	movs	r0, r0
	...

080014f0 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 80014f0:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 80014f2:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80014f4:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	7819      	ldrb	r1, [r3, #0]
 80014fc:	2904      	cmp	r1, #4
static void obnotify(io_buffers_queue_t *bqp) {
 80014fe:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001500:	d102      	bne.n	8001508 <obnotify+0x18>
 8001502:	7a21      	ldrb	r1, [r4, #8]
 8001504:	2902      	cmp	r1, #2
 8001506:	d001      	beq.n	800150c <obnotify+0x1c>
}
 8001508:	b002      	add	sp, #8
 800150a:	bd10      	pop	{r4, pc}
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800150c:	7911      	ldrb	r1, [r2, #4]
 800150e:	891a      	ldrh	r2, [r3, #8]
 8001510:	2301      	movs	r3, #1
 8001512:	408b      	lsls	r3, r1
 8001514:	4213      	tst	r3, r2
 8001516:	d1f7      	bne.n	8001508 <obnotify+0x18>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001518:	a901      	add	r1, sp, #4
 800151a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800151e:	f7ff ffd7 	bl	80014d0 <obqGetFullBufferI>
 8001522:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001524:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8001528:	9b01      	ldr	r3, [sp, #4]
 800152a:	7901      	ldrb	r1, [r0, #4]
 800152c:	6800      	ldr	r0, [r0, #0]
 800152e:	f7ff fef7 	bl	8001320 <usbStartTransmitI>
 8001532:	e7e9      	b.n	8001508 <obnotify+0x18>
	...

08001540 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8001540:	b510      	push	{r4, lr}
 8001542:	2320      	movs	r3, #32
 8001544:	b082      	sub	sp, #8
 8001546:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800154a:	4c1e      	ldr	r4, [pc, #120]	; (80015c4 <sof_handler+0x84>)
 800154c:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001550:	6813      	ldr	r3, [r2, #0]
 8001552:	7819      	ldrb	r1, [r3, #0]
 8001554:	2904      	cmp	r1, #4
 8001556:	d102      	bne.n	800155e <sof_handler+0x1e>
 8001558:	7a21      	ldrb	r1, [r4, #8]
 800155a:	2902      	cmp	r1, #2
 800155c:	d004      	beq.n	8001568 <sof_handler+0x28>
 800155e:	2300      	movs	r3, #0
 8001560:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&OSTRICHPORT);
  osalSysUnlockFromISR();
}
 8001564:	b002      	add	sp, #8
 8001566:	bd10      	pop	{r4, pc}
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001568:	7911      	ldrb	r1, [r2, #4]
 800156a:	891a      	ldrh	r2, [r3, #8]
 800156c:	2301      	movs	r3, #1
 800156e:	408b      	lsls	r3, r1
 8001570:	4213      	tst	r3, r2
 8001572:	d1f4      	bne.n	800155e <sof_handler+0x1e>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001574:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 8001578:	4293      	cmp	r3, r2
 800157a:	d1f0      	bne.n	800155e <sof_handler+0x1e>
 800157c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800157e:	2a00      	cmp	r2, #0
 8001580:	d0ed      	beq.n	800155e <sof_handler+0x1e>
 8001582:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001584:	2a00      	cmp	r2, #0
 8001586:	d0ea      	beq.n	800155e <sof_handler+0x1e>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8001588:	3a04      	subs	r2, #4

    if (size > 0U) {
 800158a:	1ad2      	subs	r2, r2, r3
 800158c:	d0e7      	beq.n	800155e <sof_handler+0x1e>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 800158e:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
 8001590:	e9d4 1017 	ldrd	r1, r0, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 8001594:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 8001596:	428b      	cmp	r3, r1
      obqp->bcounter--;
 8001598:	6d22      	ldr	r2, [r4, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 800159a:	6563      	str	r3, [r4, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 800159c:	bf24      	itt	cs
 800159e:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
 80015a0:	6563      	strcs	r3, [r4, #84]	; 0x54
      obqp->bcounter--;
 80015a2:	3a01      	subs	r2, #1
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 80015a4:	2300      	movs	r3, #0
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80015a6:	a901      	add	r1, sp, #4
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <sof_handler+0x88>)
      obqp->bcounter--;
 80015aa:	6522      	str	r2, [r4, #80]	; 0x50
      obqp->ptr = NULL;
 80015ac:	66e3      	str	r3, [r4, #108]	; 0x6c
 80015ae:	f7ff ff8f 	bl	80014d0 <obqGetFullBufferI>
 80015b2:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80015b4:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 80015b8:	9b01      	ldr	r3, [sp, #4]
 80015ba:	7901      	ldrb	r1, [r0, #4]
 80015bc:	6800      	ldr	r0, [r0, #0]
 80015be:	f7ff feaf 	bl	8001320 <usbStartTransmitI>
 80015c2:	e7cc      	b.n	800155e <sof_handler+0x1e>
 80015c4:	20000e9c 	.word	0x20000e9c
 80015c8:	20000ee0 	.word	0x20000ee0
 80015cc:	00000000 	.word	0x00000000

080015d0 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 80015d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 80015d4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 80015d8:	b082      	sub	sp, #8
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 80015da:	699e      	ldr	r6, [r3, #24]
  if (sdup == NULL) {
 80015dc:	b1f6      	cbz	r6, 800161c <sduDataTransmitted+0x4c>
 80015de:	4604      	mov	r4, r0
 80015e0:	460d      	mov	r5, r1
 80015e2:	2320      	movs	r3, #32
 80015e4:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 80015e8:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 80015ec:	1d30      	adds	r0, r6, #4
 80015ee:	2108      	movs	r1, #8
 80015f0:	f7ff fbfe 	bl	8000df0 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b993      	cbnz	r3, 8001622 <sduDataTransmitted+0x52>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80015fc:	f106 0844 	add.w	r8, r6, #68	; 0x44
 8001600:	4640      	mov	r0, r8
 8001602:	a901      	add	r1, sp, #4
 8001604:	f7ff ff64 	bl	80014d0 <obqGetFullBufferI>
  if (buf != NULL) {
 8001608:	4602      	mov	r2, r0
 800160a:	b320      	cbz	r0, 8001656 <sduDataTransmitted+0x86>
    usbStartTransmitI(usbp, ep, buf, n);
 800160c:	9b01      	ldr	r3, [sp, #4]
 800160e:	4629      	mov	r1, r5
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff fe85 	bl	8001320 <usbStartTransmitI>
 8001616:	2300      	movs	r3, #0
 8001618:	f383 8811 	msr	BASEPRI, r3
}
 800161c:	b002      	add	sp, #8
 800161e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (obqp->brdptr >= obqp->btop) {
 8001622:	e9d6 2017 	ldrd	r2, r0, [r6, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8001626:	6db3      	ldr	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8001628:	6d31      	ldr	r1, [r6, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 800162a:	4403      	add	r3, r0
  if (obqp->brdptr >= obqp->btop) {
 800162c:	4293      	cmp	r3, r2
  obqp->brdptr += obqp->bsize;
 800162e:	65b3      	str	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8001630:	f101 0101 	add.w	r1, r1, #1
    obqp->brdptr = obqp->buffers;
 8001634:	bf28      	it	cs
 8001636:	6eb3      	ldrcs	r3, [r6, #104]	; 0x68
  obqp->bcounter++;
 8001638:	6531      	str	r1, [r6, #80]	; 0x50
    obqReleaseEmptyBufferI(&sdup->obqueue);
 800163a:	f106 0844 	add.w	r8, r6, #68	; 0x44
    obqp->brdptr = obqp->buffers;
 800163e:	bf28      	it	cs
 8001640:	65b3      	strcs	r3, [r6, #88]	; 0x58
  chThdDequeueNextI(tqp, msg);
 8001642:	4640      	mov	r0, r8
 8001644:	f7ff fbc4 	bl	8000dd0 <chThdDequeueNextI.constprop.0>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001648:	4640      	mov	r0, r8
 800164a:	a901      	add	r1, sp, #4
 800164c:	f7ff ff40 	bl	80014d0 <obqGetFullBufferI>
  if (buf != NULL) {
 8001650:	4602      	mov	r2, r0
 8001652:	2800      	cmp	r0, #0
 8001654:	d1da      	bne.n	800160c <sduDataTransmitted+0x3c>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	2a00      	cmp	r2, #0
 800165e:	d0da      	beq.n	8001616 <sduDataTransmitted+0x46>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8001660:	8a1b      	ldrh	r3, [r3, #16]
 8001662:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001664:	4013      	ands	r3, r2
 8001666:	d1d6      	bne.n	8001616 <sduDataTransmitted+0x46>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8001668:	4629      	mov	r1, r5
 800166a:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fe56 	bl	8001320 <usbStartTransmitI>
 8001674:	e7cf      	b.n	8001616 <sduDataTransmitted+0x46>
 8001676:	bf00      	nop
	...

08001680 <chSchWakeupS.constprop.0>:
  thread_t *otp = currp;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <chSchWakeupS.constprop.0+0x54>)
 8001682:	6959      	ldr	r1, [r3, #20]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001684:	b430      	push	{r4, r5}
  if (ntp->prio <= otp->prio) {
 8001686:	688d      	ldr	r5, [r1, #8]
 8001688:	6884      	ldr	r4, [r0, #8]
  ntp->u.rdymsg = msg;
 800168a:	2200      	movs	r2, #0
  if (ntp->prio <= otp->prio) {
 800168c:	42ac      	cmp	r4, r5
  ntp->u.rdymsg = msg;
 800168e:	6242      	str	r2, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8001690:	d80c      	bhi.n	80016ac <chSchWakeupS.constprop.0+0x2c>
  tp->state = CH_STATE_READY;
 8001692:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8001696:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	4294      	cmp	r4, r2
 800169c:	d9fb      	bls.n	8001696 <chSchWakeupS.constprop.0+0x16>
  tp->queue.prev             = cp->queue.prev;
 800169e:	685a      	ldr	r2, [r3, #4]
}
 80016a0:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 80016a2:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80016a6:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80016a8:	6058      	str	r0, [r3, #4]
}
 80016aa:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 80016ac:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80016b0:	461a      	mov	r2, r3
    cp = cp->queue.next;
 80016b2:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 80016b4:	6894      	ldr	r4, [r2, #8]
 80016b6:	42a5      	cmp	r5, r4
 80016b8:	d3fb      	bcc.n	80016b2 <chSchWakeupS.constprop.0+0x32>
  tp->queue.prev             = cp->queue.prev;
 80016ba:	6854      	ldr	r4, [r2, #4]
 80016bc:	604c      	str	r4, [r1, #4]
    ntp->state = CH_STATE_CURRENT;
 80016be:	2501      	movs	r5, #1
  tp->queue.next             = cp;
 80016c0:	600a      	str	r2, [r1, #0]
  tp->queue.prev->queue.next = tp;
 80016c2:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 80016c4:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 80016c6:	f880 5020 	strb.w	r5, [r0, #32]
}
 80016ca:	bc30      	pop	{r4, r5}
    currp = ntp;
 80016cc:	6158      	str	r0, [r3, #20]
    chSysSwitch(ntp, otp);
 80016ce:	f7fe be07 	b.w	80002e0 <_port_switch>
 80016d2:	bf00      	nop
 80016d4:	200013b0 	.word	0x200013b0
	...

080016e0 <chSchGoSleepS>:
  thread_t *otp = currp;
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <chSchGoSleepS+0x24>)
 80016e2:	6959      	ldr	r1, [r3, #20]
  thread_t *tp = tqp->next;
 80016e4:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 80016e6:	b410      	push	{r4}
  otp->state = newstate;
 80016e8:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 80016ec:	6810      	ldr	r0, [r2, #0]
 80016ee:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 80016f0:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80016f2:	6043      	str	r3, [r0, #4]
 80016f4:	f882 4020 	strb.w	r4, [r2, #32]
}
 80016f8:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 80016fa:	615a      	str	r2, [r3, #20]
  chSysSwitch(currp, otp);
 80016fc:	4610      	mov	r0, r2
 80016fe:	f7fe bdef 	b.w	80002e0 <_port_switch>
 8001702:	bf00      	nop
 8001704:	200013b0 	.word	0x200013b0
	...

08001710 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001710:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001712:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <chMtxLockS+0xbc>)
void chMtxLockS(mutex_t *mp) {
 8001714:	4604      	mov	r4, r0

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8001716:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 8001718:	695d      	ldr	r5, [r3, #20]
  if (mp->owner != NULL) {
 800171a:	b330      	cbz	r0, 800176a <chMtxLockS+0x5a>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 800171c:	68aa      	ldr	r2, [r5, #8]
 800171e:	6883      	ldr	r3, [r0, #8]
 8001720:	4293      	cmp	r3, r2
 8001722:	d207      	bcs.n	8001734 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8001724:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8001728:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 800172a:	2b06      	cmp	r3, #6
 800172c:	d035      	beq.n	800179a <chMtxLockS+0x8a>
 800172e:	2b07      	cmp	r3, #7
 8001730:	d020      	beq.n	8001774 <chMtxLockS+0x64>
 8001732:	b19b      	cbz	r3, 800175c <chMtxLockS+0x4c>
  thread_t *cp = (thread_t *)tqp;
 8001734:	4623      	mov	r3, r4
 8001736:	e003      	b.n	8001740 <chMtxLockS+0x30>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001738:	6899      	ldr	r1, [r3, #8]
 800173a:	68aa      	ldr	r2, [r5, #8]
 800173c:	4291      	cmp	r1, r2
 800173e:	d302      	bcc.n	8001746 <chMtxLockS+0x36>
    cp = cp->queue.next;
 8001740:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001742:	429c      	cmp	r4, r3
 8001744:	d1f8      	bne.n	8001738 <chMtxLockS+0x28>
  tp->queue.prev             = cp->queue.prev;
 8001746:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8001748:	2006      	movs	r0, #6
 800174a:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 800174e:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8001750:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 8001752:	626c      	str	r4, [r5, #36]	; 0x24
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 8001754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8001758:	f7ff bfc2 	b.w	80016e0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 800175c:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001760:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001762:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8001764:	f7ff fb04 	bl	8000d70 <chSchReadyI>
          break;
 8001768:	e7e4      	b.n	8001734 <chMtxLockS+0x24>
    mp->next = ctp->mtxlist;
 800176a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800176c:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 8001770:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8001772:	bd70      	pop	{r4, r5, r6, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8001774:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8001778:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800177a:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800177c:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 800177e:	4633      	mov	r3, r6
 8001780:	e002      	b.n	8001788 <chMtxLockS+0x78>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	428a      	cmp	r2, r1
 8001786:	d802      	bhi.n	800178e <chMtxLockS+0x7e>
    cp = cp->queue.next;
 8001788:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800178a:	429e      	cmp	r6, r3
 800178c:	d1f9      	bne.n	8001782 <chMtxLockS+0x72>
  tp->queue.prev             = cp->queue.prev;
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001794:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001796:	6058      	str	r0, [r3, #4]
 8001798:	e7cc      	b.n	8001734 <chMtxLockS+0x24>
  tp->queue.prev->queue.next = tp->queue.next;
 800179a:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800179e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80017a0:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80017a2:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 80017a4:	4633      	mov	r3, r6
 80017a6:	e002      	b.n	80017ae <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80017a8:	6899      	ldr	r1, [r3, #8]
 80017aa:	428a      	cmp	r2, r1
 80017ac:	d802      	bhi.n	80017b4 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 80017ae:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80017b0:	429e      	cmp	r6, r3
 80017b2:	d1f9      	bne.n	80017a8 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80017ba:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80017bc:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 80017be:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 80017c0:	68aa      	ldr	r2, [r5, #8]
 80017c2:	6883      	ldr	r3, [r0, #8]
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d3ad      	bcc.n	8001724 <chMtxLockS+0x14>
 80017c8:	e7b4      	b.n	8001734 <chMtxLockS+0x24>
 80017ca:	bf00      	nop
 80017cc:	200013b0 	.word	0x200013b0

080017d0 <chThdExitS>:
void chThdExitS(msg_t msg) {
 80017d0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <chThdExitS+0x44>)
 80017d4:	695c      	ldr	r4, [r3, #20]
  return (bool)(tlp->next != (thread_t *)tlp);
 80017d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 80017d8:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 80017da:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80017de:	42ab      	cmp	r3, r5
 80017e0:	d007      	beq.n	80017f2 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fac2 	bl	8000d70 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 80017ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	d1f7      	bne.n	80017e2 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 80017f2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80017f6:	b93b      	cbnz	r3, 8001808 <chThdExitS+0x38>
 80017f8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80017fc:	079b      	lsls	r3, r3, #30
 80017fe:	d103      	bne.n	8001808 <chThdExitS+0x38>
    REG_REMOVE(tp);
 8001800:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 8001804:	60d3      	str	r3, [r2, #12]
 8001806:	611a      	str	r2, [r3, #16]
}
 8001808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800180c:	200f      	movs	r0, #15
 800180e:	f7ff bf67 	b.w	80016e0 <chSchGoSleepS>
 8001812:	bf00      	nop
 8001814:	200013b0 	.word	0x200013b0
	...

08001820 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8001822:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001824:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8001826:	d049      	beq.n	80018bc <chSchGoSleepTimeoutS+0x9c>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8001828:	4c3f      	ldr	r4, [pc, #252]	; (8001928 <chSchGoSleepTimeoutS+0x108>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 800182a:	4f40      	ldr	r7, [pc, #256]	; (800192c <chSchGoSleepTimeoutS+0x10c>)
  vtp->par = par;
 800182c:	6963      	ldr	r3, [r4, #20]
 800182e:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001830:	4626      	mov	r6, r4
 8001832:	2902      	cmp	r1, #2
 8001834:	f856 3f18 	ldr.w	r3, [r6, #24]!
 8001838:	4605      	mov	r5, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800183a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800183e:	bf38      	it	cc
 8001840:	2102      	movcc	r1, #2
 8001842:	42b3      	cmp	r3, r6
 8001844:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vtp->func = vtfunc;
 8001846:	9704      	str	r7, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001848:	d05b      	beq.n	8001902 <chSchGoSleepTimeoutS+0xe2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800184a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800184c:	1bd2      	subs	r2, r2, r7
 800184e:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001850:	d32e      	bcc.n	80018b0 <chSchGoSleepTimeoutS+0x90>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8001852:	6898      	ldr	r0, [r3, #8]
      p = p->next;
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
      delta -= p->delta;
 8001858:	1a09      	subs	r1, r1, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800185a:	4291      	cmp	r1, r2
 800185c:	d904      	bls.n	8001868 <chSchGoSleepTimeoutS+0x48>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 800185e:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8001860:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	428a      	cmp	r2, r1
 8001866:	d3fa      	bcc.n	800185e <chSchGoSleepTimeoutS+0x3e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 800186c:	af01      	add	r7, sp, #4
  vtp->next = p;
 800186e:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 8001870:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 8001872:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 8001874:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 800187a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 800187e:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001880:	6222      	str	r2, [r4, #32]
    chSchGoSleepS(newstate);
 8001882:	4628      	mov	r0, r5
 8001884:	f7ff ff2c 	bl	80016e0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001888:	9b04      	ldr	r3, [sp, #16]
 800188a:	b16b      	cbz	r3, 80018a8 <chSchGoSleepTimeoutS+0x88>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800188c:	69a3      	ldr	r3, [r4, #24]
 800188e:	42bb      	cmp	r3, r7
 8001890:	d01b      	beq.n	80018ca <chSchGoSleepTimeoutS+0xaa>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001892:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8001896:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8001898:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800189a:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 800189c:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800189e:	d003      	beq.n	80018a8 <chSchGoSleepTimeoutS+0x88>
      vtp->next->delta += vtp->delta;
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	9903      	ldr	r1, [sp, #12]
 80018a4:	440a      	add	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 80018a8:	6963      	ldr	r3, [r4, #20]
}
 80018aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80018ac:	b007      	add	sp, #28
 80018ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	4291      	cmp	r1, r2
 80018b4:	d2d1      	bcs.n	800185a <chSchGoSleepTimeoutS+0x3a>
  return systime + (systime_t)interval;
 80018b6:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80018b8:	6347      	str	r7, [r0, #52]	; 0x34
 80018ba:	e7ce      	b.n	800185a <chSchGoSleepTimeoutS+0x3a>
    chSchGoSleepS(newstate);
 80018bc:	4c1a      	ldr	r4, [pc, #104]	; (8001928 <chSchGoSleepTimeoutS+0x108>)
 80018be:	f7ff ff0f 	bl	80016e0 <chSchGoSleepS>
  return currp->u.rdymsg;
 80018c2:	6963      	ldr	r3, [r4, #20]
}
 80018c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80018c6:	b007      	add	sp, #28
 80018c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80018ca:	9b01      	ldr	r3, [sp, #4]
 80018cc:	61a3      	str	r3, [r4, #24]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80018ce:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80018d0:	42b3      	cmp	r3, r6
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80018d2:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 80018d4:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80018d6:	d022      	beq.n	800191e <chSchGoSleepTimeoutS+0xfe>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80018dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  ch.vtlist.next->delta += vtp->delta;
 80018de:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 80018e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80018e8:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80018ea:	4282      	cmp	r2, r0
 80018ec:	d9dc      	bls.n	80018a8 <chSchGoSleepTimeoutS+0x88>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80018ee:	1acb      	subs	r3, r1, r3
 80018f0:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80018f2:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80018f4:	bf98      	it	ls
 80018f6:	1c82      	addls	r2, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80018f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 80018fc:	440a      	add	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001900:	e7d2      	b.n	80018a8 <chSchGoSleepTimeoutS+0x88>
 8001902:	188b      	adds	r3, r1, r2
      ch.vtlist.next = vtp;
 8001904:	af01      	add	r7, sp, #4
      ch.vtlist.lasttime = now;
 8001906:	6262      	str	r2, [r4, #36]	; 0x24
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001908:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 800190c:	e9c4 7706 	strd	r7, r7, [r4, #24]
      vtp->delta = delay;
 8001910:	9103      	str	r1, [sp, #12]
  STM32_ST_TIM->SR     = 0;
 8001912:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001914:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001916:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8001918:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800191a:	60c3      	str	r3, [r0, #12]
 800191c:	e7b1      	b.n	8001882 <chSchGoSleepTimeoutS+0x62>
  STM32_ST_TIM->DIER = 0U;
 800191e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001922:	60da      	str	r2, [r3, #12]
    return;
 8001924:	e7c0      	b.n	80018a8 <chSchGoSleepTimeoutS+0x88>
 8001926:	bf00      	nop
 8001928:	200013b0 	.word	0x200013b0
 800192c:	08000d01 	.word	0x08000d01

08001930 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001930:	b161      	cbz	r1, 800194c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001934:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8001936:	6952      	ldr	r2, [r2, #20]
  tp->queue.prev             = tqp->prev;
 8001938:	6844      	ldr	r4, [r0, #4]
 800193a:	4603      	mov	r3, r0
 800193c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001940:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8001942:	6022      	str	r2, [r4, #0]
}
 8001944:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8001946:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001948:	f7ff bf6a 	b.w	8001820 <chSchGoSleepTimeoutS>
}
 800194c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200013b0 	.word	0x200013b0
	...

08001960 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	4604      	mov	r4, r0
 8001964:	460f      	mov	r7, r1
 8001966:	4616      	mov	r6, r2
 8001968:	2320      	movs	r3, #32
 800196a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800196e:	e003      	b.n	8001978 <oqPutTimeout+0x18>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8001970:	f7ff ffde 	bl	8001930 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001974:	2800      	cmp	r0, #0
 8001976:	db18      	blt.n	80019aa <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8001978:	68a5      	ldr	r5, [r4, #8]
 800197a:	4631      	mov	r1, r6
 800197c:	4620      	mov	r0, r4
 800197e:	2d00      	cmp	r5, #0
 8001980:	d0f6      	beq.n	8001970 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001982:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001984:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001986:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001988:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800198a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800198c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800198e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001990:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001994:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001996:	bf24      	itt	cs
 8001998:	68e3      	ldrcs	r3, [r4, #12]
 800199a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 800199c:	69e3      	ldr	r3, [r4, #28]
 800199e:	b103      	cbz	r3, 80019a2 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 80019a0:	4798      	blx	r3
 80019a2:	2000      	movs	r0, #0
 80019a4:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 80019a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019aa:	f385 8811 	msr	BASEPRI, r5
 80019ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019b0 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80019b0:	3030      	adds	r0, #48	; 0x30
 80019b2:	f7ff bfd5 	b.w	8001960 <oqPutTimeout>
 80019b6:	bf00      	nop
	...

080019c0 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80019c0:	3030      	adds	r0, #48	; 0x30
 80019c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019c6:	f7ff bfcb 	b.w	8001960 <oqPutTimeout>
 80019ca:	bf00      	nop
 80019cc:	0000      	movs	r0, r0
	...

080019d0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80019d0:	b570      	push	{r4, r5, r6, lr}
 80019d2:	2320      	movs	r3, #32
 80019d4:	4605      	mov	r5, r0
 80019d6:	460e      	mov	r6, r1
 80019d8:	f383 8811 	msr	BASEPRI, r3
 80019dc:	e003      	b.n	80019e6 <iqGetTimeout+0x16>
 80019de:	f7ff ffa7 	bl	8001930 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80019e2:	2800      	cmp	r0, #0
 80019e4:	db1a      	blt.n	8001a1c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 80019e6:	68ac      	ldr	r4, [r5, #8]
 80019e8:	4631      	mov	r1, r6
 80019ea:	4628      	mov	r0, r5
 80019ec:	2c00      	cmp	r4, #0
 80019ee:	d0f6      	beq.n	80019de <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 80019f0:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 80019f2:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80019f4:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 80019f6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 80019f8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80019fa:	4282      	cmp	r2, r0
  iqp->q_counter--;
 80019fc:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 80019fe:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001a00:	bf28      	it	cs
 8001a02:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8001a04:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001a06:	bf28      	it	cs
 8001a08:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8001a0a:	69eb      	ldr	r3, [r5, #28]
 8001a0c:	b10b      	cbz	r3, 8001a12 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8001a0e:	4628      	mov	r0, r5
 8001a10:	4798      	blx	r3
 8001a12:	2300      	movs	r3, #0
 8001a14:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001a18:	4620      	mov	r0, r4
}
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
 8001a1c:	f384 8811 	msr	BASEPRI, r4
 8001a20:	bd70      	pop	{r4, r5, r6, pc}
 8001a22:	bf00      	nop
	...

08001a30 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001a30:	300c      	adds	r0, #12
 8001a32:	f7ff bfcd 	b.w	80019d0 <iqGetTimeout>
 8001a36:	bf00      	nop
	...

08001a40 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001a40:	300c      	adds	r0, #12
 8001a42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a46:	f7ff bfc3 	b.w	80019d0 <iqGetTimeout>
 8001a4a:	bf00      	nop
 8001a4c:	0000      	movs	r0, r0
	...

08001a50 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 8001a50:	b538      	push	{r3, r4, r5, lr}
 8001a52:	4604      	mov	r4, r0
 8001a54:	460d      	mov	r5, r1
 8001a56:	e005      	b.n	8001a64 <obqGetEmptyBufferTimeoutS+0x14>
    if (obqp->suspended) {
 8001a58:	7a23      	ldrb	r3, [r4, #8]
 8001a5a:	b983      	cbnz	r3, 8001a7e <obqGetEmptyBufferTimeoutS+0x2e>
 8001a5c:	f7ff ff68 	bl	8001930 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001a60:	2800      	cmp	r0, #0
 8001a62:	db0b      	blt.n	8001a7c <obqGetEmptyBufferTimeoutS+0x2c>
  while (obqIsFullI(obqp)) {
 8001a64:	68e3      	ldr	r3, [r4, #12]
 8001a66:	4629      	mov	r1, r5
 8001a68:	4620      	mov	r0, r4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f4      	beq.n	8001a58 <obqGetEmptyBufferTimeoutS+0x8>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001a6e:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001a70:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001a72:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001a74:	440b      	add	r3, r1
 8001a76:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8001a7a:	2000      	movs	r0, #0
}
 8001a7c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8001a7e:	f06f 0001 	mvn.w	r0, #1
}
 8001a82:	bd38      	pop	{r3, r4, r5, pc}
	...

08001a90 <obqPutTimeout>:
                    sysinterval_t timeout) {
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	2320      	movs	r3, #32
 8001a94:	460d      	mov	r5, r1
 8001a96:	4604      	mov	r4, r0
 8001a98:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 8001a9c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8001a9e:	b1fe      	cbz	r6, 8001ae0 <obqPutTimeout+0x50>
  *obqp->ptr = b;
 8001aa0:	7035      	strb	r5, [r6, #0]
  if (obqp->ptr >= obqp->top) {
 8001aa2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8001aa6:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8001aa8:	4293      	cmp	r3, r2
  obqp->ptr++;
 8001aaa:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 8001aac:	d314      	bcc.n	8001ad8 <obqPutTimeout+0x48>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001aae:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8001ab0:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8001ab2:	69a1      	ldr	r1, [r4, #24]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001ab4:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8001ab6:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8001ab8:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 8001aba:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 8001abc:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 8001abe:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8001ac0:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8001ac2:	bf24      	itt	cs
 8001ac4:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001ac6:	6123      	strcs	r3, [r4, #16]
  obqp->bcounter--;
 8001ac8:	3a01      	subs	r2, #1
  if (obqp->notify != NULL) {
 8001aca:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 8001acc:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 8001ace:	2200      	movs	r2, #0
 8001ad0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 8001ad2:	b10b      	cbz	r3, 8001ad8 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4798      	blx	r3
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f380 8811 	msr	BASEPRI, r0
}
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	f7ff ffb5 	bl	8001a50 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8001ae6:	b908      	cbnz	r0, 8001aec <obqPutTimeout+0x5c>
 8001ae8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001aea:	e7d9      	b.n	8001aa0 <obqPutTimeout+0x10>
 8001aec:	f386 8811 	msr	BASEPRI, r6
}
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
 8001af2:	bf00      	nop
	...

08001b00 <_putt.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8001b00:	3044      	adds	r0, #68	; 0x44
 8001b02:	f7ff bfc5 	b.w	8001a90 <obqPutTimeout>
 8001b06:	bf00      	nop
	...

08001b10 <_put.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8001b10:	3044      	adds	r0, #68	; 0x44
 8001b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b16:	f7ff bfbb 	b.w	8001a90 <obqPutTimeout>
 8001b1a:	bf00      	nop
 8001b1c:	0000      	movs	r0, r0
	...

08001b20 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 8001b20:	b538      	push	{r3, r4, r5, lr}
 8001b22:	4604      	mov	r4, r0
 8001b24:	460d      	mov	r5, r1
 8001b26:	e005      	b.n	8001b34 <ibqGetFullBufferTimeoutS+0x14>
    if (ibqp->suspended) {
 8001b28:	7a23      	ldrb	r3, [r4, #8]
 8001b2a:	b983      	cbnz	r3, 8001b4e <ibqGetFullBufferTimeoutS+0x2e>
 8001b2c:	f7ff ff00 	bl	8001930 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001b30:	2800      	cmp	r0, #0
 8001b32:	db0b      	blt.n	8001b4c <ibqGetFullBufferTimeoutS+0x2c>
  while (ibqIsEmptyI(ibqp)) {
 8001b34:	68e3      	ldr	r3, [r4, #12]
 8001b36:	4629      	mov	r1, r5
 8001b38:	4620      	mov	r0, r4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f4      	beq.n	8001b28 <ibqGetFullBufferTimeoutS+0x8>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001b3e:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001b40:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001b42:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001b44:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001b46:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001b4a:	2000      	movs	r0, #0
}
 8001b4c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8001b4e:	f06f 0001 	mvn.w	r0, #1
}
 8001b52:	bd38      	pop	{r3, r4, r5, pc}
	...

08001b60 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	2320      	movs	r3, #32
 8001b64:	4604      	mov	r4, r0
 8001b66:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 8001b6a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8001b6c:	b1e5      	cbz	r5, 8001ba8 <ibqGetTimeout+0x48>
  msg = (msg_t)*ibqp->ptr;
 8001b6e:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (ibqp->ptr >= ibqp->top) {
 8001b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 8001b74:	62a5      	str	r5, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8001b76:	4295      	cmp	r5, r2
 8001b78:	d311      	bcc.n	8001b9e <ibqGetTimeout+0x3e>
  if (ibqp->brdptr >= ibqp->btop) {
 8001b7a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 8001b7e:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8001b80:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8001b82:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8001b84:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8001b86:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8001b88:	bf24      	itt	cs
 8001b8a:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001b8c:	6163      	strcs	r3, [r4, #20]
  ibqp->bcounter--;
 8001b8e:	3a01      	subs	r2, #1
  if (ibqp->notify != NULL) {
 8001b90:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8001b92:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8001b94:	2200      	movs	r2, #0
 8001b96:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8001b98:	b10b      	cbz	r3, 8001b9e <ibqGetTimeout+0x3e>
    ibqp->notify(ibqp);
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	4798      	blx	r3
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f383 8811 	msr	BASEPRI, r3
}
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	bd70      	pop	{r4, r5, r6, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001ba8:	f7ff ffba 	bl	8001b20 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8001bac:	4606      	mov	r6, r0
 8001bae:	b908      	cbnz	r0, 8001bb4 <ibqGetTimeout+0x54>
 8001bb0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001bb2:	e7dc      	b.n	8001b6e <ibqGetTimeout+0xe>
 8001bb4:	f385 8811 	msr	BASEPRI, r5
      return msg;
 8001bb8:	e7f4      	b.n	8001ba4 <ibqGetTimeout+0x44>
 8001bba:	bf00      	nop
 8001bbc:	0000      	movs	r0, r0
	...

08001bc0 <_gett.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8001bc0:	300c      	adds	r0, #12
 8001bc2:	f7ff bfcd 	b.w	8001b60 <ibqGetTimeout>
 8001bc6:	bf00      	nop
	...

08001bd0 <_get.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8001bd0:	300c      	adds	r0, #12
 8001bd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bd6:	f7ff bfc3 	b.w	8001b60 <ibqGetTimeout>
 8001bda:	bf00      	nop
 8001bdc:	0000      	movs	r0, r0
	...

08001be0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001be0:	b508      	push	{r3, lr}
 8001be2:	4601      	mov	r1, r0
 8001be4:	2320      	movs	r3, #32
 8001be6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001bea:	2008      	movs	r0, #8
 8001bec:	f7ff fe18 	bl	8001820 <chSchGoSleepTimeoutS>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f383 8811 	msr	BASEPRI, r3
}
 8001bf6:	bd08      	pop	{r3, pc}
	...

08001c00 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001c00:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001c02:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001c06:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001c08:	b113      	cbz	r3, 8001c10 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8001c10:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001c14:	6862      	ldr	r2, [r4, #4]
 8001c16:	68cb      	ldr	r3, [r1, #12]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	6819      	ldr	r1, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	64a3      	str	r3, [r4, #72]	; 0x48
 8001c20:	6461      	str	r1, [r4, #68]	; 0x44
 8001c22:	6893      	ldr	r3, [r2, #8]
 8001c24:	b36b      	cbz	r3, 8001c82 <_usb_ep0setup+0x82>
      !(usbp->config->requests_hook_cb(usbp))) {
 8001c26:	4620      	mov	r0, r4
 8001c28:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001c2a:	b350      	cbz	r0, 8001c82 <_usb_ep0setup+0x82>
 8001c2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c2e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 8001c32:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8001c36:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  max = (size_t)get_hword(&usbp->setup[6]);
 8001c3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if (usbp->ep0n > max) {
 8001c3e:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 8001c40:	bf3c      	itt	cc
 8001c42:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 8001c44:	4613      	movcc	r3, r2
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001c46:	0602      	lsls	r2, r0, #24
 8001c48:	f100 80df 	bmi.w	8001e0a <_usb_ep0setup+0x20a>
    if (usbp->ep0n != 0U) {
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 808f 	beq.w	8001d70 <_usb_ep0setup+0x170>
      usbp->ep0state = USB_EP0_OUT_RX;
 8001c52:	2315      	movs	r3, #21
 8001c54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001c58:	2320      	movs	r3, #32
 8001c5a:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8001c5e:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001c60:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001c62:	699b      	ldr	r3, [r3, #24]
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8001c64:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001c68:	f042 0201 	orr.w	r2, r2, #1
  osp->rxcnt  = 0;
 8001c6c:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001c6e:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8001c70:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8001c72:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8001c76:	4629      	mov	r1, r5
 8001c78:	f7ff f99a 	bl	8000fb0 <usb_lld_start_out>
 8001c7c:	f385 8811 	msr	BASEPRI, r5
}
 8001c80:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8001c82:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001c86:	f010 0660 	ands.w	r6, r0, #96	; 0x60
 8001c8a:	d11c      	bne.n	8001cc6 <_usb_ep0setup+0xc6>
           ((uint32_t)usbp->setup[1] << 8U))) {
 8001c8c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001c90:	f000 037f 	and.w	r3, r0, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8001c94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001c98:	f240 3202 	movw	r2, #770	; 0x302
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	f000 8113 	beq.w	8001ec8 <_usb_ep0setup+0x2c8>
 8001ca2:	d844      	bhi.n	8001d2e <_usb_ep0setup+0x12e>
 8001ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca8:	f000 8125 	beq.w	8001ef6 <_usb_ep0setup+0x2f6>
 8001cac:	d922      	bls.n	8001cf4 <_usb_ep0setup+0xf4>
 8001cae:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001cb2:	f000 812f 	beq.w	8001f14 <_usb_ep0setup+0x314>
 8001cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cba:	d104      	bne.n	8001cc6 <_usb_ep0setup+0xc6>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001cbc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	f000 80d2 	beq.w	8001e6a <_usb_ep0setup+0x26a>
 8001cc6:	6d62      	ldr	r2, [r4, #84]	; 0x54
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001cc8:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001ccc:	6861      	ldr	r1, [r4, #4]
 8001cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cd2:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001cd6:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8001cda:	680d      	ldr	r5, [r1, #0]
 8001cdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ce0:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8001ce4:	b115      	cbz	r5, 8001cec <_usb_ep0setup+0xec>
 8001ce6:	2106      	movs	r1, #6
 8001ce8:	4620      	mov	r0, r4
 8001cea:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8001cec:	2306      	movs	r3, #6
 8001cee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001cf2:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d060      	beq.n	8001dba <_usb_ep0setup+0x1ba>
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d150      	bne.n	8001d9e <_usb_ep0setup+0x19e>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8001cfc:	f994 1048 	ldrsb.w	r1, [r4, #72]	; 0x48
 8001d00:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8001d04:	2900      	cmp	r1, #0
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8001d06:	f002 010f 	and.w	r1, r2, #15
 8001d0a:	bfb4      	ite	lt
 8001d0c:	3148      	addlt	r1, #72	; 0x48
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8001d0e:	3158      	addge	r1, #88	; 0x58
 8001d10:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001d12:	0149      	lsls	r1, r1, #5
 8001d14:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8001d16:	040d      	lsls	r5, r1, #16
 8001d18:	d5d6      	bpl.n	8001cc8 <_usb_ep0setup+0xc8>
  if (ctl & DOEPCTL_STALL)
 8001d1a:	0289      	lsls	r1, r1, #10
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8001d1c:	bf4c      	ite	mi
 8001d1e:	4a9c      	ldrmi	r2, [pc, #624]	; (8001f90 <_usb_ep0setup+0x390>)
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001d20:	4a9c      	ldrpl	r2, [pc, #624]	; (8001f94 <_usb_ep0setup+0x394>)
 8001d22:	63a2      	str	r2, [r4, #56]	; 0x38
 8001d24:	2102      	movs	r1, #2
 8001d26:	2200      	movs	r2, #0
 8001d28:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
        return true;
 8001d2c:	e781      	b.n	8001c32 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d32:	f000 80c2 	beq.w	8001eba <_usb_ep0setup+0x2ba>
 8001d36:	d947      	bls.n	8001dc8 <_usb_ep0setup+0x1c8>
 8001d38:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8001d3c:	d139      	bne.n	8001db2 <_usb_ep0setup+0x1b2>
      if (usbp->state == USB_ACTIVE) {
 8001d3e:	7823      	ldrb	r3, [r4, #0]
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	f000 809c 	beq.w	8001e7e <_usb_ep0setup+0x27e>
      if (usbp->setup[2] != 0U) {
 8001d46:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001d4a:	b14b      	cbz	r3, 8001d60 <_usb_ep0setup+0x160>
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001d4c:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8001d4e:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
        usbp->state = USB_ACTIVE;
 8001d52:	2104      	movs	r1, #4
 8001d54:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001d56:	6813      	ldr	r3, [r2, #0]
 8001d58:	b113      	cbz	r3, 8001d60 <_usb_ep0setup+0x160>
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001d60:	2300      	movs	r3, #0
 8001d62:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8001d66:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001d6a:	6423      	str	r3, [r4, #64]	; 0x40
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001d6c:	0603      	lsls	r3, r0, #24
 8001d6e:	d465      	bmi.n	8001e3c <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001d70:	230b      	movs	r3, #11
 8001d72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001d76:	2320      	movs	r3, #32
 8001d78:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001d7c:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d7e:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8001d80:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 8001d82:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8001d8a:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8001d8c:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001d90:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8001d92:	4629      	mov	r1, r5
 8001d94:	f7ff f874 	bl	8000e80 <usb_lld_start_in>
 8001d98:	f385 8811 	msr	BASEPRI, r5
}
 8001d9c:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d191      	bne.n	8001cc6 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8001da2:	2202      	movs	r2, #2
 8001da4:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8001da8:	6423      	str	r3, [r4, #64]	; 0x40
 8001daa:	e9c4 120e 	strd	r1, r2, [r4, #56]	; 0x38
 8001dae:	4613      	mov	r3, r2
 8001db0:	e73f      	b.n	8001c32 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001db2:	f640 4202 	movw	r2, #3074	; 0xc02
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d185      	bne.n	8001cc6 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8001dba:	4b77      	ldr	r3, [pc, #476]	; (8001f98 <_usb_ep0setup+0x398>)
 8001dbc:	63a3      	str	r3, [r4, #56]	; 0x38
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
    return true;
 8001dc6:	e734      	b.n	8001c32 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001dc8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001dcc:	d06b      	beq.n	8001ea6 <_usb_ep0setup+0x2a6>
 8001dce:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	f63f af77 	bhi.w	8001cc6 <_usb_ep0setup+0xc6>
  hw |= (uint16_t)*p << 8U;
 8001dd8:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8001ddc:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8001dde:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8001de2:	684d      	ldr	r5, [r1, #4]
 8001de4:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8001de8:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8001dec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001df0:	4620      	mov	r0, r4
 8001df2:	47a8      	blx	r5
    if (dp == NULL) {
 8001df4:	2800      	cmp	r0, #0
 8001df6:	f43f af66 	beq.w	8001cc6 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8001dfa:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001dfe:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001e02:	6426      	str	r6, [r4, #64]	; 0x40
 8001e04:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return true;
 8001e08:	e713      	b.n	8001c32 <_usb_ep0setup+0x32>
    if (usbp->ep0n != 0U) {
 8001e0a:	b1bb      	cbz	r3, 8001e3c <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_TX;
 8001e0c:	2309      	movs	r3, #9
 8001e0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001e12:	2320      	movs	r3, #32
 8001e14:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001e18:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001e1a:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8001e1c:	695b      	ldr	r3, [r3, #20]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001e1e:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001e22:	f042 0201 	orr.w	r2, r2, #1
  isp->txcnt  = 0;
 8001e26:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001e28:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8001e2a:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8001e2c:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 8001e30:	4629      	mov	r1, r5
 8001e32:	f7ff f825 	bl	8000e80 <usb_lld_start_in>
 8001e36:	f385 8811 	msr	BASEPRI, r5
}
 8001e3a:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001e3c:	2314      	movs	r3, #20
 8001e3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001e42:	2320      	movs	r3, #32
 8001e44:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8001e48:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001e4a:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001e4c:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8001e4e:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8001e56:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8001e58:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 8001e5c:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f7ff f8a6 	bl	8000fb0 <usb_lld_start_out>
 8001e64:	f385 8811 	msr	BASEPRI, r5
}
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
      usbp->status |= 2U;
 8001e6a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001e6e:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status |= 2U;
 8001e70:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001e74:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status |= 2U;
 8001e78:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 8001e7c:	e776      	b.n	8001d6c <_usb_ep0setup+0x16c>
 8001e7e:	2320      	movs	r3, #32
 8001e80:	f383 8811 	msr	BASEPRI, r3
        usbDisableEndpointsI(usbp);
 8001e84:	4620      	mov	r0, r4
 8001e86:	f7ff fa63 	bl	8001350 <usbDisableEndpointsI>
 8001e8a:	f386 8811 	msr	BASEPRI, r6
        usbp->state = USB_SELECTED;
 8001e8e:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001e90:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 8001e92:	f884 604f 	strb.w	r6, [r4, #79]	; 0x4f
        usbp->state = USB_SELECTED;
 8001e96:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f43f af53 	beq.w	8001d46 <_usb_ep0setup+0x146>
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	4798      	blx	r3
 8001ea4:	e74f      	b.n	8001d46 <_usb_ep0setup+0x146>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8001ea6:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8001eaa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001eae:	d048      	beq.n	8001f42 <_usb_ep0setup+0x342>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8001eb6:	6423      	str	r3, [r4, #64]	; 0x40
    return true;
 8001eb8:	e758      	b.n	8001d6c <_usb_ep0setup+0x16c>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8001eba:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 8001ec4:	6426      	str	r6, [r4, #64]	; 0x40
 8001ec6:	e6b4      	b.n	8001c32 <_usb_ep0setup+0x32>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001ec8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f47f aefa 	bne.w	8001cc6 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001ed2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8001ed6:	f013 020f 	ands.w	r2, r3, #15
 8001eda:	d0e9      	beq.n	8001eb0 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001edc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ee0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ee2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8001ee6:	d144      	bne.n	8001f72 <_usb_ep0setup+0x372>
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001ee8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001eec:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001ef0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8001ef4:	e7dc      	b.n	8001eb0 <_usb_ep0setup+0x2b0>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001ef6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	f47f aee3 	bne.w	8001cc6 <_usb_ep0setup+0xc6>
      usbp->status &= ~2U;
 8001f00:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001f04:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status &= ~2U;
 8001f06:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001f0a:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status &= ~2U;
 8001f0e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 8001f12:	e72b      	b.n	8001d6c <_usb_ep0setup+0x16c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001f14:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f47f aed4 	bne.w	8001cc6 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001f1e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8001f22:	f013 020f 	ands.w	r2, r3, #15
 8001f26:	d0c3      	beq.n	8001eb0 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001f28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f2e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8001f32:	d125      	bne.n	8001f80 <_usb_ep0setup+0x380>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8001f34:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001f38:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001f3c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001f40:	e7b6      	b.n	8001eb0 <_usb_ep0setup+0x2b0>
  usbp->address = usbp->setup[2];
 8001f42:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
  stm32_otg_t *otgp = usbp->otg;
 8001f46:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f48:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8001f4c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001f50:	6865      	ldr	r5, [r4, #4]
 8001f52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f56:	682d      	ldr	r5, [r5, #0]
 8001f58:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001f5c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8001f60:	b125      	cbz	r5, 8001f6c <_usb_ep0setup+0x36c>
 8001f62:	4620      	mov	r0, r4
 8001f64:	2101      	movs	r1, #1
 8001f66:	47a8      	blx	r5
 8001f68:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  usbp->state = USB_SELECTED;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	7023      	strb	r3, [r4, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001f70:	e79e      	b.n	8001eb0 <_usb_ep0setup+0x2b0>
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001f72:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001f76:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001f7a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8001f7e:	e797      	b.n	8001eb0 <_usb_ep0setup+0x2b0>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8001f80:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001f84:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001f88:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8001f8c:	e790      	b.n	8001eb0 <_usb_ep0setup+0x2b0>
 8001f8e:	bf00      	nop
 8001f90:	08006470 	.word	0x08006470
 8001f94:	080063cc 	.word	0x080063cc
 8001f98:	0800671c 	.word	0x0800671c
 8001f9c:	00000000 	.word	0x00000000

08001fa0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8001faa:	69c7      	ldr	r7, [r0, #28]
 8001fac:	f04f 0920 	mov.w	r9, #32
 8001fb0:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8001fb4:	b3a2      	cbz	r2, 8002020 <oqWriteTimeout+0x80>
 8001fb6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001fba:	4604      	mov	r4, r0
 8001fbc:	460e      	mov	r6, r1
 8001fbe:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 8001fc2:	68a2      	ldr	r2, [r4, #8]
 8001fc4:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001fc6:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8001fca:	bf8c      	ite	hi
 8001fcc:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8001fce:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001fd0:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8001fd4:	45a8      	cmp	r8, r5
 8001fd6:	d844      	bhi.n	8002062 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 8001fd8:	d229      	bcs.n	800202e <oqWriteTimeout+0x8e>
    s2 = n - s1;
 8001fda:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001fde:	4642      	mov	r2, r8
 8001fe0:	4631      	mov	r1, r6
    s2 = n - s1;
 8001fe2:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001fe4:	f7fe f992 	bl	800030c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8001fe8:	eb06 0108 	add.w	r1, r6, r8
 8001fec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001ff0:	68e0      	ldr	r0, [r4, #12]
 8001ff2:	4642      	mov	r2, r8
 8001ff4:	f7fe f98a 	bl	800030c <memcpy>
  oqp->q_counter -= n;
 8001ff8:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 8001ffa:	68e1      	ldr	r1, [r4, #12]
 8001ffc:	4643      	mov	r3, r8
 8001ffe:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 8002000:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002002:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8002004:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002006:	b10f      	cbz	r7, 800200c <oqWriteTimeout+0x6c>
        nfy(oqp);
 8002008:	4620      	mov	r0, r4
 800200a:	47b8      	blx	r7
 800200c:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8002010:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002014:	442e      	add	r6, r5
 8002016:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800201a:	f1bb 0f00 	cmp.w	fp, #0
 800201e:	d1d0      	bne.n	8001fc2 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8002020:	9803      	ldr	r0, [sp, #12]
 8002022:	2300      	movs	r3, #0
 8002024:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002028:	b005      	add	sp, #20
 800202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800202e:	462a      	mov	r2, r5
 8002030:	4631      	mov	r1, r6
 8002032:	f7fe f96b 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002036:	68e2      	ldr	r2, [r4, #12]
 8002038:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 800203a:	68a2      	ldr	r2, [r4, #8]
 800203c:	1b52      	subs	r2, r2, r5
 800203e:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002040:	2d00      	cmp	r5, #0
 8002042:	d1e0      	bne.n	8002006 <oqWriteTimeout+0x66>
 8002044:	9902      	ldr	r1, [sp, #8]
 8002046:	4620      	mov	r0, r4
 8002048:	f7ff fc72 	bl	8001930 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800204c:	2800      	cmp	r0, #0
 800204e:	d0b8      	beq.n	8001fc2 <oqWriteTimeout+0x22>
 8002050:	9b03      	ldr	r3, [sp, #12]
 8002052:	eba3 000b 	sub.w	r0, r3, fp
 8002056:	2300      	movs	r3, #0
 8002058:	f383 8811 	msr	BASEPRI, r3
}
 800205c:	b005      	add	sp, #20
 800205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002062:	462a      	mov	r2, r5
 8002064:	4631      	mov	r1, r6
 8002066:	f7fe f951 	bl	800030c <memcpy>
    oqp->q_wrptr += n;
 800206a:	6962      	ldr	r2, [r4, #20]
 800206c:	442a      	add	r2, r5
 800206e:	6162      	str	r2, [r4, #20]
 8002070:	e7e3      	b.n	800203a <oqWriteTimeout+0x9a>
 8002072:	bf00      	nop
	...

08002080 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002080:	3030      	adds	r0, #48	; 0x30
 8002082:	f7ff bf8d 	b.w	8001fa0 <oqWriteTimeout>
 8002086:	bf00      	nop
	...

08002090 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002090:	3030      	adds	r0, #48	; 0x30
 8002092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002096:	f7ff bf83 	b.w	8001fa0 <oqWriteTimeout>
 800209a:	bf00      	nop
 800209c:	0000      	movs	r0, r0
	...

080020a0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80020a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020a4:	b085      	sub	sp, #20
 80020a6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 80020aa:	69c7      	ldr	r7, [r0, #28]
 80020ac:	f04f 0920 	mov.w	r9, #32
 80020b0:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d034      	beq.n	8002122 <iqReadTimeout+0x82>
 80020b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80020bc:	4604      	mov	r4, r0
 80020be:	460e      	mov	r6, r1
 80020c0:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 80020c4:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80020c6:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 80020c8:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80020ca:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 80020cc:	bf8c      	ite	hi
 80020ce:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 80020d0:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80020d2:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 80020d6:	45a8      	cmp	r8, r5
 80020d8:	d844      	bhi.n	8002164 <iqReadTimeout+0xc4>
  else if (n > s1) {
 80020da:	d229      	bcs.n	8002130 <iqReadTimeout+0x90>
    s2 = n - s1;
 80020dc:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80020e0:	4642      	mov	r2, r8
 80020e2:	4630      	mov	r0, r6
    s2 = n - s1;
 80020e4:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80020e6:	f7fe f911 	bl	800030c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80020ea:	eb06 0008 	add.w	r0, r6, r8
 80020ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80020f2:	68e1      	ldr	r1, [r4, #12]
 80020f4:	4642      	mov	r2, r8
 80020f6:	f7fe f909 	bl	800030c <memcpy>
  iqp->q_counter -= n;
 80020fa:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 80020fc:	68e1      	ldr	r1, [r4, #12]
 80020fe:	4643      	mov	r3, r8
 8002100:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 8002102:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002104:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8002106:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8002108:	b10f      	cbz	r7, 800210e <iqReadTimeout+0x6e>
        nfy(iqp);
 800210a:	4620      	mov	r0, r4
 800210c:	47b8      	blx	r7
 800210e:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8002112:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002116:	442e      	add	r6, r5
 8002118:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800211c:	f1bb 0f00 	cmp.w	fp, #0
 8002120:	d1d0      	bne.n	80020c4 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 8002122:	9803      	ldr	r0, [sp, #12]
 8002124:	2300      	movs	r3, #0
 8002126:	f383 8811 	msr	BASEPRI, r3
}
 800212a:	b005      	add	sp, #20
 800212c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002130:	462a      	mov	r2, r5
 8002132:	4630      	mov	r0, r6
 8002134:	f7fe f8ea 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002138:	68e2      	ldr	r2, [r4, #12]
 800213a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800213c:	68a2      	ldr	r2, [r4, #8]
 800213e:	1b52      	subs	r2, r2, r5
 8002140:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002142:	2d00      	cmp	r5, #0
 8002144:	d1e0      	bne.n	8002108 <iqReadTimeout+0x68>
 8002146:	9902      	ldr	r1, [sp, #8]
 8002148:	4620      	mov	r0, r4
 800214a:	f7ff fbf1 	bl	8001930 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800214e:	2800      	cmp	r0, #0
 8002150:	d0b8      	beq.n	80020c4 <iqReadTimeout+0x24>
 8002152:	9b03      	ldr	r3, [sp, #12]
 8002154:	eba3 000b 	sub.w	r0, r3, fp
 8002158:	2300      	movs	r3, #0
 800215a:	f383 8811 	msr	BASEPRI, r3
}
 800215e:	b005      	add	sp, #20
 8002160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002164:	462a      	mov	r2, r5
 8002166:	4630      	mov	r0, r6
 8002168:	f7fe f8d0 	bl	800030c <memcpy>
    iqp->q_rdptr += n;
 800216c:	69a2      	ldr	r2, [r4, #24]
 800216e:	442a      	add	r2, r5
 8002170:	61a2      	str	r2, [r4, #24]
 8002172:	e7e3      	b.n	800213c <iqReadTimeout+0x9c>
	...

08002180 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002180:	300c      	adds	r0, #12
 8002182:	f7ff bf8d 	b.w	80020a0 <iqReadTimeout>
 8002186:	bf00      	nop
	...

08002190 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002190:	300c      	adds	r0, #12
 8002192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002196:	f7ff bf83 	b.w	80020a0 <iqReadTimeout>
 800219a:	bf00      	nop
 800219c:	0000      	movs	r0, r0
	...

080021a0 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 80021a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a4:	4605      	mov	r5, r0
 80021a6:	b083      	sub	sp, #12
 80021a8:	460c      	mov	r4, r1
 80021aa:	4692      	mov	sl, r2
 80021ac:	4699      	mov	r9, r3
 80021ae:	f04f 0820 	mov.w	r8, #32
 80021b2:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 80021b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  size_t w = 0;
 80021b8:	2600      	movs	r6, #0
  obqp->ptr = NULL;
 80021ba:	4637      	mov	r7, r6
    if (obqp->ptr == NULL) {
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d041      	beq.n	8002244 <obqWriteTimeout+0xa4>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 80021c0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    if (size > (n - w)) {
 80021c2:	ebaa 0b06 	sub.w	fp, sl, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 80021c6:	1aca      	subs	r2, r1, r3
    if (size > (n - w)) {
 80021c8:	4593      	cmp	fp, r2
 80021ca:	bf28      	it	cs
 80021cc:	4693      	movcs	fp, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 80021ce:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 80021d2:	d940      	bls.n	8002256 <obqWriteTimeout+0xb6>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 80021d4:	4621      	mov	r1, r4
 80021d6:	4618      	mov	r0, r3
 80021d8:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 80021dc:	680c      	ldr	r4, [r1, #0]
 80021de:	684a      	ldr	r2, [r1, #4]
 80021e0:	688b      	ldr	r3, [r1, #8]
 80021e2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80021e6:	f8c0 c00c 	str.w	ip, [r0, #12]
 80021ea:	3110      	adds	r1, #16
 80021ec:	4571      	cmp	r1, lr
 80021ee:	6004      	str	r4, [r0, #0]
 80021f0:	6042      	str	r2, [r0, #4]
 80021f2:	6083      	str	r3, [r0, #8]
 80021f4:	f100 0010 	add.w	r0, r0, #16
 80021f8:	d1f0      	bne.n	80021dc <obqWriteTimeout+0x3c>
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80021fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80021fc:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80021fe:	460c      	mov	r4, r1
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8002200:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002202:	62ab      	str	r3, [r5, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8002204:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002206:	429a      	cmp	r2, r3
 8002208:	d813      	bhi.n	8002232 <obqWriteTimeout+0x92>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800220a:	69ea      	ldr	r2, [r5, #28]
  *((size_t *)obqp->bwrptr) = size;
 800220c:	692b      	ldr	r3, [r5, #16]
  if (obqp->bwrptr >= obqp->btop) {
 800220e:	69a8      	ldr	r0, [r5, #24]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002210:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8002212:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8002214:	69e9      	ldr	r1, [r5, #28]
  obqp->bcounter--;
 8002216:	68ea      	ldr	r2, [r5, #12]
  obqp->ptr = NULL;
 8002218:	62af      	str	r7, [r5, #40]	; 0x28
  obqp->bwrptr += obqp->bsize;
 800221a:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 800221c:	4283      	cmp	r3, r0
  obqp->bwrptr += obqp->bsize;
 800221e:	612b      	str	r3, [r5, #16]
    obqp->bwrptr = obqp->buffers;
 8002220:	bf24      	itt	cs
 8002222:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 8002224:	612b      	strcs	r3, [r5, #16]
  if (obqp->notify != NULL) {
 8002226:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  obqp->bcounter--;
 8002228:	3a01      	subs	r2, #1
 800222a:	60ea      	str	r2, [r5, #12]
  if (obqp->notify != NULL) {
 800222c:	b10b      	cbz	r3, 8002232 <obqWriteTimeout+0x92>
    obqp->notify(obqp);
 800222e:	4628      	mov	r0, r5
 8002230:	4798      	blx	r3
 8002232:	f387 8811 	msr	BASEPRI, r7
    if (w >= n) {
 8002236:	4556      	cmp	r6, sl
 8002238:	d21a      	bcs.n	8002270 <obqWriteTimeout+0xd0>
 800223a:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 800223e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1bd      	bne.n	80021c0 <obqWriteTimeout+0x20>
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8002244:	4649      	mov	r1, r9
 8002246:	4628      	mov	r0, r5
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	f7ff fc01 	bl	8001a50 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 800224e:	9b01      	ldr	r3, [sp, #4]
 8002250:	b960      	cbnz	r0, 800226c <obqWriteTimeout+0xcc>
 8002252:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002254:	e7b4      	b.n	80021c0 <obqWriteTimeout+0x20>
      memcpy(obqp->ptr, bp, size);
 8002256:	4618      	mov	r0, r3
 8002258:	4621      	mov	r1, r4
 800225a:	465a      	mov	r2, fp
 800225c:	f7fe f856 	bl	800030c <memcpy>
      obqp->ptr += size;
 8002260:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002262:	445b      	add	r3, fp
      w         += size;
 8002264:	445e      	add	r6, fp
      bp        += size;
 8002266:	445c      	add	r4, fp
      obqp->ptr += size;
 8002268:	62ab      	str	r3, [r5, #40]	; 0x28
      w         += size;
 800226a:	e7cb      	b.n	8002204 <obqWriteTimeout+0x64>
 800226c:	f383 8811 	msr	BASEPRI, r3
}
 8002270:	4630      	mov	r0, r6
 8002272:	b003      	add	sp, #12
 8002274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002280 <_writet.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8002280:	3044      	adds	r0, #68	; 0x44
 8002282:	f7ff bf8d 	b.w	80021a0 <obqWriteTimeout>
 8002286:	bf00      	nop
	...

08002290 <_write.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8002290:	3044      	adds	r0, #68	; 0x44
 8002292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002296:	f7ff bf83 	b.w	80021a0 <obqWriteTimeout>
 800229a:	bf00      	nop
 800229c:	0000      	movs	r0, r0
	...

080022a0 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 80022a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a4:	b083      	sub	sp, #12
 80022a6:	4605      	mov	r5, r0
 80022a8:	460f      	mov	r7, r1
 80022aa:	4693      	mov	fp, r2
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	f04f 0920 	mov.w	r9, #32
 80022b2:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 80022b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  size_t r = 0;
 80022b8:	2600      	movs	r6, #0
  ibqp->ptr = NULL;
 80022ba:	46b0      	mov	r8, r6
    if (ibqp->ptr == NULL) {
 80022bc:	2c00      	cmp	r4, #0
 80022be:	d03f      	beq.n	8002340 <ibqReadTimeout+0xa0>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80022c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if (size > (n - r)) {
 80022c2:	ebab 0206 	sub.w	r2, fp, r6
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80022c6:	1b1b      	subs	r3, r3, r4
    if (size > (n - r)) {
 80022c8:	429a      	cmp	r2, r3
 80022ca:	bf28      	it	cs
 80022cc:	461a      	movcs	r2, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 80022ce:	2a40      	cmp	r2, #64	; 0x40
 80022d0:	4692      	mov	sl, r2
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 80022d2:	4621      	mov	r1, r4
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 80022d4:	d93b      	bls.n	800234e <ibqReadTimeout+0xae>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 80022d6:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 80022da:	463b      	mov	r3, r7
 80022dc:	680c      	ldr	r4, [r1, #0]
 80022de:	6848      	ldr	r0, [r1, #4]
 80022e0:	688a      	ldr	r2, [r1, #8]
 80022e2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80022e6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80022ea:	3110      	adds	r1, #16
 80022ec:	4571      	cmp	r1, lr
 80022ee:	601c      	str	r4, [r3, #0]
 80022f0:	6058      	str	r0, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	f103 0310 	add.w	r3, r3, #16
 80022f8:	d1f0      	bne.n	80022dc <ibqReadTimeout+0x3c>
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80022fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80022fc:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80022fe:	3740      	adds	r7, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 8002300:	3640      	adds	r6, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002302:	62ab      	str	r3, [r5, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8002304:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002306:	429a      	cmp	r2, r3
 8002308:	d811      	bhi.n	800232e <ibqReadTimeout+0x8e>
  if (ibqp->brdptr >= ibqp->btop) {
 800230a:	e9d5 2106 	ldrd	r2, r1, [r5, #24]
  ibqp->brdptr += ibqp->bsize;
 800230e:	696b      	ldr	r3, [r5, #20]
  ibqp->bcounter--;
 8002310:	68e8      	ldr	r0, [r5, #12]
  ibqp->ptr = NULL;
 8002312:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  ibqp->brdptr += ibqp->bsize;
 8002316:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 8002318:	4293      	cmp	r3, r2
  ibqp->brdptr += ibqp->bsize;
 800231a:	616b      	str	r3, [r5, #20]
    ibqp->brdptr = ibqp->buffers;
 800231c:	bf24      	itt	cs
 800231e:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 8002320:	616b      	strcs	r3, [r5, #20]
  if (ibqp->notify != NULL) {
 8002322:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  ibqp->bcounter--;
 8002324:	3801      	subs	r0, #1
 8002326:	60e8      	str	r0, [r5, #12]
  if (ibqp->notify != NULL) {
 8002328:	b10b      	cbz	r3, 800232e <ibqReadTimeout+0x8e>
    ibqp->notify(ibqp);
 800232a:	4628      	mov	r0, r5
 800232c:	4798      	blx	r3
 800232e:	f388 8811 	msr	BASEPRI, r8
    if (r >= n) {
 8002332:	455e      	cmp	r6, fp
 8002334:	d216      	bcs.n	8002364 <ibqReadTimeout+0xc4>
 8002336:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 800233a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800233c:	2c00      	cmp	r4, #0
 800233e:	d1bf      	bne.n	80022c0 <ibqReadTimeout+0x20>
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8002340:	9901      	ldr	r1, [sp, #4]
 8002342:	4628      	mov	r0, r5
 8002344:	f7ff fbec 	bl	8001b20 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8002348:	b950      	cbnz	r0, 8002360 <ibqReadTimeout+0xc0>
 800234a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800234c:	e7b8      	b.n	80022c0 <ibqReadTimeout+0x20>
      memcpy(bp, ibqp->ptr, size);
 800234e:	4638      	mov	r0, r7
 8002350:	f7fd ffdc 	bl	800030c <memcpy>
      ibqp->ptr += size;
 8002354:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002356:	4453      	add	r3, sl
      r         += size;
 8002358:	4456      	add	r6, sl
      bp        += size;
 800235a:	4457      	add	r7, sl
      ibqp->ptr += size;
 800235c:	62ab      	str	r3, [r5, #40]	; 0x28
      r         += size;
 800235e:	e7d1      	b.n	8002304 <ibqReadTimeout+0x64>
 8002360:	f384 8811 	msr	BASEPRI, r4
}
 8002364:	4630      	mov	r0, r6
 8002366:	b003      	add	sp, #12
 8002368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800236c:	0000      	movs	r0, r0
	...

08002370 <_readt.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8002370:	300c      	adds	r0, #12
 8002372:	f7ff bf95 	b.w	80022a0 <ibqReadTimeout>
 8002376:	bf00      	nop
	...

08002380 <_read.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8002380:	300c      	adds	r0, #12
 8002382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002386:	f7ff bf8b 	b.w	80022a0 <ibqReadTimeout>
 800238a:	bf00      	nop
 800238c:	0000      	movs	r0, r0
	...

08002390 <get_history>:
    shp->sh_end -= shp->sh_size;
  *(shp->sh_buffer + shp->sh_end) = 0;
  shp->sh_cur = 0;
}

static int get_history(ShellHistory *shp, char *line, int dir) {
 8002390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (shp == NULL)
    return -1;

  /* Count the number of lines saved in the buffer */
  int idx = shp->sh_beg;
  while (idx != shp->sh_end) {
 8002394:	e9d0 4602 	ldrd	r4, r6, [r0, #8]
 8002398:	42b4      	cmp	r4, r6
static int get_history(ShellHistory *shp, char *line, int dir) {
 800239a:	4607      	mov	r7, r0
 800239c:	4688      	mov	r8, r1
  while (idx != shp->sh_end) {
 800239e:	d053      	beq.n	8002448 <get_history+0xb8>
    idx += *(shp->sh_buffer + idx) + 1;
    if (idx >= shp->sh_size)
 80023a0:	e9d0 c000 	ldrd	ip, r0, [r0]
 80023a4:	4623      	mov	r3, r4
  int count=0;
 80023a6:	2100      	movs	r1, #0
    idx += *(shp->sh_buffer + idx) + 1;
 80023a8:	f81c 5003 	ldrb.w	r5, [ip, r3]
 80023ac:	3501      	adds	r5, #1
 80023ae:	442b      	add	r3, r5
    if (idx >= shp->sh_size)
 80023b0:	4298      	cmp	r0, r3
      idx -= shp->sh_size;
 80023b2:	bfd8      	it	le
 80023b4:	1a1b      	suble	r3, r3, r0
  while (idx != shp->sh_end) {
 80023b6:	42b3      	cmp	r3, r6
    count++;
 80023b8:	f101 0101 	add.w	r1, r1, #1
  while (idx != shp->sh_end) {
 80023bc:	d1f4      	bne.n	80023a8 <get_history+0x18>
  }

  if (dir == SHELL_HIST_DIR_FW) {
 80023be:	2a01      	cmp	r2, #1
    if (shp->sh_cur > 0)
 80023c0:	693d      	ldr	r5, [r7, #16]
  if (dir == SHELL_HIST_DIR_FW) {
 80023c2:	d03c      	beq.n	800243e <get_history+0xae>
      shp->sh_cur -= 2;
    else
      return 0;
  }

  if (count >= shp->sh_cur) {
 80023c4:	42a9      	cmp	r1, r5
 80023c6:	db53      	blt.n	8002470 <get_history+0xe0>
    idx = shp->sh_beg;
    int i = 0;
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80023c8:	42b4      	cmp	r4, r6
 80023ca:	d054      	beq.n	8002476 <get_history+0xe6>
 80023cc:	1e4b      	subs	r3, r1, #1
 80023ce:	429d      	cmp	r5, r3
 80023d0:	d054      	beq.n	800247c <get_history+0xec>
      idx += *(shp->sh_buffer + idx) + 1;
      if (idx >= shp->sh_size)
 80023d2:	e9d7 ec00 	ldrd	lr, ip, [r7]
    int i = 0;
 80023d6:	2000      	movs	r0, #0
 80023d8:	e001      	b.n	80023de <get_history+0x4e>
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80023da:	429d      	cmp	r5, r3
 80023dc:	d017      	beq.n	800240e <get_history+0x7e>
      idx += *(shp->sh_buffer + idx) + 1;
 80023de:	f81e 3004 	ldrb.w	r3, [lr, r4]
 80023e2:	3301      	adds	r3, #1
 80023e4:	441c      	add	r4, r3
      if (idx >= shp->sh_size)
 80023e6:	45a4      	cmp	ip, r4
        idx -= shp->sh_size;
      i++;
 80023e8:	f100 0001 	add.w	r0, r0, #1
        idx -= shp->sh_size;
 80023ec:	bfd8      	it	le
 80023ee:	eba4 040c 	suble.w	r4, r4, ip
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80023f2:	43c3      	mvns	r3, r0
 80023f4:	42b4      	cmp	r4, r6
 80023f6:	440b      	add	r3, r1
 80023f8:	d1ef      	bne.n	80023da <get_history+0x4a>
    }

    int length = *(shp->sh_buffer + idx);
 80023fa:	f81e 4006 	ldrb.w	r4, [lr, r6]

    if (length > 0) {
 80023fe:	b95c      	cbnz	r4, 8002418 <get_history+0x88>
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
      }
      return length;
    }
    else if (dir == SHELL_HIST_DIR_FW) {
 8002400:	2a01      	cmp	r2, #1
 8002402:	d135      	bne.n	8002470 <get_history+0xe0>
      shp->sh_cur++;
 8002404:	3501      	adds	r5, #1
 8002406:	613d      	str	r5, [r7, #16]
      return 0;
    }
  }
  return -1;
}
 8002408:	4620      	mov	r0, r4
 800240a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 800240e:	4626      	mov	r6, r4
    int length = *(shp->sh_buffer + idx);
 8002410:	f81e 4006 	ldrb.w	r4, [lr, r6]
    if (length > 0) {
 8002414:	2c00      	cmp	r4, #0
 8002416:	d0f3      	beq.n	8002400 <get_history+0x70>
      shp->sh_cur++;
 8002418:	3501      	adds	r5, #1
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 800241a:	2240      	movs	r2, #64	; 0x40
      shp->sh_cur++;
 800241c:	613d      	str	r5, [r7, #16]
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 800241e:	2100      	movs	r1, #0
 8002420:	4640      	mov	r0, r8
 8002422:	f003 f9f1 	bl	8005808 <memset>
      if ((idx + length) < shp->sh_size) {
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	19a2      	adds	r2, r4, r6
 800242a:	429a      	cmp	r2, r3
 800242c:	da10      	bge.n	8002450 <get_history+0xc0>
        memcpy(line, (shp->sh_buffer + idx + 1), length);
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	3601      	adds	r6, #1
 8002432:	4431      	add	r1, r6
 8002434:	4640      	mov	r0, r8
 8002436:	4622      	mov	r2, r4
 8002438:	f7fd ff68 	bl	800030c <memcpy>
 800243c:	e7e4      	b.n	8002408 <get_history+0x78>
    if (shp->sh_cur > 0)
 800243e:	2d00      	cmp	r5, #0
 8002440:	dd04      	ble.n	800244c <get_history+0xbc>
      shp->sh_cur -= 2;
 8002442:	3d02      	subs	r5, #2
 8002444:	613d      	str	r5, [r7, #16]
 8002446:	e7bd      	b.n	80023c4 <get_history+0x34>
  int count=0;
 8002448:	2100      	movs	r1, #0
 800244a:	e7b8      	b.n	80023be <get_history+0x2e>
      return 0;
 800244c:	2400      	movs	r4, #0
 800244e:	e7db      	b.n	8002408 <get_history+0x78>
        int part_len = shp->sh_size - idx - 1;
 8002450:	1b9b      	subs	r3, r3, r6
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8002452:	6839      	ldr	r1, [r7, #0]
        int part_len = shp->sh_size - idx - 1;
 8002454:	1e5d      	subs	r5, r3, #1
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8002456:	3601      	adds	r6, #1
 8002458:	4431      	add	r1, r6
 800245a:	462a      	mov	r2, r5
 800245c:	4640      	mov	r0, r8
 800245e:	f7fd ff55 	bl	800030c <memcpy>
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 8002462:	6839      	ldr	r1, [r7, #0]
 8002464:	eb08 0005 	add.w	r0, r8, r5
 8002468:	1b62      	subs	r2, r4, r5
 800246a:	f7fd ff4f 	bl	800030c <memcpy>
 800246e:	e7cb      	b.n	8002408 <get_history+0x78>
  return -1;
 8002470:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002474:	e7c8      	b.n	8002408 <get_history+0x78>
 8002476:	f8d7 e000 	ldr.w	lr, [r7]
 800247a:	e7be      	b.n	80023fa <get_history+0x6a>
 800247c:	f8d7 e000 	ldr.w	lr, [r7]
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8002480:	4626      	mov	r6, r4
 8002482:	e7ba      	b.n	80023fa <get_history+0x6a>
	...

08002490 <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
 8002490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (epcp->in_state != NULL) {
 8002494:	6953      	ldr	r3, [r2, #20]
 8002496:	eb00 0781 	add.w	r7, r0, r1, lsl #2
                      const USBEndpointConfig *epcp) {
 800249a:	460c      	mov	r4, r1
  usbp->epc[ep] = epcp;
 800249c:	60fa      	str	r2, [r7, #12]
  if (epcp->in_state != NULL) {
 800249e:	fa0f f881 	sxth.w	r8, r1
 80024a2:	b123      	cbz	r3, 80024ae <usbInitEndpointI+0x1e>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80024a4:	2100      	movs	r1, #0
 80024a6:	6019      	str	r1, [r3, #0]
 80024a8:	6059      	str	r1, [r3, #4]
 80024aa:	6099      	str	r1, [r3, #8]
 80024ac:	60d9      	str	r1, [r3, #12]
  if (epcp->out_state != NULL) {
 80024ae:	6993      	ldr	r3, [r2, #24]
 80024b0:	b123      	cbz	r3, 80024bc <usbInitEndpointI+0x2c>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80024bc:	68fb      	ldr	r3, [r7, #12]
  stm32_otg_t *otgp = usbp->otg;
 80024be:	6d45      	ldr	r5, [r0, #84]	; 0x54
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80024c0:	681e      	ldr	r6, [r3, #0]
  if (usbp->epc[ep]->out_state != NULL) {
 80024c2:	f8d3 c018 	ldr.w	ip, [r3, #24]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80024c6:	f006 0603 	and.w	r6, r6, #3
 80024ca:	1e72      	subs	r2, r6, #1
 80024cc:	2a02      	cmp	r2, #2
 80024ce:	bf98      	it	ls
 80024d0:	04b6      	lslls	r6, r6, #18
  otgp->oe[ep].DOEPTSIZ = 0;
 80024d2:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	bf98      	it	ls
 80024dc:	f106 5680 	addls.w	r6, r6, #268435456	; 0x10000000
 80024e0:	f8c2 1b10 	str.w	r1, [r2, #2832]	; 0xb10
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80024e4:	bf8c      	ite	hi
 80024e6:	4e45      	ldrhi	r6, [pc, #276]	; (80025fc <usbInitEndpointI+0x16c>)
 80024e8:	f506 4600 	addls.w	r6, r6, #32768	; 0x8000
  otgp->oe[ep].DOEPTSIZ = 0;
 80024ec:	0161      	lsls	r1, r4, #5
  if (usbp->epc[ep]->out_state != NULL) {
 80024ee:	f1bc 0f00 	cmp.w	ip, #0
 80024f2:	d04b      	beq.n	800258c <usbInitEndpointI+0xfc>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 80024f4:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 80024f8:	f104 0258 	add.w	r2, r4, #88	; 0x58
 80024fc:	0152      	lsls	r2, r2, #5
 80024fe:	ea4c 0c06 	orr.w	ip, ip, r6
 8002502:	f845 c002 	str.w	ip, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8002506:	f104 0e10 	add.w	lr, r4, #16
 800250a:	f8d5 c81c 	ldr.w	ip, [r5, #2076]	; 0x81c
 800250e:	2201      	movs	r2, #1
 8002510:	fa02 f20e 	lsl.w	r2, r2, lr
 8002514:	ea42 020c 	orr.w	r2, r2, ip
 8002518:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 800251c:	186a      	adds	r2, r5, r1
  if (usbp->epc[ep]->in_state != NULL) {
 800251e:	6959      	ldr	r1, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
 8002520:	f04f 0c00 	mov.w	ip, #0
 8002524:	f8c2 c910 	str.w	ip, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 8002528:	2900      	cmp	r1, #0
 800252a:	d044      	beq.n	80025b6 <usbInitEndpointI+0x126>
    if (usbp->epc[ep]->in_multiplier > 1)
 800252c:	8b99      	ldrh	r1, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800252e:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8002530:	2901      	cmp	r1, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8002532:	ea4f 0392 	mov.w	r3, r2, lsr #2
  next = usbp->pmnext;
 8002536:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
      fsize *= usbp->epc[ep]->in_multiplier;
 8002538:	bf88      	it	hi
 800253a:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800253c:	f104 013f 	add.w	r1, r4, #63	; 0x3f
  usbp->pmnext += size;
 8002540:	eb03 0c02 	add.w	ip, r3, r2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8002544:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002548:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800254c:	01a2      	lsls	r2, r4, #6
 800254e:	f042 0220 	orr.w	r2, r2, #32
  usbp->pmnext += size;
 8002552:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8002556:	604b      	str	r3, [r1, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002558:	612a      	str	r2, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800255a:	692b      	ldr	r3, [r5, #16]
 800255c:	069a      	lsls	r2, r3, #26
 800255e:	d4fc      	bmi.n	800255a <usbInitEndpointI+0xca>
  chSysPolledDelayX(cycles);
 8002560:	2012      	movs	r0, #18
 8002562:	f7fe fc75 	bl	8000e50 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8a1b      	ldrh	r3, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 800256a:	f104 0248 	add.w	r2, r4, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 800256e:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 8002572:	0152      	lsls	r2, r2, #5
                           DIEPCTL_TXFNUM(ep) |
 8002574:	431e      	orrs	r6, r3
    otgp->ie[ep].DIEPCTL = ctl |
 8002576:	50ae      	str	r6, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8002578:	2101      	movs	r1, #1
 800257a:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800257e:	fa01 f404 	lsl.w	r4, r1, r4
 8002582:	431c      	orrs	r4, r3
 8002584:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
}
 8002588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 800258c:	eb05 1248 	add.w	r2, r5, r8, lsl #5
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8002590:	f104 0910 	add.w	r9, r4, #16
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8002594:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 8002598:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 800259c:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80025a0:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 80025a4:	f04f 0c01 	mov.w	ip, #1
 80025a8:	fa0c fc09 	lsl.w	ip, ip, r9
 80025ac:	ea22 020c 	bic.w	r2, r2, ip
 80025b0:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
 80025b4:	e7b2      	b.n	800251c <usbInitEndpointI+0x8c>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80025b6:	f104 023f 	add.w	r2, r4, #63	; 0x3f
 80025ba:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80025be:	01a3      	lsls	r3, r4, #6
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80025c0:	490f      	ldr	r1, [pc, #60]	; (8002600 <usbInitEndpointI+0x170>)
 80025c2:	6051      	str	r1, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80025c4:	f043 0320 	orr.w	r3, r3, #32
 80025c8:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80025ca:	692b      	ldr	r3, [r5, #16]
 80025cc:	069b      	lsls	r3, r3, #26
 80025ce:	d4fc      	bmi.n	80025ca <usbInitEndpointI+0x13a>
 80025d0:	eb05 1848 	add.w	r8, r5, r8, lsl #5
 80025d4:	2012      	movs	r0, #18
 80025d6:	f7fe fc3b 	bl	8000e50 <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 80025da:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 80025de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025e2:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 80025e6:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f404 	lsl.w	r4, r1, r4
 80025f0:	ea23 0404 	bic.w	r4, r3, r4
 80025f4:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
 80025f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025fc:	10008000 	.word	0x10008000
 8002600:	02000400 	.word	0x02000400
	...

08002610 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8002610:	b530      	push	{r4, r5, lr}
 8002612:	b083      	sub	sp, #12
 8002614:	2905      	cmp	r1, #5
 8002616:	d80f      	bhi.n	8002638 <usb_event+0x28>
 8002618:	e8df f001 	tbb	[pc, r1]
 800261c:	10030e10 	.word	0x10030e10
 8002620:	2910      	.short	0x2910
 8002622:	2320      	movs	r3, #32
 8002624:	f383 8811 	msr	BASEPRI, r3
    if (usbp->state == USB_ACTIVE) {
 8002628:	7803      	ldrb	r3, [r0, #0]
 800262a:	2b04      	cmp	r3, #4
 800262c:	d02f      	beq.n	800268e <usb_event+0x7e>
    else if (usbp->state == USB_SELECTED) {
 800262e:	2b03      	cmp	r3, #3
 8002630:	d059      	beq.n	80026e6 <usb_event+0xd6>
 8002632:	2300      	movs	r3, #0
 8002634:	f383 8811 	msr	BASEPRI, r3
}
 8002638:	b003      	add	sp, #12
 800263a:	bd30      	pop	{r4, r5, pc}
 800263c:	2320      	movs	r3, #32
 800263e:	f383 8811 	msr	BASEPRI, r3
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 8002642:	4c2a      	ldr	r4, [pc, #168]	; (80026ec <usb_event+0xdc>)
 8002644:	7d23      	ldrb	r3, [r4, #20]
 8002646:	b11b      	cbz	r3, 8002650 <usb_event+0x40>
 8002648:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <usb_event+0x22>
  chEvtBroadcastFlagsI(esp, flags);
 8002650:	2102      	movs	r1, #2
 8002652:	4827      	ldr	r0, [pc, #156]	; (80026f0 <usb_event+0xe0>)
 8002654:	f7fe fbcc 	bl	8000df0 <chEvtBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 8002658:	2501      	movs	r5, #1
  chThdDequeueAllI(tqp, msg);
 800265a:	4826      	ldr	r0, [pc, #152]	; (80026f4 <usb_event+0xe4>)
 800265c:	7525      	strb	r5, [r4, #20]
 800265e:	f7fe fb9f 	bl	8000da0 <chThdDequeueAllI.constprop.0>
 8002662:	4825      	ldr	r0, [pc, #148]	; (80026f8 <usb_event+0xe8>)
  bqSuspendI(&sdup->obqueue);
 8002664:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8002668:	f7fe fb9a 	bl	8000da0 <chThdDequeueAllI.constprop.0>
 800266c:	e7e1      	b.n	8002632 <usb_event+0x22>
 800266e:	2320      	movs	r3, #32
 8002670:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8002674:	4c1d      	ldr	r4, [pc, #116]	; (80026ec <usb_event+0xdc>)
 8002676:	2101      	movs	r1, #1
 8002678:	1d20      	adds	r0, r4, #4
 800267a:	f7fe fbb9 	bl	8000df0 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 800267e:	2300      	movs	r3, #0
 8002680:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 8002682:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	b003      	add	sp, #12
 800268c:	bd30      	pop	{r4, r5, pc}
  ibqp->bcounter  = 0;
 800268e:	4c17      	ldr	r4, [pc, #92]	; (80026ec <usb_event+0xdc>)
      usbInitEndpointI(usbp, USB_INTERRUPT_REQUEST_EP_A, &ep1config);
 8002690:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <usb_event+0xec>)
 8002692:	9001      	str	r0, [sp, #4]
 8002694:	2101      	movs	r1, #1
 8002696:	f7ff fefb 	bl	8002490 <usbInitEndpointI>
      usbInitEndpointI(usbp, USB_DATA_REQUEST_EP_A, &ep2config);
 800269a:	2102      	movs	r1, #2
 800269c:	9801      	ldr	r0, [sp, #4]
 800269e:	4a18      	ldr	r2, [pc, #96]	; (8002700 <usb_event+0xf0>)
 80026a0:	f7ff fef6 	bl	8002490 <usbInitEndpointI>
 80026a4:	2500      	movs	r5, #0
  ibqp->brdptr    = ibqp->buffers;
 80026a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026a8:	6223      	str	r3, [r4, #32]
  chThdDequeueAllI(tqp, msg);
 80026aa:	f104 000c 	add.w	r0, r4, #12
  ibqp->bwrptr    = ibqp->buffers;
 80026ae:	61e3      	str	r3, [r4, #28]
  ibqp->top       = NULL;
 80026b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  ibqp->bcounter  = 0;
 80026b4:	61a5      	str	r5, [r4, #24]
 80026b6:	f7fe fb73 	bl	8000da0 <chThdDequeueAllI.constprop.0>
  obqp->brdptr    = obqp->buffers;
 80026ba:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 80026be:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->bwrptr    = obqp->buffers;
 80026c2:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->bcounter  = bqSizeX(obqp);
 80026c6:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->top       = NULL;
 80026c8:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  bqResumeX(&sdup->ibqueue);
 80026cc:	7525      	strb	r5, [r4, #20]
 80026ce:	f7fe fb67 	bl	8000da0 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 80026d2:	1d20      	adds	r0, r4, #4
 80026d4:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 80026d6:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80026da:	f7fe fb89 	bl	8000df0 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 80026de:	4620      	mov	r0, r4
 80026e0:	f7fe fe86 	bl	80013f0 <sdu_start_receive>
 80026e4:	e7a5      	b.n	8002632 <usb_event+0x22>
      usbDisableEndpointsI(usbp);
 80026e6:	f7fe fe33 	bl	8001350 <usbDisableEndpointsI>
 80026ea:	e7a2      	b.n	8002632 <usb_event+0x22>
 80026ec:	20000e9c 	.word	0x20000e9c
 80026f0:	20000ea0 	.word	0x20000ea0
 80026f4:	20000ea8 	.word	0x20000ea8
 80026f8:	20000ee0 	.word	0x20000ee0
 80026fc:	0800641c 	.word	0x0800641c
 8002700:	08006440 	.word	0x08006440
	...

08002710 <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	460d      	mov	r5, r1
  if (str != NULL)
 8002714:	b1b8      	cbz	r0, 8002746 <parse_arguments+0x36>
 8002716:	4604      	mov	r4, r0
    *saveptr = str;
 8002718:	6028      	str	r0, [r5, #0]
  p += strspn(p, " \t");
 800271a:	4912      	ldr	r1, [pc, #72]	; (8002764 <parse_arguments+0x54>)
 800271c:	4620      	mov	r0, r4
 800271e:	f003 f947 	bl	80059b0 <strspn>
  if (*p == '"') {
 8002722:	5c21      	ldrb	r1, [r4, r0]
 8002724:	2922      	cmp	r1, #34	; 0x22
  p += strspn(p, " \t");
 8002726:	eb04 0600 	add.w	r6, r4, r0
  if (*p == '"') {
 800272a:	d012      	beq.n	8002752 <parse_arguments+0x42>
    *saveptr = strpbrk(p, " \t");
 800272c:	490d      	ldr	r1, [pc, #52]	; (8002764 <parse_arguments+0x54>)
 800272e:	4630      	mov	r0, r6
 8002730:	f003 f922 	bl	8005978 <strpbrk>
  if (*saveptr != NULL) {
 8002734:	b198      	cbz	r0, 800275e <parse_arguments+0x4e>
    *(*saveptr)++ = '\0';
 8002736:	1c42      	adds	r2, r0, #1
 8002738:	2300      	movs	r3, #0
 800273a:	602a      	str	r2, [r5, #0]
 800273c:	7003      	strb	r3, [r0, #0]
  return *p != '\0' ? p : NULL;
 800273e:	7833      	ldrb	r3, [r6, #0]
 8002740:	b123      	cbz	r3, 800274c <parse_arguments+0x3c>
}
 8002742:	4630      	mov	r0, r6
 8002744:	bd70      	pop	{r4, r5, r6, pc}
  p = *saveptr;
 8002746:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8002748:	2c00      	cmp	r4, #0
 800274a:	d1e6      	bne.n	800271a <parse_arguments+0xa>
    return NULL;
 800274c:	2600      	movs	r6, #0
}
 800274e:	4630      	mov	r0, r6
 8002750:	bd70      	pop	{r4, r5, r6, pc}
    p++;
 8002752:	3601      	adds	r6, #1
    *saveptr = strpbrk(p, "\"");
 8002754:	4630      	mov	r0, r6
 8002756:	f003 f8a7 	bl	80058a8 <strchr>
  if (*saveptr != NULL) {
 800275a:	2800      	cmp	r0, #0
 800275c:	d1eb      	bne.n	8002736 <parse_arguments+0x26>
 800275e:	6028      	str	r0, [r5, #0]
 8002760:	e7ed      	b.n	800273e <parse_arguments+0x2e>
 8002762:	bf00      	nop
 8002764:	08005e80 	.word	0x08005e80
	...

08002770 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002770:	b40e      	push	{r1, r2, r3}
 8002772:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	ab0f      	add	r3, sp, #60	; 0x3c
 800277a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800277e:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 8002780:	4625      	mov	r5, r4
 8002782:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8002786:	2900      	cmp	r1, #0
 8002788:	f000 823b 	beq.w	8002c02 <chprintf+0x492>
 800278c:	4607      	mov	r7, r0
 800278e:	4699      	mov	r9, r3
  int n = 0;
 8002790:	f04f 0800 	mov.w	r8, #0
 8002794:	e00c      	b.n	80027b0 <chprintf+0x40>
      streamPut(chp, (uint8_t)c);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	4638      	mov	r0, r7
 800279a:	68db      	ldr	r3, [r3, #12]
      n++;
 800279c:	f108 0801 	add.w	r8, r8, #1
 80027a0:	462c      	mov	r4, r5
      streamPut(chp, (uint8_t)c);
 80027a2:	4798      	blx	r3
    c = *fmt++;
 80027a4:	4625      	mov	r5, r4
 80027a6:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 80027aa:	2900      	cmp	r1, #0
 80027ac:	f000 80be 	beq.w	800292c <chprintf+0x1bc>
    if (c != '%') {
 80027b0:	2925      	cmp	r1, #37	; 0x25
 80027b2:	d1f0      	bne.n	8002796 <chprintf+0x26>
    if (*fmt == '-') {
 80027b4:	7863      	ldrb	r3, [r4, #1]
 80027b6:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 80027b8:	bf04      	itt	eq
 80027ba:	1ca5      	addeq	r5, r4, #2
      left_align = true;
 80027bc:	2001      	moveq	r0, #1
    if (*fmt == '+') {
 80027be:	782b      	ldrb	r3, [r5, #0]
    left_align = false;
 80027c0:	bf18      	it	ne
 80027c2:	2000      	movne	r0, #0
    if (*fmt == '+') {
 80027c4:	2b2b      	cmp	r3, #43	; 0x2b
 80027c6:	bf03      	ittte	eq
 80027c8:	786b      	ldrbeq	r3, [r5, #1]
      do_sign = true;
 80027ca:	f04f 0e01 	moveq.w	lr, #1
      fmt++;
 80027ce:	4475      	addeq	r5, lr
    do_sign = false;
 80027d0:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '0') {
 80027d4:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 80027d6:	bf05      	ittet	eq
 80027d8:	461e      	moveq	r6, r3
      fmt++;
 80027da:	786b      	ldrbeq	r3, [r5, #1]
    filler = ' ';
 80027dc:	2620      	movne	r6, #32
      fmt++;
 80027de:	3501      	addeq	r5, #1
    if ( *fmt == '*') {
 80027e0:	2b2a      	cmp	r3, #42	; 0x2a
 80027e2:	f040 80ac 	bne.w	800293e <chprintf+0x1ce>
      width = va_arg(ap, int);
 80027e6:	f859 1b04 	ldr.w	r1, [r9], #4
      c = *fmt++;
 80027ea:	786b      	ldrb	r3, [r5, #1]
 80027ec:	1cac      	adds	r4, r5, #2
    if (c == '.') {
 80027ee:	2b2e      	cmp	r3, #46	; 0x2e
 80027f0:	f000 8130 	beq.w	8002a54 <chprintf+0x2e4>
    precision = 0;
 80027f4:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 80027f6:	f003 05df 	and.w	r5, r3, #223	; 0xdf
 80027fa:	2d4c      	cmp	r5, #76	; 0x4c
 80027fc:	f000 80b2 	beq.w	8002964 <chprintf+0x1f4>
      is_long = (c >= 'A') && (c <= 'Z');
 8002800:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
    switch (c) {
 8002804:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 8002808:	f200 8198 	bhi.w	8002b3c <chprintf+0x3cc>
 800280c:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8002810:	0196015e 	.word	0x0196015e
 8002814:	01960196 	.word	0x01960196
 8002818:	015e0196 	.word	0x015e0196
 800281c:	01960196 	.word	0x01960196
 8002820:	01960196 	.word	0x01960196
 8002824:	019a0196 	.word	0x019a0196
 8002828:	01960035 	.word	0x01960035
 800282c:	01960196 	.word	0x01960196
 8002830:	00940196 	.word	0x00940196
 8002834:	01960196 	.word	0x01960196
 8002838:	01960035 	.word	0x01960035
 800283c:	01960196 	.word	0x01960196
 8002840:	01960196 	.word	0x01960196
 8002844:	01960196 	.word	0x01960196
 8002848:	01960196 	.word	0x01960196
 800284c:	014d0196 	.word	0x014d0196
 8002850:	0196015e 	.word	0x0196015e
 8002854:	01960196 	.word	0x01960196
 8002858:	015e0196 	.word	0x015e0196
 800285c:	01960196 	.word	0x01960196
 8002860:	01960196 	.word	0x01960196
 8002864:	019a0196 	.word	0x019a0196
 8002868:	01960035 	.word	0x01960035
 800286c:	012d0196 	.word	0x012d0196
 8002870:	00940196 	.word	0x00940196
 8002874:	01960196 	.word	0x01960196
 8002878:	0035      	.short	0x0035
      if (c == 0) {
 800287a:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 800287e:	f859 5b04 	ldr.w	r5, [r9], #4
  q = p + MAX_FILLER;
 8002882:	f10d 0317 	add.w	r3, sp, #23
 8002886:	e000      	b.n	800288a <chprintf+0x11a>
  } while ((ll /= radix) != 0);
 8002888:	4663      	mov	r3, ip
    i = (int)(l % radix);
 800288a:	46aa      	mov	sl, r5
 800288c:	fbb5 f5fe 	udiv	r5, r5, lr
 8002890:	fb0e ab15 	mls	fp, lr, r5, sl
    i += '0';
 8002894:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    if (i > '9') {
 8002898:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 800289a:	bfc8      	it	gt
 800289c:	f10b 0237 	addgt.w	r2, fp, #55	; 0x37
    *--q = i;
 80028a0:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 80028a2:	45f2      	cmp	sl, lr
    *--q = i;
 80028a4:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80028a8:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 80028ac:	d2ec      	bcs.n	8002888 <chprintf+0x118>
  i = (int)(p + MAX_FILLER - q);
 80028ae:	f10d 0a0c 	add.w	sl, sp, #12
 80028b2:	f10d 0517 	add.w	r5, sp, #23
 80028b6:	eba5 050c 	sub.w	r5, r5, ip
 80028ba:	46d6      	mov	lr, sl
 80028bc:	f10d 0c17 	add.w	ip, sp, #23
 80028c0:	e001      	b.n	80028c6 <chprintf+0x156>
 80028c2:	f813 2b01 	ldrb.w	r2, [r3], #1
    *p++ = *q++;
 80028c6:	f80e 2b01 	strb.w	r2, [lr], #1
  while (--i);
 80028ca:	4563      	cmp	r3, ip
 80028cc:	d1f9      	bne.n	80028c2 <chprintf+0x152>
 80028ce:	1b49      	subs	r1, r1, r5
 80028d0:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 80028d2:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 80028d6:	b920      	cbnz	r0, 80028e2 <chprintf+0x172>
    if (width < 0) {
 80028d8:	2900      	cmp	r1, #0
      width = -width;
 80028da:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 80028de:	f300 8145 	bgt.w	8002b6c <chprintf+0x3fc>
    while (--i >= 0) {
 80028e2:	2d00      	cmp	r5, #0
 80028e4:	db0f      	blt.n	8002906 <chprintf+0x196>
 80028e6:	1c6b      	adds	r3, r5, #1
 80028e8:	4453      	add	r3, sl
 80028ea:	9401      	str	r4, [sp, #4]
 80028ec:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80028f4:	68d2      	ldr	r2, [r2, #12]
 80028f6:	4638      	mov	r0, r7
 80028f8:	4790      	blx	r2
    while (--i >= 0) {
 80028fa:	45a2      	cmp	sl, r4
 80028fc:	d1f7      	bne.n	80028ee <chprintf+0x17e>
 80028fe:	f108 0801 	add.w	r8, r8, #1
 8002902:	9c01      	ldr	r4, [sp, #4]
 8002904:	44a8      	add	r8, r5
    while (width) {
 8002906:	f1bb 0f00 	cmp.w	fp, #0
 800290a:	f43f af4b 	beq.w	80027a4 <chprintf+0x34>
 800290e:	465d      	mov	r5, fp
      streamPut(chp, (uint8_t)filler);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4631      	mov	r1, r6
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4638      	mov	r0, r7
 8002918:	4798      	blx	r3
    while (width) {
 800291a:	3d01      	subs	r5, #1
 800291c:	d1f8      	bne.n	8002910 <chprintf+0x1a0>
    c = *fmt++;
 800291e:	4625      	mov	r5, r4
 8002920:	44d8      	add	r8, fp
 8002922:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8002926:	2900      	cmp	r1, #0
 8002928:	f47f af42 	bne.w	80027b0 <chprintf+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 800292c:	4640      	mov	r0, r8
 800292e:	b006      	add	sp, #24
 8002930:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002934:	b003      	add	sp, #12
 8002936:	4770      	bx	lr
      if (c == 0) {
 8002938:	f04f 0e0a 	mov.w	lr, #10
 800293c:	e79f      	b.n	800287e <chprintf+0x10e>
        c = *fmt++;
 800293e:	1c6c      	adds	r4, r5, #1
        if (c == 0) {
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f3      	beq.n	800292c <chprintf+0x1bc>
      width = 0;
 8002944:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 8002946:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 800294e:	eb01 0581 	add.w	r5, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 8002952:	f63f af4c 	bhi.w	80027ee <chprintf+0x7e>
        c = *fmt++;
 8002956:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 800295a:	eb02 0145 	add.w	r1, r2, r5, lsl #1
        if (c == 0) {
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f1      	bne.n	8002946 <chprintf+0x1d6>
 8002962:	e7e3      	b.n	800292c <chprintf+0x1bc>
      c = *fmt++;
 8002964:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0df      	beq.n	800292c <chprintf+0x1bc>
    switch (c) {
 800296c:	f1a3 0544 	sub.w	r5, r3, #68	; 0x44
 8002970:	2d34      	cmp	r5, #52	; 0x34
 8002972:	f200 80e3 	bhi.w	8002b3c <chprintf+0x3cc>
 8002976:	f20f 0c08 	addw	ip, pc, #8
 800297a:	f85c f025 	ldr.w	pc, [ip, r5, lsl #2]
 800297e:	bf00      	nop
 8002980:	08002acd 	.word	0x08002acd
 8002984:	08002b3d 	.word	0x08002b3d
 8002988:	08002b3d 	.word	0x08002b3d
 800298c:	08002b3d 	.word	0x08002b3d
 8002990:	08002b3d 	.word	0x08002b3d
 8002994:	08002acd 	.word	0x08002acd
 8002998:	08002b3d 	.word	0x08002b3d
 800299c:	08002b3d 	.word	0x08002b3d
 80029a0:	08002b3d 	.word	0x08002b3d
 80029a4:	08002b3d 	.word	0x08002b3d
 80029a8:	08002b3d 	.word	0x08002b3d
 80029ac:	08002b45 	.word	0x08002b45
 80029b0:	0800287b 	.word	0x0800287b
 80029b4:	08002b3d 	.word	0x08002b3d
 80029b8:	08002b3d 	.word	0x08002b3d
 80029bc:	08002b3d 	.word	0x08002b3d
 80029c0:	08002b3d 	.word	0x08002b3d
 80029c4:	08002939 	.word	0x08002939
 80029c8:	08002b3d 	.word	0x08002b3d
 80029cc:	08002b3d 	.word	0x08002b3d
 80029d0:	0800287b 	.word	0x0800287b
 80029d4:	08002b3d 	.word	0x08002b3d
 80029d8:	08002b3d 	.word	0x08002b3d
 80029dc:	08002b3d 	.word	0x08002b3d
 80029e0:	08002b3d 	.word	0x08002b3d
 80029e4:	08002b3d 	.word	0x08002b3d
 80029e8:	08002b3d 	.word	0x08002b3d
 80029ec:	08002b3d 	.word	0x08002b3d
 80029f0:	08002b3d 	.word	0x08002b3d
 80029f4:	08002b3d 	.word	0x08002b3d
 80029f8:	08002b3d 	.word	0x08002b3d
 80029fc:	08002aab 	.word	0x08002aab
 8002a00:	08002acd 	.word	0x08002acd
 8002a04:	08002b3d 	.word	0x08002b3d
 8002a08:	08002b3d 	.word	0x08002b3d
 8002a0c:	08002b3d 	.word	0x08002b3d
 8002a10:	08002b3d 	.word	0x08002b3d
 8002a14:	08002acd 	.word	0x08002acd
 8002a18:	08002b3d 	.word	0x08002b3d
 8002a1c:	08002b3d 	.word	0x08002b3d
 8002a20:	08002b3d 	.word	0x08002b3d
 8002a24:	08002b3d 	.word	0x08002b3d
 8002a28:	08002b3d 	.word	0x08002b3d
 8002a2c:	08002b45 	.word	0x08002b45
 8002a30:	0800287b 	.word	0x0800287b
 8002a34:	08002b3d 	.word	0x08002b3d
 8002a38:	08002b3d 	.word	0x08002b3d
 8002a3c:	08002a6b 	.word	0x08002a6b
 8002a40:	08002b3d 	.word	0x08002b3d
 8002a44:	08002939 	.word	0x08002939
 8002a48:	08002b3d 	.word	0x08002b3d
 8002a4c:	08002b3d 	.word	0x08002b3d
 8002a50:	0800287b 	.word	0x0800287b
      c = *fmt++;
 8002a54:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f43f af68 	beq.w	800292c <chprintf+0x1bc>
      if (c == '*') {
 8002a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a5e:	d174      	bne.n	8002b4a <chprintf+0x3da>
        c = *fmt++;
 8002a60:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8002a62:	f859 2b04 	ldr.w	r2, [r9], #4
        c = *fmt++;
 8002a66:	3402      	adds	r4, #2
 8002a68:	e6c5      	b.n	80027f6 <chprintf+0x86>
      if ((s = va_arg(ap, char *)) == 0) {
 8002a6a:	f859 ab04 	ldr.w	sl, [r9], #4
 8002a6e:	f1ba 0f00 	cmp.w	sl, #0
 8002a72:	f000 80bc 	beq.w	8002bee <chprintf+0x47e>
 8002a76:	f89a 3000 	ldrb.w	r3, [sl]
      if (precision == 0) {
 8002a7a:	2a00      	cmp	r2, #0
 8002a7c:	f040 80aa 	bne.w	8002bd4 <chprintf+0x464>
      for (p = s; *p && (--precision >= 0); p++)
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80ab 	beq.w	8002bdc <chprintf+0x46c>
 8002a86:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8002a8a:	4655      	mov	r5, sl
 8002a8c:	e001      	b.n	8002a92 <chprintf+0x322>
 8002a8e:	42d3      	cmn	r3, r2
 8002a90:	d405      	bmi.n	8002a9e <chprintf+0x32e>
 8002a92:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002a96:	ebaa 0305 	sub.w	r3, sl, r5
 8002a9a:	2e00      	cmp	r6, #0
 8002a9c:	d1f7      	bne.n	8002a8e <chprintf+0x31e>
 8002a9e:	eba5 050a 	sub.w	r5, r5, sl
 8002aa2:	1b49      	subs	r1, r1, r5
      filler = ' ';
 8002aa4:	2620      	movs	r6, #32
 8002aa6:	3d01      	subs	r5, #1
 8002aa8:	e713      	b.n	80028d2 <chprintf+0x162>
      *p++ = va_arg(ap, int);
 8002aaa:	f859 3b04 	ldr.w	r3, [r9], #4
 8002aae:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8002ab2:	3901      	subs	r1, #1
      filler = ' ';
 8002ab4:	2620      	movs	r6, #32
    if ((width -= i) < 0) {
 8002ab6:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002aba:	b918      	cbnz	r0, 8002ac4 <chprintf+0x354>
    if (width < 0) {
 8002abc:	2900      	cmp	r1, #0
      width = -width;
 8002abe:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002ac2:	dc72      	bgt.n	8002baa <chprintf+0x43a>
    if (left_align == false) {
 8002ac4:	2500      	movs	r5, #0
 8002ac6:	f10d 0a0c 	add.w	sl, sp, #12
 8002aca:	e70c      	b.n	80028e6 <chprintf+0x176>
        l = va_arg(ap, int);
 8002acc:	f859 cb04 	ldr.w	ip, [r9], #4
      if (l < 0) {
 8002ad0:	f1bc 0f00 	cmp.w	ip, #0
 8002ad4:	db5f      	blt.n	8002b96 <chprintf+0x426>
        if (do_sign) {
 8002ad6:	f1be 0f00 	cmp.w	lr, #0
 8002ada:	f000 808e 	beq.w	8002bfa <chprintf+0x48a>
          *p++ = '+';
 8002ade:	232b      	movs	r3, #43	; 0x2b
 8002ae0:	f88d 300c 	strb.w	r3, [sp, #12]
 8002ae4:	f10d 050d 	add.w	r5, sp, #13
 8002ae8:	f10d 0a0c 	add.w	sl, sp, #12
  q = p + MAX_FILLER;
 8002aec:	f105 030b 	add.w	r3, r5, #11
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	461a      	mov	r2, r3
    i = (int)(l % radix);
 8002af4:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <chprintf+0x4a4>)
 8002af6:	fba3 e30c 	umull	lr, r3, r3, ip
 8002afa:	08db      	lsrs	r3, r3, #3
 8002afc:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8002b00:	469e      	mov	lr, r3
 8002b02:	ebac 034b 	sub.w	r3, ip, fp, lsl #1
    i += '0';
 8002b06:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 8002b08:	46e3      	mov	fp, ip
    *--q = i;
 8002b0a:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8002b0c:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 8002b10:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8002b14:	46f4      	mov	ip, lr
  } while ((ll /= radix) != 0);
 8002b16:	dced      	bgt.n	8002af4 <chprintf+0x384>
 8002b18:	469e      	mov	lr, r3
  i = (int)(p + MAX_FILLER - q);
 8002b1a:	9b01      	ldr	r3, [sp, #4]
 8002b1c:	eba3 0c02 	sub.w	ip, r3, r2
 8002b20:	44ac      	add	ip, r5
 8002b22:	4673      	mov	r3, lr
 8002b24:	e001      	b.n	8002b2a <chprintf+0x3ba>
 8002b26:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8002b2a:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 8002b2e:	4565      	cmp	r5, ip
 8002b30:	d1f9      	bne.n	8002b26 <chprintf+0x3b6>
 8002b32:	eba5 050a 	sub.w	r5, r5, sl
 8002b36:	1b49      	subs	r1, r1, r5
 8002b38:	3d01      	subs	r5, #1
 8002b3a:	e6ca      	b.n	80028d2 <chprintf+0x162>
      *p++ = c;
 8002b3c:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8002b40:	3901      	subs	r1, #1
 8002b42:	e7b8      	b.n	8002ab6 <chprintf+0x346>
      if (c == 0) {
 8002b44:	f04f 0e08 	mov.w	lr, #8
 8002b48:	e699      	b.n	800287e <chprintf+0x10e>
      c = *fmt++;
 8002b4a:	3401      	adds	r4, #1
    precision = 0;
 8002b4c:	2200      	movs	r2, #0
        while (c >= '0' && c <= '9') {
 8002b4e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8002b52:	b2ed      	uxtb	r5, r5
 8002b54:	2d09      	cmp	r5, #9
          precision = precision * 10 + c;
 8002b56:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 8002b5a:	f63f ae4c 	bhi.w	80027f6 <chprintf+0x86>
          c = *fmt++;
 8002b5e:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8002b62:	eb05 024c 	add.w	r2, r5, ip, lsl #1
          if (c == 0) {
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f1      	bne.n	8002b4e <chprintf+0x3de>
 8002b6a:	e6df      	b.n	800292c <chprintf+0x1bc>
      width = -width;
 8002b6c:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002b70:	f89a 1000 	ldrb.w	r1, [sl]
 8002b74:	292d      	cmp	r1, #45	; 0x2d
 8002b76:	d021      	beq.n	8002bbc <chprintf+0x44c>
        streamPut(chp, (uint8_t)filler);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4631      	mov	r1, r6
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	4638      	mov	r0, r7
 8002b80:	4798      	blx	r3
      } while (++width != 0);
 8002b82:	f11b 0b01 	adds.w	fp, fp, #1
 8002b86:	d1f7      	bne.n	8002b78 <chprintf+0x408>
 8002b88:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 8002b8a:	2d00      	cmp	r5, #0
 8002b8c:	eba8 0803 	sub.w	r8, r8, r3
 8002b90:	f6bf aea9 	bge.w	80028e6 <chprintf+0x176>
 8002b94:	e606      	b.n	80027a4 <chprintf+0x34>
        *p++ = '-';
 8002b96:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002b98:	f1cc 0c00 	rsb	ip, ip, #0
        *p++ = '-';
 8002b9c:	f88d 300c 	strb.w	r3, [sp, #12]
 8002ba0:	f10d 050d 	add.w	r5, sp, #13
 8002ba4:	f10d 0a0c 	add.w	sl, sp, #12
 8002ba8:	e7a0      	b.n	8002aec <chprintf+0x37c>
      if (*s == '-' && filler == '0') {
 8002baa:	f89d 100c 	ldrb.w	r1, [sp, #12]
      width = -width;
 8002bae:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002bb2:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 8002bb4:	f10d 0a0c 	add.w	sl, sp, #12
 8002bb8:	4605      	mov	r5, r0
      if (*s == '-' && filler == '0') {
 8002bba:	d1dd      	bne.n	8002b78 <chprintf+0x408>
 8002bbc:	2e30      	cmp	r6, #48	; 0x30
 8002bbe:	d1db      	bne.n	8002b78 <chprintf+0x408>
        streamPut(chp, (uint8_t)*s++);
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	4638      	mov	r0, r7
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	4790      	blx	r2
 8002bc8:	f10a 0a01 	add.w	sl, sl, #1
        n++;
 8002bcc:	f108 0801 	add.w	r8, r8, #1
        i--;
 8002bd0:	3d01      	subs	r5, #1
 8002bd2:	e7d1      	b.n	8002b78 <chprintf+0x408>
      for (p = s; *p && (--precision >= 0); p++)
 8002bd4:	b113      	cbz	r3, 8002bdc <chprintf+0x46c>
 8002bd6:	3a01      	subs	r2, #1
 8002bd8:	f57f af57 	bpl.w	8002a8a <chprintf+0x31a>
    if ((width -= i) < 0) {
 8002bdc:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002be0:	b918      	cbnz	r0, 8002bea <chprintf+0x47a>
    if (width < 0) {
 8002be2:	2900      	cmp	r1, #0
      width = -width;
 8002be4:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002be8:	dc0d      	bgt.n	8002c06 <chprintf+0x496>
    if (left_align == false) {
 8002bea:	2620      	movs	r6, #32
 8002bec:	e68b      	b.n	8002906 <chprintf+0x196>
        s = "(null)";
 8002bee:	f8df a028 	ldr.w	sl, [pc, #40]	; 8002c18 <chprintf+0x4a8>
      if (precision == 0) {
 8002bf2:	2a00      	cmp	r2, #0
 8002bf4:	f43f af47 	beq.w	8002a86 <chprintf+0x316>
 8002bf8:	e7ed      	b.n	8002bd6 <chprintf+0x466>
    p = tmpbuf;
 8002bfa:	f10d 0a0c 	add.w	sl, sp, #12
 8002bfe:	4655      	mov	r5, sl
 8002c00:	e774      	b.n	8002aec <chprintf+0x37c>
  int n = 0;
 8002c02:	4688      	mov	r8, r1
  return formatted_bytes;
 8002c04:	e692      	b.n	800292c <chprintf+0x1bc>
      width = -width;
 8002c06:	f8cd b004 	str.w	fp, [sp, #4]
    if (width < 0) {
 8002c0a:	2620      	movs	r6, #32
 8002c0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002c10:	e7ae      	b.n	8002b70 <chprintf+0x400>
 8002c12:	bf00      	nop
 8002c14:	cccccccd 	.word	0xcccccccd
 8002c18:	08005e84 	.word	0x08005e84
 8002c1c:	00000000 	.word	0x00000000

08002c20 <CharacterInputThread>:
  }
}

//extern uint8_t buffer[256];
static THD_WORKING_AREA(waCharacterInputThread, 32768);
static THD_FUNCTION(CharacterInputThread, arg) {
 8002c20:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  uint8_t c;
  uint8_t tbuf[32768];
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 8002c24:	4b9f      	ldr	r3, [pc, #636]	; (8002ea4 <CharacterInputThread+0x284>)
 8002c26:	4da0      	ldr	r5, [pc, #640]	; (8002ea8 <CharacterInputThread+0x288>)
 8002c28:	f8df b290 	ldr.w	fp, [pc, #656]	; 8002ebc <CharacterInputThread+0x29c>
 8002c2c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8002ec0 <CharacterInputThread+0x2a0>
          }
          //write_pins(tbuf[0]);
          chprintf(ost, "O");
        }
        else{
          chprintf(dbg, "Checksum ERROR\r\n");
 8002c30:	f8df a290 	ldr.w	sl, [pc, #656]	; 8002ec4 <CharacterInputThread+0x2a4>
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 8002c34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
static THD_FUNCTION(CharacterInputThread, arg) {
 8002c38:	f5ad 4d00 	sub.w	sp, sp, #32768	; 0x8000
 8002c3c:	b08b      	sub	sp, #44	; 0x2c
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 8002c3e:	ab07      	add	r3, sp, #28
 8002c40:	c303      	stmia	r3!, {r0, r1}
      c=streamGet(&OSTRICHPORT);
 8002c42:	462e      	mov	r6, r5
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 8002c44:	701a      	strb	r2, [r3, #0]
  char_state_t state = IDLE;
 8002c46:	2700      	movs	r7, #0
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002c48:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d167      	bne.n	8002d24 <CharacterInputThread+0x104>
      c=streamGet(&OSTRICHPORT);
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	4630      	mov	r0, r6
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	4798      	blx	r3
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	b2c0      	uxtb	r0, r0
 8002c60:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 8002c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c68:	2200      	movs	r2, #0
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8002c70:	429c      	cmp	r4, r3
 8002c72:	f503 549c 	add.w	r4, r3, #4992	; 0x1380
 8002c76:	f104 0408 	add.w	r4, r4, #8
 8002c7a:	d336      	bcc.n	8002cea <CharacterInputThread+0xca>
      switch (state){
 8002c7c:	2f32      	cmp	r7, #50	; 0x32
 8002c7e:	d8e3      	bhi.n	8002c48 <CharacterInputThread+0x28>
 8002c80:	e8df f017 	tbh	[pc, r7, lsl #1]
 8002c84:	02c20033 	.word	0x02c20033
 8002c88:	02a40294 	.word	0x02a40294
 8002c8c:	02750256 	.word	0x02750256
 8002c90:	0282026c 	.word	0x0282026c
 8002c94:	02f501d5 	.word	0x02f501d5
 8002c98:	02e402c7 	.word	0x02e402c7
 8002c9c:	02d801f0 	.word	0x02d801f0
 8002ca0:	01bf0263 	.word	0x01bf0263
 8002ca4:	021f01ae 	.word	0x021f01ae
 8002ca8:	02030218 	.word	0x02030218
 8002cac:	022d01f7 	.word	0x022d01f7
 8002cb0:	023b0226 	.word	0x023b0226
 8002cb4:	024901ca 	.word	0x024901ca
 8002cb8:	024201e2 	.word	0x024201e2
 8002cbc:	019c01a7 	.word	0x019c01a7
 8002cc0:	0187018e 	.word	0x0187018e
 8002cc4:	014f017d 	.word	0x014f017d
 8002cc8:	01370143 	.word	0x01370143
 8002ccc:	01710122 	.word	0x01710122
 8002cd0:	009d0164 	.word	0x009d0164
 8002cd4:	00d6008d 	.word	0x00d6008d
 8002cd8:	00be00ca 	.word	0x00be00ca
 8002cdc:	00f800a9 	.word	0x00f800a9
 8002ce0:	010400eb 	.word	0x010400eb
 8002ce4:	006d0078 	.word	0x006d0078
 8002ce8:	006b      	.short	0x006b
        cs = c;
 8002cea:	f1a0 0342 	sub.w	r3, r0, #66	; 0x42
 8002cee:	f88b 0000 	strb.w	r0, [fp]
        switch (c){
 8002cf2:	2b18      	cmp	r3, #24
 8002cf4:	d80e      	bhi.n	8002d14 <CharacterInputThread+0xf4>
 8002cf6:	e8df f003 	tbb	[pc, r3]
 8002cfa:	2a2e      	.short	0x2a2e
 8002cfc:	0d0d0d28 	.word	0x0d0d0d28
 8002d00:	0d0d0d0d 	.word	0x0d0d0d0d
 8002d04:	0d260d0d 	.word	0x0d260d0d
 8002d08:	20220d24 	.word	0x20220d24
 8002d0c:	1e2c0d0d 	.word	0x1e2c0d0d
 8002d10:	0d1c      	.short	0x0d1c
 8002d12:	1a          	.byte	0x1a
 8002d13:	00          	.byte	0x00
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002d14:	f8d5 348c 	ldr.w	r3, [r5, #1164]	; 0x48c
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b04      	cmp	r3, #4
          state = IDLE;
 8002d1e:	f04f 0700 	mov.w	r7, #0
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002d22:	d097      	beq.n	8002c54 <CharacterInputThread+0x34>
        state = IDLE;
        break;
      }
    }
    else{
      chThdSleepMilliseconds(100);
 8002d24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d28:	f7fe ff5a 	bl	8001be0 <chThdSleep>
 8002d2c:	e78c      	b.n	8002c48 <CharacterInputThread+0x28>
          state = BULK;
 8002d2e:	2719      	movs	r7, #25
 8002d30:	e78a      	b.n	8002c48 <CharacterInputThread+0x28>
          state = XSVF_X;
 8002d32:	272e      	movs	r7, #46	; 0x2e
 8002d34:	e788      	b.n	8002c48 <CharacterInputThread+0x28>
          state = WRITE;
 8002d36:	2710      	movs	r7, #16
 8002d38:	e786      	b.n	8002c48 <CharacterInputThread+0x28>
          state = BAUD;
 8002d3a:	270c      	movs	r7, #12
 8002d3c:	e784      	b.n	8002c48 <CharacterInputThread+0x28>
          state = READ;
 8002d3e:	2715      	movs	r7, #21
 8002d40:	e782      	b.n	8002c48 <CharacterInputThread+0x28>
          state = PINS_C;
 8002d42:	272b      	movs	r7, #43	; 0x2b
 8002d44:	e780      	b.n	8002c48 <CharacterInputThread+0x28>
          state = SERIAL;
 8002d46:	270e      	movs	r7, #14
 8002d48:	e77e      	b.n	8002c48 <CharacterInputThread+0x28>
          state = CLOCK_D;
 8002d4a:	2726      	movs	r7, #38	; 0x26
 8002d4c:	e77c      	b.n	8002c48 <CharacterInputThread+0x28>
          state = CONFIG_C;
 8002d4e:	2723      	movs	r7, #35	; 0x23
 8002d50:	e77a      	b.n	8002c48 <CharacterInputThread+0x28>
          state = VERSION;
 8002d52:	2701      	movs	r7, #1
 8002d54:	e778      	b.n	8002c48 <CharacterInputThread+0x28>
        cs = c;
 8002d56:	2702      	movs	r7, #2
 8002d58:	e776      	b.n	8002c48 <CharacterInputThread+0x28>
        state = IDLE;
 8002d5a:	2700      	movs	r7, #0
 8002d5c:	e774      	b.n	8002c48 <CharacterInputThread+0x28>
          if (c == cs){
 8002d5e:	f89b 3000 	ldrb.w	r3, [fp]
 8002d62:	4283      	cmp	r3, r0
 8002d64:	f000 82d0 	beq.w	8003308 <CharacterInputThread+0x6e8>
            chprintf(dbg, "Checksum ERROR\r\n");
 8002d68:	4950      	ldr	r1, [pc, #320]	; (8002eac <CharacterInputThread+0x28c>)
 8002d6a:	4650      	mov	r0, sl
 8002d6c:	f7ff fd00 	bl	8002770 <chprintf>
          state = IDLE;
 8002d70:	2700      	movs	r7, #0
 8002d72:	e769      	b.n	8002c48 <CharacterInputThread+0x28>
          tbuf[cntdwn++] = c;
 8002d74:	4b4e      	ldr	r3, [pc, #312]	; (8002eb0 <CharacterInputThread+0x290>)
          cs += c;
 8002d76:	f89b 2000 	ldrb.w	r2, [fp]
          tbuf[cntdwn++] = c;
 8002d7a:	881b      	ldrh	r3, [r3, #0]
          if (cntdwn == count){
 8002d7c:	f8b9 1000 	ldrh.w	r1, [r9]
          tbuf[cntdwn++] = c;
 8002d80:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8002d84:	f80c 0003 	strb.w	r0, [ip, r3]
          cs += c;
 8002d88:	4410      	add	r0, r2
          tbuf[cntdwn++] = c;
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	4a48      	ldr	r2, [pc, #288]	; (8002eb0 <CharacterInputThread+0x290>)
          cs += c;
 8002d8e:	f88b 0000 	strb.w	r0, [fp]
          tbuf[cntdwn++] = c;
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	8013      	strh	r3, [r2, #0]
            state = XSVF_XnCs;
 8002d96:	4299      	cmp	r1, r3
 8002d98:	bf08      	it	eq
 8002d9a:	2731      	moveq	r7, #49	; 0x31
 8002d9c:	e754      	b.n	8002c48 <CharacterInputThread+0x28>
        if (c == cs){
 8002d9e:	f89b 3000 	ldrb.w	r3, [fp]
 8002da2:	4283      	cmp	r3, r0
 8002da4:	f040 8296 	bne.w	80032d4 <CharacterInputThread+0x6b4>
          streamPut(ost, temp);
 8002da8:	682b      	ldr	r3, [r5, #0]
          temp=0;
 8002daa:	4a42      	ldr	r2, [pc, #264]	; (8002eb4 <CharacterInputThread+0x294>)
          streamPut(ost, temp);
 8002dac:	68db      	ldr	r3, [r3, #12]
          count = 0;
 8002dae:	2100      	movs	r1, #0
          streamPut(ost, temp);
 8002db0:	4630      	mov	r0, r6
          count = 0;
 8002db2:	f8a9 1000 	strh.w	r1, [r9]
          temp=0;
 8002db6:	7011      	strb	r1, [r2, #0]
        state = IDLE;
 8002db8:	460f      	mov	r7, r1
          streamPut(ost, temp);
 8002dba:	4798      	blx	r3
 8002dbc:	e744      	b.n	8002c48 <CharacterInputThread+0x28>
        cs += c;
 8002dbe:	f89b 3000 	ldrb.w	r3, [fp]
        cntdwn = 0;
 8002dc2:	4a3b      	ldr	r2, [pc, #236]	; (8002eb0 <CharacterInputThread+0x290>)
        count = (uint16_t)c;
 8002dc4:	f8a9 0000 	strh.w	r0, [r9]
        cs += c;
 8002dc8:	4418      	add	r0, r3
        cntdwn = 0;
 8002dca:	2300      	movs	r3, #0
        cs += c;
 8002dcc:	f88b 0000 	strb.w	r0, [fp]
        cntdwn = 0;
 8002dd0:	8013      	strh	r3, [r2, #0]
        state = CLOCK_DWn;
 8002dd2:	2729      	movs	r7, #41	; 0x29
 8002dd4:	e738      	b.n	8002c48 <CharacterInputThread+0x28>
        tbuf[cntdwn++] = c;
 8002dd6:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <CharacterInputThread+0x290>)
        cs += c;
 8002dd8:	f89b 2000 	ldrb.w	r2, [fp]
        tbuf[cntdwn++] = c;
 8002ddc:	881b      	ldrh	r3, [r3, #0]
        if (cntdwn == count){
 8002dde:	f8b9 1000 	ldrh.w	r1, [r9]
        tbuf[cntdwn++] = c;
 8002de2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8002de6:	f80c 0003 	strb.w	r0, [ip, r3]
        cs += c;
 8002dea:	4410      	add	r0, r2
        tbuf[cntdwn++] = c;
 8002dec:	3301      	adds	r3, #1
 8002dee:	4a30      	ldr	r2, [pc, #192]	; (8002eb0 <CharacterInputThread+0x290>)
        cs += c;
 8002df0:	f88b 0000 	strb.w	r0, [fp]
        tbuf[cntdwn++] = c;
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	8013      	strh	r3, [r2, #0]
          state = PINS_CnCs;
 8002df8:	4299      	cmp	r1, r3
 8002dfa:	bf08      	it	eq
 8002dfc:	272d      	moveq	r7, #45	; 0x2d
 8002dfe:	e723      	b.n	8002c48 <CharacterInputThread+0x28>
        cs += c;
 8002e00:	f89b 3000 	ldrb.w	r3, [fp]
        cntdwn = 0;
 8002e04:	4a2a      	ldr	r2, [pc, #168]	; (8002eb0 <CharacterInputThread+0x290>)
        count = (uint16_t)c;
 8002e06:	f8a9 0000 	strh.w	r0, [r9]
        cs += c;
 8002e0a:	4418      	add	r0, r3
        cntdwn = 0;
 8002e0c:	2300      	movs	r3, #0
        cs += c;
 8002e0e:	f88b 0000 	strb.w	r0, [fp]
        cntdwn = 0;
 8002e12:	8013      	strh	r3, [r2, #0]
        state = PINS_Cn;
 8002e14:	272c      	movs	r7, #44	; 0x2c
 8002e16:	e717      	b.n	8002c48 <CharacterInputThread+0x28>
        if (c == cs){
 8002e18:	f89b 3000 	ldrb.w	r3, [fp]
 8002e1c:	4283      	cmp	r3, r0
          chprintf(ost, "O");
 8002e1e:	bf0b      	itete	eq
 8002e20:	4925      	ldreq	r1, [pc, #148]	; (8002eb8 <CharacterInputThread+0x298>)
          chprintf(dbg, "Checksum ERROR\r\n");
 8002e22:	4922      	ldrne	r1, [pc, #136]	; (8002eac <CharacterInputThread+0x28c>)
          chprintf(ost, "O");
 8002e24:	4630      	moveq	r0, r6
          chprintf(dbg, "Checksum ERROR\r\n");
 8002e26:	4650      	movne	r0, sl
 8002e28:	f7ff fca2 	bl	8002770 <chprintf>
        state = IDLE;
 8002e2c:	2700      	movs	r7, #0
 8002e2e:	e70b      	b.n	8002c48 <CharacterInputThread+0x28>
        tbuf[cntdwn++] = c;
 8002e30:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <CharacterInputThread+0x290>)
        cs += c;
 8002e32:	f89b 2000 	ldrb.w	r2, [fp]
        tbuf[cntdwn++] = c;
 8002e36:	881b      	ldrh	r3, [r3, #0]
        if (cntdwn == count){
 8002e38:	f8b9 1000 	ldrh.w	r1, [r9]
        tbuf[cntdwn++] = c;
 8002e3c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8002e40:	f80c 0003 	strb.w	r0, [ip, r3]
        cs += c;
 8002e44:	4410      	add	r0, r2
        tbuf[cntdwn++] = c;
 8002e46:	3301      	adds	r3, #1
 8002e48:	4a19      	ldr	r2, [pc, #100]	; (8002eb0 <CharacterInputThread+0x290>)
        cs += c;
 8002e4a:	f88b 0000 	strb.w	r0, [fp]
        tbuf[cntdwn++] = c;
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	8013      	strh	r3, [r2, #0]
          state = CLOCK_DWnCs;
 8002e52:	4299      	cmp	r1, r3
 8002e54:	bf08      	it	eq
 8002e56:	272a      	moveq	r7, #42	; 0x2a
 8002e58:	e6f6      	b.n	8002c48 <CharacterInputThread+0x28>
          cs += c;
 8002e5a:	f89b 3000 	ldrb.w	r3, [fp]
 8002e5e:	4403      	add	r3, r0
 8002e60:	f88b 3000 	strb.w	r3, [fp]
          cntdwn = 0;
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <CharacterInputThread+0x290>)
          count = (uint16_t)c * 256;
 8002e66:	0200      	lsls	r0, r0, #8
          cntdwn = 0;
 8002e68:	2200      	movs	r2, #0
          count = (uint16_t)c * 256;
 8002e6a:	f8a9 0000 	strh.w	r0, [r9]
          cntdwn = 0;
 8002e6e:	801a      	strh	r2, [r3, #0]
          state = XSVF_Xn;
 8002e70:	272f      	movs	r7, #47	; 0x2f
 8002e72:	e6e9      	b.n	8002c48 <CharacterInputThread+0x28>
        if (c == cs){
 8002e74:	f89b 3000 	ldrb.w	r3, [fp]
 8002e78:	4283      	cmp	r3, r0
          chprintf(ost, "O");
 8002e7a:	bf0b      	itete	eq
 8002e7c:	490e      	ldreq	r1, [pc, #56]	; (8002eb8 <CharacterInputThread+0x298>)
          chprintf(dbg, "Checksum ERROR\r\n");
 8002e7e:	490b      	ldrne	r1, [pc, #44]	; (8002eac <CharacterInputThread+0x28c>)
          chprintf(ost, "O");
 8002e80:	4630      	moveq	r0, r6
          chprintf(dbg, "Checksum ERROR\r\n");
 8002e82:	4650      	movne	r0, sl
 8002e84:	f7ff fc74 	bl	8002770 <chprintf>
        state = IDLE;
 8002e88:	2700      	movs	r7, #0
 8002e8a:	e6dd      	b.n	8002c48 <CharacterInputThread+0x28>
          cs += c;
 8002e8c:	f89b 2000 	ldrb.w	r2, [fp]
          count += (uint16_t)c;
 8002e90:	f8b9 3000 	ldrh.w	r3, [r9]
          cs += c;
 8002e94:	4402      	add	r2, r0
          count += (uint16_t)c;
 8002e96:	4418      	add	r0, r3
          cs += c;
 8002e98:	f88b 2000 	strb.w	r2, [fp]
          count += (uint16_t)c;
 8002e9c:	f8a9 0000 	strh.w	r0, [r9]
          state = XSVF_Xnn;
 8002ea0:	2730      	movs	r7, #48	; 0x30
 8002ea2:	e6d1      	b.n	8002c48 <CharacterInputThread+0x28>
 8002ea4:	08005f80 	.word	0x08005f80
 8002ea8:	20000e9c 	.word	0x20000e9c
 8002eac:	08005f50 	.word	0x08005f50
 8002eb0:	20001550 	.word	0x20001550
 8002eb4:	2000185c 	.word	0x2000185c
 8002eb8:	08005f4c 	.word	0x08005f4c
 8002ebc:	20001566 	.word	0x20001566
 8002ec0:	20001564 	.word	0x20001564
 8002ec4:	20000c40 	.word	0x20000c40
        tbuf[cntdwn++] = c;
 8002ec8:	4bc6      	ldr	r3, [pc, #792]	; (80031e4 <CharacterInputThread+0x5c4>)
        cs += c;
 8002eca:	f89b 2000 	ldrb.w	r2, [fp]
        tbuf[cntdwn++] = c;
 8002ece:	881b      	ldrh	r3, [r3, #0]
        if (cntdwn == count){
 8002ed0:	f8b9 1000 	ldrh.w	r1, [r9]
        tbuf[cntdwn++] = c;
 8002ed4:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8002ed8:	f80c 0003 	strb.w	r0, [ip, r3]
        cs += c;
 8002edc:	4410      	add	r0, r2
        tbuf[cntdwn++] = c;
 8002ede:	3301      	adds	r3, #1
 8002ee0:	4ac0      	ldr	r2, [pc, #768]	; (80031e4 <CharacterInputThread+0x5c4>)
        cs += c;
 8002ee2:	f88b 0000 	strb.w	r0, [fp]
        tbuf[cntdwn++] = c;
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	8013      	strh	r3, [r2, #0]
          state = CONFIG_CnCs;
 8002eea:	4299      	cmp	r1, r3
 8002eec:	bf08      	it	eq
 8002eee:	2725      	moveq	r7, #37	; 0x25
 8002ef0:	e6aa      	b.n	8002c48 <CharacterInputThread+0x28>
        cs += c;
 8002ef2:	f89b 3000 	ldrb.w	r3, [fp]
        cntdwn = 0;
 8002ef6:	4abb      	ldr	r2, [pc, #748]	; (80031e4 <CharacterInputThread+0x5c4>)
        count = (uint16_t)c;
 8002ef8:	f8a9 0000 	strh.w	r0, [r9]
        cs += c;
 8002efc:	4418      	add	r0, r3
        cntdwn = 0;
 8002efe:	2300      	movs	r3, #0
        cs += c;
 8002f00:	f88b 0000 	strb.w	r0, [fp]
        cntdwn = 0;
 8002f04:	8013      	strh	r3, [r2, #0]
        state = CONFIG_Cn;
 8002f06:	2724      	movs	r7, #36	; 0x24
 8002f08:	e69e      	b.n	8002c48 <CharacterInputThread+0x28>
            if (c == cs){
 8002f0a:	f89b 3000 	ldrb.w	r3, [fp]
 8002f0e:	4283      	cmp	r3, r0
              chprintf(ost, "O");            }
 8002f10:	bf0b      	itete	eq
 8002f12:	49b5      	ldreq	r1, [pc, #724]	; (80031e8 <CharacterInputThread+0x5c8>)
              chprintf(dbg, "Checksum ERROR\r\n");
 8002f14:	49b5      	ldrne	r1, [pc, #724]	; (80031ec <CharacterInputThread+0x5cc>)
              chprintf(ost, "O");            }
 8002f16:	4630      	moveq	r0, r6
              chprintf(dbg, "Checksum ERROR\r\n");
 8002f18:	4650      	movne	r0, sl
 8002f1a:	f7ff fc29 	bl	8002770 <chprintf>
            state = IDLE;
 8002f1e:	2700      	movs	r7, #0
 8002f20:	e692      	b.n	8002c48 <CharacterInputThread+0x28>
            tbuf[zoff++] = c;
 8002f22:	4bb3      	ldr	r3, [pc, #716]	; (80031f0 <CharacterInputThread+0x5d0>)
            cs += c;
 8002f24:	f89b 2000 	ldrb.w	r2, [fp]
            tbuf[zoff++] = c;
 8002f28:	881b      	ldrh	r3, [r3, #0]
            if (zoff == count){
 8002f2a:	f8b9 1000 	ldrh.w	r1, [r9]
            tbuf[zoff++] = c;
 8002f2e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8002f32:	f80c 0003 	strb.w	r0, [ip, r3]
            cs += c;
 8002f36:	4410      	add	r0, r2
            tbuf[zoff++] = c;
 8002f38:	3301      	adds	r3, #1
 8002f3a:	4aad      	ldr	r2, [pc, #692]	; (80031f0 <CharacterInputThread+0x5d0>)
            cs += c;
 8002f3c:	f88b 0000 	strb.w	r0, [fp]
            tbuf[zoff++] = c;
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	8013      	strh	r3, [r2, #0]
              state = BULK_ZWnBMBCs;
 8002f44:	4299      	cmp	r1, r3
 8002f46:	bf08      	it	eq
 8002f48:	2722      	moveq	r7, #34	; 0x22
 8002f4a:	e67d      	b.n	8002c48 <CharacterInputThread+0x28>
        cs += c;
 8002f4c:	f89b 3000 	ldrb.w	r3, [fp]
 8002f50:	2852      	cmp	r0, #82	; 0x52
 8002f52:	4403      	add	r3, r0
 8002f54:	f88b 3000 	strb.w	r3, [fp]
        switch (c){
 8002f58:	f000 848c 	beq.w	8003874 <CharacterInputThread+0xc54>
 8002f5c:	2857      	cmp	r0, #87	; 0x57
 8002f5e:	bf14      	ite	ne
 8002f60:	2732      	movne	r7, #50	; 0x32
 8002f62:	2727      	moveq	r7, #39	; 0x27
 8002f64:	e670      	b.n	8002c48 <CharacterInputThread+0x28>
        if (c == cs){
 8002f66:	f89b 3000 	ldrb.w	r3, [fp]
 8002f6a:	4283      	cmp	r3, r0
          chprintf(ost, "O");
 8002f6c:	bf0b      	itete	eq
 8002f6e:	499e      	ldreq	r1, [pc, #632]	; (80031e8 <CharacterInputThread+0x5c8>)
          chprintf(dbg, "Checksum ERROR\r\n");
 8002f70:	499e      	ldrne	r1, [pc, #632]	; (80031ec <CharacterInputThread+0x5cc>)
          chprintf(ost, "O");
 8002f72:	4630      	moveq	r0, r6
          chprintf(dbg, "Checksum ERROR\r\n");
 8002f74:	4650      	movne	r0, sl
 8002f76:	f7ff fbfb 	bl	8002770 <chprintf>
        state = IDLE;
 8002f7a:	2700      	movs	r7, #0
 8002f7c:	e664      	b.n	8002c48 <CharacterInputThread+0x28>
            cs += c;
 8002f7e:	f89b 3000 	ldrb.w	r3, [fp]
            zoff = 0;
 8002f82:	4a9b      	ldr	r2, [pc, #620]	; (80031f0 <CharacterInputThread+0x5d0>)
            cs += c;
 8002f84:	4418      	add	r0, r3
            zoff = 0;
 8002f86:	2300      	movs	r3, #0
            cs += c;
 8002f88:	f88b 0000 	strb.w	r0, [fp]
            zoff = 0;
 8002f8c:	8013      	strh	r3, [r2, #0]
            state = BULK_ZWnBMB;
 8002f8e:	2721      	movs	r7, #33	; 0x21
 8002f90:	e65a      	b.n	8002c48 <CharacterInputThread+0x28>
            cs += c;
 8002f92:	f89b 3000 	ldrb.w	r3, [fp]
 8002f96:	4418      	add	r0, r3
 8002f98:	f88b 0000 	strb.w	r0, [fp]
            state = BULK_ZWnBM;
 8002f9c:	2720      	movs	r7, #32
 8002f9e:	e653      	b.n	8002c48 <CharacterInputThread+0x28>
            cs += c;
 8002fa0:	f89b 3000 	ldrb.w	r3, [fp]
 8002fa4:	4403      	add	r3, r0
 8002fa6:	f88b 3000 	strb.w	r3, [fp]
            if (c) count = (uint16_t)c;
 8002faa:	2800      	cmp	r0, #0
 8002fac:	f040 8174 	bne.w	8003298 <CharacterInputThread+0x678>
            count = 256;
 8002fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb4:	f8a9 3000 	strh.w	r3, [r9]
            state = BULK_ZWnB;
 8002fb8:	271f      	movs	r7, #31
 8002fba:	e645      	b.n	8002c48 <CharacterInputThread+0x28>
            if (c == cs){
 8002fbc:	f89b 3000 	ldrb.w	r3, [fp]
 8002fc0:	4283      	cmp	r3, r0
 8002fc2:	f000 8482 	beq.w	80038ca <CharacterInputThread+0xcaa>
              chprintf(dbg, "Checksum ERROR\r\n");
 8002fc6:	4989      	ldr	r1, [pc, #548]	; (80031ec <CharacterInputThread+0x5cc>)
 8002fc8:	4650      	mov	r0, sl
 8002fca:	f7ff fbd1 	bl	8002770 <chprintf>
            state = IDLE;
 8002fce:	2700      	movs	r7, #0
 8002fd0:	e63a      	b.n	8002c48 <CharacterInputThread+0x28>
            cs += c;
 8002fd2:	f89b 3000 	ldrb.w	r3, [fp]
 8002fd6:	4418      	add	r0, r3
 8002fd8:	f88b 0000 	strb.w	r0, [fp]
            state = BULK_ZRnBMCs;
 8002fdc:	271d      	movs	r7, #29
 8002fde:	e633      	b.n	8002c48 <CharacterInputThread+0x28>
          cs += c;
 8002fe0:	f89b 3000 	ldrb.w	r3, [fp]
 8002fe4:	4403      	add	r3, r0
 8002fe6:	f88b 3000 	strb.w	r3, [fp]
          cntdwn = 0;
 8002fea:	4b7e      	ldr	r3, [pc, #504]	; (80031e4 <CharacterInputThread+0x5c4>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	801a      	strh	r2, [r3, #0]
          if (c) count = (uint16_t)c;
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	f040 8155 	bne.w	80032a0 <CharacterInputThread+0x680>
          count = 256;
 8002ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ffa:	f8a9 3000 	strh.w	r3, [r9]
          state = WRITE_nM;
 8002ffe:	2711      	movs	r7, #17
 8003000:	e622      	b.n	8002c48 <CharacterInputThread+0x28>
        if (c == cs){                   // N S + CS
 8003002:	f89b 3000 	ldrb.w	r3, [fp]
 8003006:	4283      	cmp	r3, r0
 8003008:	f000 8440 	beq.w	800388c <CharacterInputThread+0xc6c>
          chprintf(dbg, "Checksum ERROR\r\n");
 800300c:	4977      	ldr	r1, [pc, #476]	; (80031ec <CharacterInputThread+0x5cc>)
 800300e:	4650      	mov	r0, sl
 8003010:	f7ff fbae 	bl	8002770 <chprintf>
        state = IDLE;
 8003014:	2700      	movs	r7, #0
 8003016:	e617      	b.n	8002c48 <CharacterInputThread+0x28>
          if (c == cs){
 8003018:	f89b 3000 	ldrb.w	r3, [fp]
 800301c:	4283      	cmp	r3, r0
 800301e:	f000 8476 	beq.w	800390e <CharacterInputThread+0xcee>
            chprintf(dbg, "Checksum ERROR\r\n");
 8003022:	4972      	ldr	r1, [pc, #456]	; (80031ec <CharacterInputThread+0x5cc>)
 8003024:	4650      	mov	r0, sl
 8003026:	f7ff fba3 	bl	8002770 <chprintf>
          state = IDLE;
 800302a:	2700      	movs	r7, #0
 800302c:	e60c      	b.n	8002c48 <CharacterInputThread+0x28>
        if (c == cs){                   // B E E + CS
 800302e:	f89b 3000 	ldrb.w	r3, [fp]
 8003032:	4283      	cmp	r3, r0
 8003034:	f040 813c 	bne.w	80032b0 <CharacterInputThread+0x690>
          streamPut(ost, bankemv);
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	4a6e      	ldr	r2, [pc, #440]	; (80031f4 <CharacterInputThread+0x5d4>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	7811      	ldrb	r1, [r2, #0]
 8003040:	4630      	mov	r0, r6
 8003042:	4798      	blx	r3
        state = IDLE;
 8003044:	2700      	movs	r7, #0
 8003046:	e5ff      	b.n	8002c48 <CharacterInputThread+0x28>
            cs += c;
 8003048:	f89b 3000 	ldrb.w	r3, [fp]
 800304c:	4403      	add	r3, r0
 800304e:	f88b 3000 	strb.w	r3, [fp]
            if (c) count = (uint16_t)c;
 8003052:	2800      	cmp	r0, #0
 8003054:	f040 811c 	bne.w	8003290 <CharacterInputThread+0x670>
            count = 256;
 8003058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800305c:	f8a9 3000 	strh.w	r3, [r9]
            state = BULK_ZRnB;
 8003060:	271b      	movs	r7, #27
 8003062:	e5f1      	b.n	8002c48 <CharacterInputThread+0x28>
        cs += c;
 8003064:	f89b 3000 	ldrb.w	r3, [fp]
 8003068:	4418      	add	r0, r3
 800306a:	f88b 0000 	strb.w	r0, [fp]
        state = BAUD_Sn;
 800306e:	270d      	movs	r7, #13
 8003070:	e5ea      	b.n	8002c48 <CharacterInputThread+0x28>
          if (c == cs){
 8003072:	f89b 3000 	ldrb.w	r3, [fp]
 8003076:	4283      	cmp	r3, r0
            chprintf(ost, "O");
 8003078:	bf0b      	itete	eq
 800307a:	495b      	ldreq	r1, [pc, #364]	; (80031e8 <CharacterInputThread+0x5c8>)
            chprintf(dbg, "Checksum ERROR\r\n");
 800307c:	495b      	ldrne	r1, [pc, #364]	; (80031ec <CharacterInputThread+0x5cc>)
            chprintf(ost, "O");
 800307e:	4630      	moveq	r0, r6
            chprintf(dbg, "Checksum ERROR\r\n");
 8003080:	4650      	movne	r0, sl
 8003082:	f7ff fb75 	bl	8002770 <chprintf>
          state = IDLE;
 8003086:	2700      	movs	r7, #0
 8003088:	e5de      	b.n	8002c48 <CharacterInputThread+0x28>
          tbuf[cntdwn++] = c;
 800308a:	4b56      	ldr	r3, [pc, #344]	; (80031e4 <CharacterInputThread+0x5c4>)
          cs += c;
 800308c:	f89b 2000 	ldrb.w	r2, [fp]
          tbuf[cntdwn++] = c;
 8003090:	881b      	ldrh	r3, [r3, #0]
          if (cntdwn == count){
 8003092:	f8b9 1000 	ldrh.w	r1, [r9]
          tbuf[cntdwn++] = c;
 8003096:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800309a:	f80c 0003 	strb.w	r0, [ip, r3]
          cs += c;
 800309e:	4410      	add	r0, r2
          tbuf[cntdwn++] = c;
 80030a0:	3301      	adds	r3, #1
 80030a2:	4a50      	ldr	r2, [pc, #320]	; (80031e4 <CharacterInputThread+0x5c4>)
          cs += c;
 80030a4:	f88b 0000 	strb.w	r0, [fp]
          tbuf[cntdwn++] = c;
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	8013      	strh	r3, [r2, #0]
            state = WRITE_nMLCs;
 80030ac:	4299      	cmp	r1, r3
 80030ae:	bf08      	it	eq
 80030b0:	2714      	moveq	r7, #20
 80030b2:	e5c9      	b.n	8002c48 <CharacterInputThread+0x28>
          cs += c;
 80030b4:	f89b 3000 	ldrb.w	r3, [fp]
 80030b8:	4418      	add	r0, r3
 80030ba:	f88b 0000 	strb.w	r0, [fp]
          state = WRITE_nMLB;
 80030be:	2713      	movs	r7, #19
 80030c0:	e5c2      	b.n	8002c48 <CharacterInputThread+0x28>
          cs += c;
 80030c2:	f89b 3000 	ldrb.w	r3, [fp]
 80030c6:	4418      	add	r0, r3
 80030c8:	f88b 0000 	strb.w	r0, [fp]
          state = WRITE_nML;
 80030cc:	2712      	movs	r7, #18
 80030ce:	e5bb      	b.n	8002c48 <CharacterInputThread+0x28>
          cs += c;
 80030d0:	f89b 3000 	ldrb.w	r3, [fp]
 80030d4:	4418      	add	r0, r3
 80030d6:	f88b 0000 	strb.w	r0, [fp]
          state = READ_nML;
 80030da:	2717      	movs	r7, #23
 80030dc:	e5b4      	b.n	8002c48 <CharacterInputThread+0x28>
          cs += c;
 80030de:	f89b 3000 	ldrb.w	r3, [fp]
 80030e2:	4403      	add	r3, r0
 80030e4:	f88b 3000 	strb.w	r3, [fp]
          if (c) count = (uint16_t)c;
 80030e8:	2800      	cmp	r0, #0
 80030ea:	f040 80dd 	bne.w	80032a8 <CharacterInputThread+0x688>
          count = 256;
 80030ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030f2:	f8a9 3000 	strh.w	r3, [r9]
          state = READ_nM;
 80030f6:	2716      	movs	r7, #22
 80030f8:	e5a6      	b.n	8002c48 <CharacterInputThread+0x28>
          cs += c;
 80030fa:	f89b 3000 	ldrb.w	r3, [fp]
 80030fe:	4418      	add	r0, r3
 8003100:	f88b 0000 	strb.w	r0, [fp]
          state = READ_nMLCs;
 8003104:	2718      	movs	r7, #24
 8003106:	e59f      	b.n	8002c48 <CharacterInputThread+0x28>
            cs += c;
 8003108:	f89b 3000 	ldrb.w	r3, [fp]
 800310c:	4418      	add	r0, r3
 800310e:	f88b 0000 	strb.w	r0, [fp]
            state = BULK_ZRnBM;
 8003112:	271c      	movs	r7, #28
 8003114:	e598      	b.n	8002c48 <CharacterInputThread+0x28>
            cs += c;
 8003116:	f89b 3000 	ldrb.w	r3, [fp]
 800311a:	2852      	cmp	r0, #82	; 0x52
 800311c:	4403      	add	r3, r0
 800311e:	f88b 3000 	strb.w	r3, [fp]
            switch (c){
 8003122:	f000 80ef 	beq.w	8003304 <CharacterInputThread+0x6e4>
 8003126:	2857      	cmp	r0, #87	; 0x57
 8003128:	bf14      	ite	ne
 800312a:	2700      	movne	r7, #0
 800312c:	271e      	moveq	r7, #30
 800312e:	e58b      	b.n	8002c48 <CharacterInputThread+0x28>
        if (c == cs){                   // B R R + CS
 8003130:	f89b 3000 	ldrb.w	r3, [fp]
 8003134:	4283      	cmp	r3, r0
 8003136:	f040 80d9 	bne.w	80032ec <CharacterInputThread+0x6cc>
          streamPut(ost, bankrw);
 800313a:	682b      	ldr	r3, [r5, #0]
 800313c:	4a2e      	ldr	r2, [pc, #184]	; (80031f8 <CharacterInputThread+0x5d8>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	7811      	ldrb	r1, [r2, #0]
 8003142:	4630      	mov	r0, r6
 8003144:	4798      	blx	r3
        state = IDLE;
 8003146:	2700      	movs	r7, #0
 8003148:	e57e      	b.n	8002c48 <CharacterInputThread+0x28>
        cs += c;
 800314a:	f89b 3000 	ldrb.w	r3, [fp]
          state = SERIAL_NS;
 800314e:	2853      	cmp	r0, #83	; 0x53
        cs += c;
 8003150:	4418      	add	r0, r3
          state = SERIAL_NS;
 8003152:	bf08      	it	eq
 8003154:	270f      	moveq	r7, #15
        cs += c;
 8003156:	f88b 0000 	strb.w	r0, [fp]
        if (c == 'S'){                   // N S
 800315a:	e575      	b.n	8002c48 <CharacterInputThread+0x28>
        cs += c;
 800315c:	f89b 3000 	ldrb.w	r3, [fp]
        temp = c;                     // Bank Number
 8003160:	4a26      	ldr	r2, [pc, #152]	; (80031fc <CharacterInputThread+0x5dc>)
 8003162:	7010      	strb	r0, [r2, #0]
        cs += c;
 8003164:	4418      	add	r0, r3
 8003166:	f88b 0000 	strb.w	r0, [fp]
        state = BANK_BSn;
 800316a:	270a      	movs	r7, #10
 800316c:	e56c      	b.n	8002c48 <CharacterInputThread+0x28>
        if (c == cs){                   // B E S + CS
 800316e:	f89b 3000 	ldrb.w	r3, [fp]
 8003172:	4283      	cmp	r3, r0
 8003174:	f040 80a8 	bne.w	80032c8 <CharacterInputThread+0x6a8>
          streamPut(ost, bankemp);
 8003178:	682b      	ldr	r3, [r5, #0]
 800317a:	4a21      	ldr	r2, [pc, #132]	; (8003200 <CharacterInputThread+0x5e0>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	7811      	ldrb	r1, [r2, #0]
 8003180:	4630      	mov	r0, r6
 8003182:	4798      	blx	r3
        state = IDLE;
 8003184:	2700      	movs	r7, #0
 8003186:	e55f      	b.n	8002c48 <CharacterInputThread+0x28>
        cs += c;
 8003188:	f89b 3000 	ldrb.w	r3, [fp]
        if ((c == 'E') || (c == 'R')){                   // B E E or B E R
 800318c:	2845      	cmp	r0, #69	; 0x45
        cs += c;
 800318e:	4403      	add	r3, r0
 8003190:	f88b 3000 	strb.w	r3, [fp]
        if ((c == 'E') || (c == 'R')){                   // B E E or B E R
 8003194:	f000 8374 	beq.w	8003880 <CharacterInputThread+0xc60>
 8003198:	2852      	cmp	r0, #82	; 0x52
 800319a:	f000 83f0 	beq.w	800397e <CharacterInputThread+0xd5e>
        else if (c == 'S'){                                       // B E S
 800319e:	2853      	cmp	r0, #83	; 0x53
 80031a0:	f000 83f9 	beq.w	8003996 <CharacterInputThread+0xd76>
          temp = c;                     // Bank Number
 80031a4:	4b15      	ldr	r3, [pc, #84]	; (80031fc <CharacterInputThread+0x5dc>)
          state = BANK_BEn;
 80031a6:	270b      	movs	r7, #11
          temp = c;                     // Bank Number
 80031a8:	7018      	strb	r0, [r3, #0]
 80031aa:	e54d      	b.n	8002c48 <CharacterInputThread+0x28>
        cs += c;
 80031ac:	f89b 3000 	ldrb.w	r3, [fp]
 80031b0:	2852      	cmp	r0, #82	; 0x52
 80031b2:	4403      	add	r3, r0
 80031b4:	f88b 3000 	strb.w	r3, [fp]
        switch (c){
 80031b8:	f000 83d7 	beq.w	800396a <CharacterInputThread+0xd4a>
 80031bc:	2853      	cmp	r0, #83	; 0x53
 80031be:	f000 835c 	beq.w	800387a <CharacterInputThread+0xc5a>
          state = BANK_BE;
 80031c2:	2845      	cmp	r0, #69	; 0x45
 80031c4:	bf14      	ite	ne
 80031c6:	2732      	movne	r7, #50	; 0x32
 80031c8:	2707      	moveq	r7, #7
 80031ca:	e53d      	b.n	8002c48 <CharacterInputThread+0x28>
        cs += c;
 80031cc:	f89b 3000 	ldrb.w	r3, [fp]
        if (c == 'R'){                   // B R R
 80031d0:	2852      	cmp	r0, #82	; 0x52
        cs += c;
 80031d2:	4403      	add	r3, r0
 80031d4:	f88b 3000 	strb.w	r3, [fp]
        if (c == 'R'){                   // B R R
 80031d8:	f000 8355 	beq.w	8003886 <CharacterInputThread+0xc66>
          btemp = c;                     // Bank Number
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <CharacterInputThread+0x5e4>)
          state = BANK_BRn;
 80031de:	2709      	movs	r7, #9
          btemp = c;                     // Bank Number
 80031e0:	7018      	strb	r0, [r3, #0]
 80031e2:	e531      	b.n	8002c48 <CharacterInputThread+0x28>
 80031e4:	20001550 	.word	0x20001550
 80031e8:	08005f4c 	.word	0x08005f4c
 80031ec:	08005f50 	.word	0x08005f50
 80031f0:	20009928 	.word	0x20009928
 80031f4:	200013ad 	.word	0x200013ad
 80031f8:	200013ae 	.word	0x200013ae
 80031fc:	2000185c 	.word	0x2000185c
 8003200:	200013ac 	.word	0x200013ac
 8003204:	200013af 	.word	0x200013af
        if (c == 'V'){
 8003208:	2856      	cmp	r0, #86	; 0x56
 800320a:	f000 83bb 	beq.w	8003984 <CharacterInputThread+0xd64>
        state = IDLE;
 800320e:	2700      	movs	r7, #0
 8003210:	e51a      	b.n	8002c48 <CharacterInputThread+0x28>
        if (c == cs){                   // B S + n + CS
 8003212:	f89b 3000 	ldrb.w	r3, [fp]
 8003216:	4283      	cmp	r3, r0
 8003218:	d162      	bne.n	80032e0 <CharacterInputThread+0x6c0>
          if (temp <= 8){
 800321a:	4bb4      	ldr	r3, [pc, #720]	; (80034ec <CharacterInputThread+0x8cc>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b08      	cmp	r3, #8
 8003220:	f200 83a6 	bhi.w	8003970 <CharacterInputThread+0xd50>
            bankemp = temp;
 8003224:	4ab2      	ldr	r2, [pc, #712]	; (80034f0 <CharacterInputThread+0x8d0>)
            chprintf(ost, "O");
 8003226:	49b3      	ldr	r1, [pc, #716]	; (80034f4 <CharacterInputThread+0x8d4>)
            bankemp = temp;
 8003228:	7013      	strb	r3, [r2, #0]
            chprintf(ost, "O");
 800322a:	4630      	mov	r0, r6
 800322c:	f7ff faa0 	bl	8002770 <chprintf>
        state = IDLE;
 8003230:	2700      	movs	r7, #0
 8003232:	e509      	b.n	8002c48 <CharacterInputThread+0x28>
        if (cs == c){
 8003234:	f89b 3000 	ldrb.w	r3, [fp]
 8003238:	4283      	cmp	r3, r0
          chprintf(ost, "O");
 800323a:	bf0b      	itete	eq
 800323c:	49ad      	ldreq	r1, [pc, #692]	; (80034f4 <CharacterInputThread+0x8d4>)
          chprintf(dbg, "Checksum ERROR\r\n");
 800323e:	49ae      	ldrne	r1, [pc, #696]	; (80034f8 <CharacterInputThread+0x8d8>)
          chprintf(ost, "O");
 8003240:	4630      	moveq	r0, r6
          chprintf(dbg, "Checksum ERROR\r\n");
 8003242:	4650      	movne	r0, sl
 8003244:	f7ff fa94 	bl	8002770 <chprintf>
        state = IDLE;
 8003248:	2700      	movs	r7, #0
 800324a:	e4fd      	b.n	8002c48 <CharacterInputThread+0x28>
        if (c == cs){                   // B E + n + CS
 800324c:	f89b 3000 	ldrb.w	r3, [fp]
 8003250:	4283      	cmp	r3, r0
 8003252:	d151      	bne.n	80032f8 <CharacterInputThread+0x6d8>
          if (temp <= 8){
 8003254:	4ba5      	ldr	r3, [pc, #660]	; (80034ec <CharacterInputThread+0x8cc>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	f200 837f 	bhi.w	800395c <CharacterInputThread+0xd3c>
            bankemv = temp;
 800325e:	4aa7      	ldr	r2, [pc, #668]	; (80034fc <CharacterInputThread+0x8dc>)
            chprintf(ost, "O");
 8003260:	49a4      	ldr	r1, [pc, #656]	; (80034f4 <CharacterInputThread+0x8d4>)
            bankemv = temp;
 8003262:	7013      	strb	r3, [r2, #0]
            chprintf(ost, "O");
 8003264:	4630      	mov	r0, r6
 8003266:	f7ff fa83 	bl	8002770 <chprintf>
        state = IDLE;
 800326a:	2700      	movs	r7, #0
 800326c:	e4ec      	b.n	8002c48 <CharacterInputThread+0x28>
        if (c == cs){                   // B R + n + CS
 800326e:	f89b 3000 	ldrb.w	r3, [fp]
 8003272:	4283      	cmp	r3, r0
 8003274:	d122      	bne.n	80032bc <CharacterInputThread+0x69c>
          if (btemp <= 8){
 8003276:	4ba2      	ldr	r3, [pc, #648]	; (8003500 <CharacterInputThread+0x8e0>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b08      	cmp	r3, #8
 800327c:	f200 8367 	bhi.w	800394e <CharacterInputThread+0xd2e>
            bankrw = btemp;
 8003280:	4aa0      	ldr	r2, [pc, #640]	; (8003504 <CharacterInputThread+0x8e4>)
            chprintf(ost, "O");
 8003282:	499c      	ldr	r1, [pc, #624]	; (80034f4 <CharacterInputThread+0x8d4>)
            bankrw = btemp;
 8003284:	7013      	strb	r3, [r2, #0]
            chprintf(ost, "O");
 8003286:	4630      	mov	r0, r6
 8003288:	f7ff fa72 	bl	8002770 <chprintf>
        state = IDLE;
 800328c:	2700      	movs	r7, #0
 800328e:	e4db      	b.n	8002c48 <CharacterInputThread+0x28>
            if (c) count = (uint16_t)c;
 8003290:	f8a9 0000 	strh.w	r0, [r9]
            state = BULK_ZRnB;
 8003294:	271b      	movs	r7, #27
 8003296:	e4d7      	b.n	8002c48 <CharacterInputThread+0x28>
            if (c) count = (uint16_t)c;
 8003298:	f8a9 0000 	strh.w	r0, [r9]
            state = BULK_ZWnB;
 800329c:	271f      	movs	r7, #31
 800329e:	e4d3      	b.n	8002c48 <CharacterInputThread+0x28>
          if (c) count = (uint16_t)c;
 80032a0:	f8a9 0000 	strh.w	r0, [r9]
          state = WRITE_nM;
 80032a4:	2711      	movs	r7, #17
 80032a6:	e4cf      	b.n	8002c48 <CharacterInputThread+0x28>
          if (c) count = (uint16_t)c;
 80032a8:	f8a9 0000 	strh.w	r0, [r9]
          state = READ_nM;
 80032ac:	2716      	movs	r7, #22
 80032ae:	e4cb      	b.n	8002c48 <CharacterInputThread+0x28>
          chprintf(dbg, "Checksum ERROR\r\n");
 80032b0:	4991      	ldr	r1, [pc, #580]	; (80034f8 <CharacterInputThread+0x8d8>)
 80032b2:	4650      	mov	r0, sl
 80032b4:	f7ff fa5c 	bl	8002770 <chprintf>
        state = IDLE;
 80032b8:	2700      	movs	r7, #0
 80032ba:	e4c5      	b.n	8002c48 <CharacterInputThread+0x28>
          chprintf(dbg, "Checksum ERROR\r\n");
 80032bc:	498e      	ldr	r1, [pc, #568]	; (80034f8 <CharacterInputThread+0x8d8>)
 80032be:	4650      	mov	r0, sl
 80032c0:	f7ff fa56 	bl	8002770 <chprintf>
        state = IDLE;
 80032c4:	2700      	movs	r7, #0
 80032c6:	e4bf      	b.n	8002c48 <CharacterInputThread+0x28>
          chprintf(dbg, "Checksum ERROR\r\n");
 80032c8:	498b      	ldr	r1, [pc, #556]	; (80034f8 <CharacterInputThread+0x8d8>)
 80032ca:	4650      	mov	r0, sl
 80032cc:	f7ff fa50 	bl	8002770 <chprintf>
        state = IDLE;
 80032d0:	2700      	movs	r7, #0
 80032d2:	e4b9      	b.n	8002c48 <CharacterInputThread+0x28>
          chprintf(dbg, "Checksum ERROR\r\n");
 80032d4:	4988      	ldr	r1, [pc, #544]	; (80034f8 <CharacterInputThread+0x8d8>)
 80032d6:	4650      	mov	r0, sl
 80032d8:	f7ff fa4a 	bl	8002770 <chprintf>
        state = IDLE;
 80032dc:	2700      	movs	r7, #0
 80032de:	e4b3      	b.n	8002c48 <CharacterInputThread+0x28>
          chprintf(dbg, "Checksum ERROR\r\n");
 80032e0:	4985      	ldr	r1, [pc, #532]	; (80034f8 <CharacterInputThread+0x8d8>)
 80032e2:	4650      	mov	r0, sl
 80032e4:	f7ff fa44 	bl	8002770 <chprintf>
        state = IDLE;
 80032e8:	2700      	movs	r7, #0
 80032ea:	e4ad      	b.n	8002c48 <CharacterInputThread+0x28>
          chprintf(dbg, "Checksum ERROR\r\n");
 80032ec:	4982      	ldr	r1, [pc, #520]	; (80034f8 <CharacterInputThread+0x8d8>)
 80032ee:	4650      	mov	r0, sl
 80032f0:	f7ff fa3e 	bl	8002770 <chprintf>
        state = IDLE;
 80032f4:	2700      	movs	r7, #0
 80032f6:	e4a7      	b.n	8002c48 <CharacterInputThread+0x28>
          chprintf(dbg, "Checksum ERROR\r\n");
 80032f8:	497f      	ldr	r1, [pc, #508]	; (80034f8 <CharacterInputThread+0x8d8>)
 80032fa:	4650      	mov	r0, sl
 80032fc:	f7ff fa38 	bl	8002770 <chprintf>
        state = IDLE;
 8003300:	2700      	movs	r7, #0
 8003302:	e4a1      	b.n	8002c48 <CharacterInputThread+0x28>
              state = BULK_ZRn;
 8003304:	271a      	movs	r7, #26
 8003306:	e49f      	b.n	8002c48 <CharacterInputThread+0x28>
            if (write_xsvf(count, tbuf)) chprintf(ost, "O");
 8003308:	f8b9 3000 	ldrh.w	r3, [r9]
	uint8_t temp, tlen;
	uint32_t temp32;
	static uint16_t sdr_bytes;
	// len is the total length of the xsvf file

	chprintf(dbg, "XSVF: Length: %d\r\n", len);
 800330c:	497e      	ldr	r1, [pc, #504]	; (8003508 <CharacterInputThread+0x8e8>)
 800330e:	461f      	mov	r7, r3
 8003310:	461a      	mov	r2, r3
 8003312:	4650      	mov	r0, sl
 8003314:	f7ff fa2c 	bl	8002770 <chprintf>
	while (i < len){
 8003318:	463b      	mov	r3, r7
 800331a:	2f00      	cmp	r7, #0
 800331c:	d03e      	beq.n	800339c <CharacterInputThread+0x77c>
	uint16_t i=0; // Counter variable
 800331e:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003322:	2700      	movs	r7, #0
		chprintf(dbg, "%02X ", buf[i]);
 8003324:	ab0a      	add	r3, sp, #40	; 0x28
 8003326:	4979      	ldr	r1, [pc, #484]	; (800350c <CharacterInputThread+0x8ec>)
 8003328:	f813 8007 	ldrb.w	r8, [r3, r7]
 800332c:	4650      	mov	r0, sl
 800332e:	4642      	mov	r2, r8
 8003330:	f7ff fa1e 	bl	8002770 <chprintf>
		switch (buf[i++]) {
 8003334:	1c7b      	adds	r3, r7, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	f1b8 0f12 	cmp.w	r8, #18
 800333c:	d868      	bhi.n	8003410 <CharacterInputThread+0x7f0>
 800333e:	e8df f018 	tbh	[pc, r8, lsl #1]
 8003342:	018b      	.short	0x018b
 8003344:	013e0173 	.word	0x013e0173
 8003348:	00fc010e 	.word	0x00fc010e
 800334c:	00670067 	.word	0x00670067
 8003350:	00bb00f5 	.word	0x00bb00f5
 8003354:	0221006e 	.word	0x0221006e
 8003358:	01ad0219 	.word	0x01ad0219
 800335c:	01fe0192 	.word	0x01fe0192
 8003360:	026301c8 	.word	0x026301c8
 8003364:	00130033 	.word	0x00130033
	*data = *buf;
 8003368:	aa0a      	add	r2, sp, #40	; 0x28
			fail();
			return 0;
			break;

		case XSTATE:
			read_byte(&inst, &(buf[i++]));
 800336a:	3702      	adds	r7, #2
	*data = *buf;
 800336c:	5cd0      	ldrb	r0, [r2, r3]
			read_byte(&inst, &(buf[i++]));
 800336e:	b2bf      	uxth	r7, r7
	if (state==STATE_TLR) {
 8003370:	2800      	cmp	r0, #0
 8003372:	f040 8313 	bne.w	800399c <CharacterInputThread+0xd7c>
			state_step(1);
 8003376:	2001      	movs	r0, #1
 8003378:	f7fd fb42 	bl	8000a00 <state_step>
 800337c:	2001      	movs	r0, #1
 800337e:	f7fd fb3f 	bl	8000a00 <state_step>
 8003382:	2001      	movs	r0, #1
 8003384:	f7fd fb3c 	bl	8000a00 <state_step>
 8003388:	2001      	movs	r0, #1
 800338a:	f7fd fb39 	bl	8000a00 <state_step>
 800338e:	2001      	movs	r0, #1
 8003390:	f7fd fb36 	bl	8000a00 <state_step>
	while (i < len){
 8003394:	9b03      	ldr	r3, [sp, #12]
 8003396:	42bb      	cmp	r3, r7
 8003398:	d8c4      	bhi.n	8003324 <CharacterInputThread+0x704>
 800339a:	9c04      	ldr	r4, [sp, #16]
 800339c:	4955      	ldr	r1, [pc, #340]	; (80034f4 <CharacterInputThread+0x8d4>)
 800339e:	4630      	mov	r0, r6
 80033a0:	f7ff f9e6 	bl	8002770 <chprintf>
          state = IDLE;
 80033a4:	2700      	movs	r7, #0
 80033a6:	e44f      	b.n	8002c48 <CharacterInputThread+0x28>
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 80033a8:	4a59      	ldr	r2, [pc, #356]	; (8003510 <CharacterInputThread+0x8f0>)
 80033aa:	8811      	ldrh	r1, [r2, #0]
 80033ac:	aa0a      	add	r2, sp, #40	; 0x28
 80033ae:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 80033b0:	2900      	cmp	r1, #0
 80033b2:	f000 82f9 	beq.w	80039a8 <CharacterInputThread+0xd88>
 80033b6:	9c03      	ldr	r4, [sp, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	469c      	mov	ip, r3
		data[i] = *(buf++);
 80033bc:	4b55      	ldr	r3, [pc, #340]	; (8003514 <CharacterInputThread+0x8f4>)
 80033be:	f810 7b01 	ldrb.w	r7, [r0], #1
 80033c2:	549f      	strb	r7, [r3, r2]
	for (i=0; i < len; i++){
 80033c4:	3201      	adds	r2, #1
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	4291      	cmp	r1, r2
 80033ca:	dcf7      	bgt.n	80033bc <CharacterInputThread+0x79c>
	return len;
 80033cc:	4663      	mov	r3, ip
 80033ce:	b2cf      	uxtb	r7, r1
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 80033d0:	443b      	add	r3, r7
 80033d2:	b29b      	uxth	r3, r3
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 80033d4:	aa0a      	add	r2, sp, #40	; 0x28
 80033d6:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 80033d8:	9403      	str	r4, [sp, #12]
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 80033da:	2200      	movs	r2, #0
 80033dc:	469e      	mov	lr, r3
		data[i] = *(buf++);
 80033de:	4b4e      	ldr	r3, [pc, #312]	; (8003518 <CharacterInputThread+0x8f8>)
 80033e0:	f810 cb01 	ldrb.w	ip, [r0], #1
 80033e4:	f803 c002 	strb.w	ip, [r3, r2]
	for (i=0; i < len; i++){
 80033e8:	3201      	adds	r2, #1
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	4291      	cmp	r1, r2
 80033ee:	dcf6      	bgt.n	80033de <CharacterInputThread+0x7be>
 80033f0:	9403      	str	r4, [sp, #12]
 80033f2:	4673      	mov	r3, lr
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 80033f4:	443b      	add	r3, r7
			if (sdr(SDR_END|SDR_CHECK)) {
 80033f6:	2012      	movs	r0, #18
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 80033f8:	b29f      	uxth	r7, r3
			if (sdr(SDR_END|SDR_CHECK)) {
 80033fa:	f7fd fb61 	bl	8000ac0 <sdr>
 80033fe:	2800      	cmp	r0, #0
 8003400:	d0c8      	beq.n	8003394 <CharacterInputThread+0x774>
		chprintf(dbg, "---------FAIL!\r\n");
 8003402:	4946      	ldr	r1, [pc, #280]	; (800351c <CharacterInputThread+0x8fc>)
 8003404:	9c04      	ldr	r4, [sp, #16]
 8003406:	4650      	mov	r0, sl
 8003408:	f7ff f9b2 	bl	8002770 <chprintf>
 800340c:	2700      	movs	r7, #0
 800340e:	e41b      	b.n	8002c48 <CharacterInputThread+0x28>
 8003410:	4942      	ldr	r1, [pc, #264]	; (800351c <CharacterInputThread+0x8fc>)
 8003412:	9c04      	ldr	r4, [sp, #16]
 8003414:	4650      	mov	r0, sl
 8003416:	f7ff f9ab 	bl	8002770 <chprintf>
 800341a:	2700      	movs	r7, #0
 800341c:	e414      	b.n	8002c48 <CharacterInputThread+0x28>
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 800341e:	4a3c      	ldr	r2, [pc, #240]	; (8003510 <CharacterInputThread+0x8f0>)
 8003420:	8811      	ldrh	r1, [r2, #0]
 8003422:	aa0a      	add	r2, sp, #40	; 0x28
 8003424:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 8003426:	2900      	cmp	r1, #0
 8003428:	f000 82c1 	beq.w	80039ae <CharacterInputThread+0xd8e>
 800342c:	9c03      	ldr	r4, [sp, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	469c      	mov	ip, r3
		data[i] = *(buf++);
 8003432:	4b38      	ldr	r3, [pc, #224]	; (8003514 <CharacterInputThread+0x8f4>)
 8003434:	f810 7b01 	ldrb.w	r7, [r0], #1
 8003438:	549f      	strb	r7, [r3, r2]
	for (i=0; i < len; i++){
 800343a:	3201      	adds	r2, #1
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	4291      	cmp	r1, r2
 8003440:	dcf7      	bgt.n	8003432 <CharacterInputThread+0x812>
	return len;
 8003442:	4663      	mov	r3, ip
 8003444:	fa5f fc81 	uxtb.w	ip, r1
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 8003448:	4463      	add	r3, ip
 800344a:	b29b      	uxth	r3, r3
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 800344c:	aa0a      	add	r2, sp, #40	; 0x28
 800344e:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 8003450:	9403      	str	r4, [sp, #12]
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 8003452:	2200      	movs	r2, #0
 8003454:	469e      	mov	lr, r3
		data[i] = *(buf++);
 8003456:	4b30      	ldr	r3, [pc, #192]	; (8003518 <CharacterInputThread+0x8f8>)
 8003458:	f810 7b01 	ldrb.w	r7, [r0], #1
 800345c:	549f      	strb	r7, [r3, r2]
	for (i=0; i < len; i++){
 800345e:	3201      	adds	r2, #1
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	4291      	cmp	r1, r2
 8003464:	dcf7      	bgt.n	8003456 <CharacterInputThread+0x836>
 8003466:	9403      	str	r4, [sp, #12]
 8003468:	4673      	mov	r3, lr
			chprintf(dbg, "Set TDIVAL to %02X %02X %02X %02X\r\n", tdi_value[0], tdi_value[1], tdi_value[2], tdi_value[3]);
 800346a:	482a      	ldr	r0, [pc, #168]	; (8003514 <CharacterInputThread+0x8f4>)
 800346c:	78c1      	ldrb	r1, [r0, #3]
 800346e:	7882      	ldrb	r2, [r0, #2]
 8003470:	9200      	str	r2, [sp, #0]
 8003472:	9101      	str	r1, [sp, #4]
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 8003474:	eb0c 0703 	add.w	r7, ip, r3
			chprintf(dbg, "Set TDIVAL to %02X %02X %02X %02X\r\n", tdi_value[0], tdi_value[1], tdi_value[2], tdi_value[3]);
 8003478:	7802      	ldrb	r2, [r0, #0]
 800347a:	7843      	ldrb	r3, [r0, #1]
 800347c:	4928      	ldr	r1, [pc, #160]	; (8003520 <CharacterInputThread+0x900>)
 800347e:	4650      	mov	r0, sl
 8003480:	f7ff f976 	bl	8002770 <chprintf>
			chprintf(dbg, "Set TDOEXP to %02X %02X %02X %02X\r\n", tdo_expected[0], tdo_expected[1], tdo_expected[2], tdo_expected[3]);
 8003484:	4924      	ldr	r1, [pc, #144]	; (8003518 <CharacterInputThread+0x8f8>)
 8003486:	78ca      	ldrb	r2, [r1, #3]
 8003488:	788b      	ldrb	r3, [r1, #2]
 800348a:	e9cd 3200 	strd	r3, r2, [sp]
 800348e:	4650      	mov	r0, sl
 8003490:	784b      	ldrb	r3, [r1, #1]
 8003492:	780a      	ldrb	r2, [r1, #0]
 8003494:	4923      	ldr	r1, [pc, #140]	; (8003524 <CharacterInputThread+0x904>)
 8003496:	f7ff f96b 	bl	8002770 <chprintf>
			if (sdr(SDR_FULL|SDR_CHECK)) {
 800349a:	2013      	movs	r0, #19
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 800349c:	b2bf      	uxth	r7, r7
			if (sdr(SDR_FULL|SDR_CHECK)) {
 800349e:	f7fd fb0f 	bl	8000ac0 <sdr>
 80034a2:	2800      	cmp	r0, #0
 80034a4:	f43f af76 	beq.w	8003394 <CharacterInputThread+0x774>
		chprintf(dbg, "---------FAIL!\r\n");
 80034a8:	491c      	ldr	r1, [pc, #112]	; (800351c <CharacterInputThread+0x8fc>)
 80034aa:	9c04      	ldr	r4, [sp, #16]
 80034ac:	4650      	mov	r0, sl
 80034ae:	f7ff f95f 	bl	8002770 <chprintf>
 80034b2:	2700      	movs	r7, #0
 80034b4:	f7ff bbc8 	b.w	8002c48 <CharacterInputThread+0x28>
			i += read_long(&temp32, &(buf[i]));
 80034b8:	aa0a      	add	r2, sp, #40	; 0x28
 80034ba:	18d1      	adds	r1, r2, r3
	uint32_t temp = *(buf++) * 16777216;
 80034bc:	f812 c003 	ldrb.w	ip, [r2, r3]
	temp += *(buf++) * 65536;
 80034c0:	784a      	ldrb	r2, [r1, #1]
	temp += *(buf++);
 80034c2:	78c8      	ldrb	r0, [r1, #3]
	temp += *(buf++) * 256;
 80034c4:	788b      	ldrb	r3, [r1, #2]
			sdr_bytes = (sdr_bytes+7)>>3;
 80034c6:	4c12      	ldr	r4, [pc, #72]	; (8003510 <CharacterInputThread+0x8f0>)
			chprintf(dbg, "Set XDRSIZE to %04X or %04X\r\n", temp32, sdr_bytes);
 80034c8:	4917      	ldr	r1, [pc, #92]	; (8003528 <CharacterInputThread+0x908>)
	temp += *(buf++) * 65536;
 80034ca:	0412      	lsls	r2, r2, #16
 80034cc:	eb02 620c 	add.w	r2, r2, ip, lsl #24
 80034d0:	4402      	add	r2, r0
	temp += *(buf++);
 80034d2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			sdr_bytes = (sdr_bytes+7)>>3;
 80034d6:	b293      	uxth	r3, r2
 80034d8:	3307      	adds	r3, #7
 80034da:	10db      	asrs	r3, r3, #3
			i += read_long(&temp32, &(buf[i]));
 80034dc:	3705      	adds	r7, #5
			chprintf(dbg, "Set XDRSIZE to %04X or %04X\r\n", temp32, sdr_bytes);
 80034de:	4650      	mov	r0, sl
			i += read_long(&temp32, &(buf[i]));
 80034e0:	b2bf      	uxth	r7, r7
			sdr_bytes = (sdr_bytes+7)>>3;
 80034e2:	8023      	strh	r3, [r4, #0]
			chprintf(dbg, "Set XDRSIZE to %04X or %04X\r\n", temp32, sdr_bytes);
 80034e4:	f7ff f944 	bl	8002770 <chprintf>
			break;
 80034e8:	e754      	b.n	8003394 <CharacterInputThread+0x774>
 80034ea:	bf00      	nop
 80034ec:	2000185c 	.word	0x2000185c
 80034f0:	200013ac 	.word	0x200013ac
 80034f4:	08005f4c 	.word	0x08005f4c
 80034f8:	08005f50 	.word	0x08005f50
 80034fc:	200013ad 	.word	0x200013ad
 8003500:	200013af 	.word	0x200013af
 8003504:	200013ae 	.word	0x200013ae
 8003508:	08005e8c 	.word	0x08005e8c
 800350c:	08005ea0 	.word	0x08005ea0
 8003510:	200017f4 	.word	0x200017f4
 8003514:	200017fc 	.word	0x200017fc
 8003518:	2000181c 	.word	0x2000181c
 800351c:	08005ef4 	.word	0x08005ef4
 8003520:	08005ed0 	.word	0x08005ed0
 8003524:	08005f28 	.word	0x08005f28
 8003528:	08005f08 	.word	0x08005f08
	*data = *buf;
 800352c:	aa0a      	add	r2, sp, #40	; 0x28
			read_byte(&repeat, &(buf[i++]));
 800352e:	3702      	adds	r7, #2
	*data = *buf;
 8003530:	5cd3      	ldrb	r3, [r2, r3]
 8003532:	4aa9      	ldr	r2, [pc, #676]	; (80037d8 <CharacterInputThread+0xbb8>)
			read_byte(&repeat, &(buf[i++]));
 8003534:	b2bf      	uxth	r7, r7
	*data = *buf;
 8003536:	7013      	strb	r3, [r2, #0]
 8003538:	e72c      	b.n	8003394 <CharacterInputThread+0x774>
			i += read_long(&run_test, &(buf[i]));
 800353a:	aa0a      	add	r2, sp, #40	; 0x28
 800353c:	441a      	add	r2, r3
	uint32_t temp = *(buf++) * 16777216;
 800353e:	a90a      	add	r1, sp, #40	; 0x28
			i += read_long(&run_test, &(buf[i]));
 8003540:	3705      	adds	r7, #5
	uint32_t temp = *(buf++) * 16777216;
 8003542:	5cc8      	ldrb	r0, [r1, r3]
	temp += *(buf++) * 65536;
 8003544:	7853      	ldrb	r3, [r2, #1]
	temp += *(buf++);
 8003546:	78d1      	ldrb	r1, [r2, #3]
	temp += *(buf++) * 256;
 8003548:	7892      	ldrb	r2, [r2, #2]
	temp += *(buf++) * 65536;
 800354a:	041b      	lsls	r3, r3, #16
 800354c:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8003550:	440b      	add	r3, r1
	temp += *(buf++);
 8003552:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	*data = temp;
 8003556:	4aa1      	ldr	r2, [pc, #644]	; (80037dc <CharacterInputThread+0xbbc>)
			i += read_long(&run_test, &(buf[i]));
 8003558:	b2bf      	uxth	r7, r7
	*data = temp;
 800355a:	6013      	str	r3, [r2, #0]
			break;
 800355c:	e71a      	b.n	8003394 <CharacterInputThread+0x774>
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 800355e:	4aa0      	ldr	r2, [pc, #640]	; (80037e0 <CharacterInputThread+0xbc0>)
 8003560:	8817      	ldrh	r7, [r2, #0]
 8003562:	aa0a      	add	r2, sp, #40	; 0x28
 8003564:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 8003566:	b17f      	cbz	r7, 8003588 <CharacterInputThread+0x968>
 8003568:	9c03      	ldr	r4, [sp, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	469e      	mov	lr, r3
		data[i] = *(buf++);
 800356e:	4b9d      	ldr	r3, [pc, #628]	; (80037e4 <CharacterInputThread+0xbc4>)
 8003570:	f810 cb01 	ldrb.w	ip, [r0], #1
 8003574:	f803 c002 	strb.w	ip, [r3, r2]
	for (i=0; i < len; i++){
 8003578:	1c51      	adds	r1, r2, #1
 800357a:	fa5f fc81 	uxtb.w	ip, r1
 800357e:	4567      	cmp	r7, ip
 8003580:	4662      	mov	r2, ip
 8003582:	d8f4      	bhi.n	800356e <CharacterInputThread+0x94e>
 8003584:	9403      	str	r4, [sp, #12]
 8003586:	4673      	mov	r3, lr
			chprintf(dbg, "Set TDIVAL to %02X %02X %02X %02X\r\n", tdi_value[0], tdi_value[1], tdi_value[2], tdi_value[3]);
 8003588:	4896      	ldr	r0, [pc, #600]	; (80037e4 <CharacterInputThread+0xbc4>)
 800358a:	78c1      	ldrb	r1, [r0, #3]
 800358c:	7882      	ldrb	r2, [r0, #2]
 800358e:	9200      	str	r2, [sp, #0]
 8003590:	9101      	str	r1, [sp, #4]
 8003592:	7802      	ldrb	r2, [r0, #0]
 8003594:	4994      	ldr	r1, [pc, #592]	; (80037e8 <CharacterInputThread+0xbc8>)
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 8003596:	441f      	add	r7, r3
			chprintf(dbg, "Set TDIVAL to %02X %02X %02X %02X\r\n", tdi_value[0], tdi_value[1], tdi_value[2], tdi_value[3]);
 8003598:	7843      	ldrb	r3, [r0, #1]
 800359a:	4650      	mov	r0, sl
 800359c:	f7ff f8e8 	bl	8002770 <chprintf>
			if (sdr(SDR_FULL|SDR_CHECK)) {
 80035a0:	2013      	movs	r0, #19
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 80035a2:	b2bf      	uxth	r7, r7
			if (sdr(SDR_FULL|SDR_CHECK)) {
 80035a4:	f7fd fa8c 	bl	8000ac0 <sdr>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	f43f aef3 	beq.w	8003394 <CharacterInputThread+0x774>
		chprintf(dbg, "---------FAIL!\r\n");
 80035ae:	498f      	ldr	r1, [pc, #572]	; (80037ec <CharacterInputThread+0xbcc>)
 80035b0:	9c04      	ldr	r4, [sp, #16]
 80035b2:	4650      	mov	r0, sl
 80035b4:	f7ff f8dc 	bl	8002770 <chprintf>
 80035b8:	2700      	movs	r7, #0
 80035ba:	f7ff bb45 	b.w	8002c48 <CharacterInputThread+0x28>
	*data = *buf;
 80035be:	aa0a      	add	r2, sp, #40	; 0x28
			chprintf(dbg, "XSIR Read %d Bytes\r\n", tlen);
 80035c0:	498b      	ldr	r1, [pc, #556]	; (80037f0 <CharacterInputThread+0xbd0>)
	*data = *buf;
 80035c2:	f812 8003 	ldrb.w	r8, [r2, r3]
			chprintf(dbg, "XSIR Read %d Bytes\r\n", tlen);
 80035c6:	4650      	mov	r0, sl
			tlen = (temp>>3);
 80035c8:	ea4f 02d8 	mov.w	r2, r8, lsr #3
			chprintf(dbg, "XSIR Read %d Bytes\r\n", tlen);
 80035cc:	9205      	str	r2, [sp, #20]
			read_byte(&temp, &(buf[i++]));
 80035ce:	3702      	adds	r7, #2
			chprintf(dbg, "XSIR Read %d Bytes\r\n", tlen);
 80035d0:	f7ff f8ce 	bl	8002770 <chprintf>
	for (i=0; i < len; i++){
 80035d4:	9a05      	ldr	r2, [sp, #20]
			read_byte(&temp, &(buf[i++]));
 80035d6:	b2bf      	uxth	r7, r7
			i += read_bytes(tdi_value, &(buf[i]), tlen);
 80035d8:	ab0a      	add	r3, sp, #40	; 0x28
 80035da:	19d8      	adds	r0, r3, r7
	for (i=0; i < len; i++){
 80035dc:	b15a      	cbz	r2, 80035f6 <CharacterInputThread+0x9d6>
 80035de:	4981      	ldr	r1, [pc, #516]	; (80037e4 <CharacterInputThread+0xbc4>)
 80035e0:	9c03      	ldr	r4, [sp, #12]
 80035e2:	2300      	movs	r3, #0
 80035e4:	3301      	adds	r3, #1
 80035e6:	b2db      	uxtb	r3, r3
		data[i] = *(buf++);
 80035e8:	f810 cb01 	ldrb.w	ip, [r0], #1
 80035ec:	f801 cb01 	strb.w	ip, [r1], #1
	for (i=0; i < len; i++){
 80035f0:	429a      	cmp	r2, r3
 80035f2:	dcf7      	bgt.n	80035e4 <CharacterInputThread+0x9c4>
 80035f4:	9403      	str	r4, [sp, #12]
			chprintf(dbg, "Set TDIVAL to %02X %02X %02X %02X\r\n", tdi_value[0], tdi_value[1], tdi_value[2], tdi_value[3]);
 80035f6:	487b      	ldr	r0, [pc, #492]	; (80037e4 <CharacterInputThread+0xbc4>)
 80035f8:	78c1      	ldrb	r1, [r0, #3]
 80035fa:	7883      	ldrb	r3, [r0, #2]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	9101      	str	r1, [sp, #4]
 8003600:	7843      	ldrb	r3, [r0, #1]
 8003602:	4979      	ldr	r1, [pc, #484]	; (80037e8 <CharacterInputThread+0xbc8>)
			i += read_bytes(tdi_value, &(buf[i]), tlen);
 8003604:	4417      	add	r7, r2
			chprintf(dbg, "Set TDIVAL to %02X %02X %02X %02X\r\n", tdi_value[0], tdi_value[1], tdi_value[2], tdi_value[3]);
 8003606:	7802      	ldrb	r2, [r0, #0]
 8003608:	4650      	mov	r0, sl
 800360a:	f7ff f8b1 	bl	8002770 <chprintf>
 800360e:	200b      	movs	r0, #11
 8003610:	f7fd fa26 	bl	8000a60 <state_goto.part.0>
			shift(SDR_END, tdi_value, 0, temp);
 8003614:	4642      	mov	r2, r8
 8003616:	2100      	movs	r1, #0
 8003618:	2002      	movs	r0, #2
 800361a:	f7fd f981 	bl	8000920 <shift.constprop.0>
 800361e:	2001      	movs	r0, #1
			i += read_bytes(tdi_value, &(buf[i]), tlen);
 8003620:	b2bf      	uxth	r7, r7
	if (state==STATE_TLR) {
 8003622:	f7fd fa1d 	bl	8000a60 <state_goto.part.0>
 8003626:	e6b5      	b.n	8003394 <CharacterInputThread+0x774>
			i += read_bytes(tdo_mask, &(buf[i]), sdr_bytes);
 8003628:	4a6d      	ldr	r2, [pc, #436]	; (80037e0 <CharacterInputThread+0xbc0>)
 800362a:	8817      	ldrh	r7, [r2, #0]
 800362c:	aa0a      	add	r2, sp, #40	; 0x28
 800362e:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 8003630:	b17f      	cbz	r7, 8003652 <CharacterInputThread+0xa32>
 8003632:	9c03      	ldr	r4, [sp, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	469e      	mov	lr, r3
		data[i] = *(buf++);
 8003638:	4b6e      	ldr	r3, [pc, #440]	; (80037f4 <CharacterInputThread+0xbd4>)
 800363a:	f810 cb01 	ldrb.w	ip, [r0], #1
 800363e:	f803 c002 	strb.w	ip, [r3, r2]
	for (i=0; i < len; i++){
 8003642:	1c51      	adds	r1, r2, #1
 8003644:	fa5f fc81 	uxtb.w	ip, r1
 8003648:	4567      	cmp	r7, ip
 800364a:	4662      	mov	r2, ip
 800364c:	d8f4      	bhi.n	8003638 <CharacterInputThread+0xa18>
 800364e:	9403      	str	r4, [sp, #12]
 8003650:	4673      	mov	r3, lr
			i += read_bytes(tdo_mask, &(buf[i]), sdr_bytes);
 8003652:	441f      	add	r7, r3
 8003654:	b2bf      	uxth	r7, r7
			break;
 8003656:	e69d      	b.n	8003394 <CharacterInputThread+0x774>
			chprintf(dbg, "Complete. %d\r\n", i);
 8003658:	4967      	ldr	r1, [pc, #412]	; (80037f8 <CharacterInputThread+0xbd8>)
 800365a:	461a      	mov	r2, r3
 800365c:	4650      	mov	r0, sl
		switch (buf[i++]) {
 800365e:	461f      	mov	r7, r3
			chprintf(dbg, "Complete. %d\r\n", i);
 8003660:	f7ff f886 	bl	8002770 <chprintf>
			break;
 8003664:	e696      	b.n	8003394 <CharacterInputThread+0x774>
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 8003666:	4a5e      	ldr	r2, [pc, #376]	; (80037e0 <CharacterInputThread+0xbc0>)
 8003668:	8817      	ldrh	r7, [r2, #0]
 800366a:	aa0a      	add	r2, sp, #40	; 0x28
 800366c:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 800366e:	b17f      	cbz	r7, 8003690 <CharacterInputThread+0xa70>
 8003670:	9c03      	ldr	r4, [sp, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	469e      	mov	lr, r3
		data[i] = *(buf++);
 8003676:	4b5b      	ldr	r3, [pc, #364]	; (80037e4 <CharacterInputThread+0xbc4>)
 8003678:	f810 cb01 	ldrb.w	ip, [r0], #1
 800367c:	f803 c002 	strb.w	ip, [r3, r2]
	for (i=0; i < len; i++){
 8003680:	1c51      	adds	r1, r2, #1
 8003682:	fa5f fc81 	uxtb.w	ip, r1
 8003686:	4567      	cmp	r7, ip
 8003688:	4662      	mov	r2, ip
 800368a:	d8f4      	bhi.n	8003676 <CharacterInputThread+0xa56>
 800368c:	9403      	str	r4, [sp, #12]
 800368e:	4673      	mov	r3, lr
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 8003690:	441f      	add	r7, r3
			sdr(SDR_CONTINUE|SDR_NOCHECK);
 8003692:	2000      	movs	r0, #0
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 8003694:	b2bf      	uxth	r7, r7
			sdr(SDR_CONTINUE|SDR_NOCHECK);
 8003696:	f7fd fa13 	bl	8000ac0 <sdr>
			break;
 800369a:	e67b      	b.n	8003394 <CharacterInputThread+0x774>
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 800369c:	4a50      	ldr	r2, [pc, #320]	; (80037e0 <CharacterInputThread+0xbc0>)
 800369e:	8817      	ldrh	r7, [r2, #0]
 80036a0:	aa0a      	add	r2, sp, #40	; 0x28
 80036a2:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 80036a4:	b17f      	cbz	r7, 80036c6 <CharacterInputThread+0xaa6>
 80036a6:	9c03      	ldr	r4, [sp, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	469e      	mov	lr, r3
		data[i] = *(buf++);
 80036ac:	4b4d      	ldr	r3, [pc, #308]	; (80037e4 <CharacterInputThread+0xbc4>)
 80036ae:	f810 cb01 	ldrb.w	ip, [r0], #1
 80036b2:	f803 c002 	strb.w	ip, [r3, r2]
	for (i=0; i < len; i++){
 80036b6:	1c51      	adds	r1, r2, #1
 80036b8:	fa5f fc81 	uxtb.w	ip, r1
 80036bc:	4567      	cmp	r7, ip
 80036be:	4662      	mov	r2, ip
 80036c0:	d8f4      	bhi.n	80036ac <CharacterInputThread+0xa8c>
 80036c2:	9403      	str	r4, [sp, #12]
 80036c4:	4673      	mov	r3, lr
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 80036c6:	441f      	add	r7, r3
			sdr(SDR_BEGIN|SDR_NOCHECK);
 80036c8:	2001      	movs	r0, #1
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 80036ca:	b2bf      	uxth	r7, r7
			sdr(SDR_BEGIN|SDR_NOCHECK);
 80036cc:	f7fd f9f8 	bl	8000ac0 <sdr>
			break;
 80036d0:	e660      	b.n	8003394 <CharacterInputThread+0x774>
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 80036d2:	4a43      	ldr	r2, [pc, #268]	; (80037e0 <CharacterInputThread+0xbc0>)
 80036d4:	8811      	ldrh	r1, [r2, #0]
 80036d6:	aa0a      	add	r2, sp, #40	; 0x28
 80036d8:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 80036da:	2900      	cmp	r1, #0
 80036dc:	f000 816a 	beq.w	80039b4 <CharacterInputThread+0xd94>
 80036e0:	9c03      	ldr	r4, [sp, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	469c      	mov	ip, r3
		data[i] = *(buf++);
 80036e6:	4b3f      	ldr	r3, [pc, #252]	; (80037e4 <CharacterInputThread+0xbc4>)
 80036e8:	f810 7b01 	ldrb.w	r7, [r0], #1
 80036ec:	549f      	strb	r7, [r3, r2]
	for (i=0; i < len; i++){
 80036ee:	3201      	adds	r2, #1
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	4291      	cmp	r1, r2
 80036f4:	dcf7      	bgt.n	80036e6 <CharacterInputThread+0xac6>
	return len;
 80036f6:	4663      	mov	r3, ip
 80036f8:	fa5f fc81 	uxtb.w	ip, r1
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 80036fc:	4463      	add	r3, ip
 80036fe:	b29b      	uxth	r3, r3
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 8003700:	aa0a      	add	r2, sp, #40	; 0x28
 8003702:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 8003704:	9403      	str	r4, [sp, #12]
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 8003706:	2200      	movs	r2, #0
 8003708:	469e      	mov	lr, r3
		data[i] = *(buf++);
 800370a:	4b3c      	ldr	r3, [pc, #240]	; (80037fc <CharacterInputThread+0xbdc>)
 800370c:	f810 7b01 	ldrb.w	r7, [r0], #1
 8003710:	549f      	strb	r7, [r3, r2]
	for (i=0; i < len; i++){
 8003712:	3201      	adds	r2, #1
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	4291      	cmp	r1, r2
 8003718:	dcf7      	bgt.n	800370a <CharacterInputThread+0xaea>
 800371a:	9403      	str	r4, [sp, #12]
 800371c:	4673      	mov	r3, lr
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 800371e:	4463      	add	r3, ip
			if (sdr(SDR_BEGIN|SDR_CHECK)) {
 8003720:	2011      	movs	r0, #17
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 8003722:	b29f      	uxth	r7, r3
			if (sdr(SDR_BEGIN|SDR_CHECK)) {
 8003724:	f7fd f9cc 	bl	8000ac0 <sdr>
 8003728:	2800      	cmp	r0, #0
 800372a:	f43f ae33 	beq.w	8003394 <CharacterInputThread+0x774>
		chprintf(dbg, "---------FAIL!\r\n");
 800372e:	492f      	ldr	r1, [pc, #188]	; (80037ec <CharacterInputThread+0xbcc>)
 8003730:	9c04      	ldr	r4, [sp, #16]
 8003732:	4650      	mov	r0, sl
 8003734:	f7ff f81c 	bl	8002770 <chprintf>
 8003738:	2700      	movs	r7, #0
 800373a:	f7ff ba85 	b.w	8002c48 <CharacterInputThread+0x28>
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 800373e:	4a28      	ldr	r2, [pc, #160]	; (80037e0 <CharacterInputThread+0xbc0>)
 8003740:	8817      	ldrh	r7, [r2, #0]
 8003742:	aa0a      	add	r2, sp, #40	; 0x28
 8003744:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 8003746:	b17f      	cbz	r7, 8003768 <CharacterInputThread+0xb48>
 8003748:	9c03      	ldr	r4, [sp, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	469e      	mov	lr, r3
		data[i] = *(buf++);
 800374e:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <CharacterInputThread+0xbc4>)
 8003750:	f810 cb01 	ldrb.w	ip, [r0], #1
 8003754:	f803 c002 	strb.w	ip, [r3, r2]
	for (i=0; i < len; i++){
 8003758:	1c51      	adds	r1, r2, #1
 800375a:	fa5f fc81 	uxtb.w	ip, r1
 800375e:	4567      	cmp	r7, ip
 8003760:	4662      	mov	r2, ip
 8003762:	d8f4      	bhi.n	800374e <CharacterInputThread+0xb2e>
 8003764:	9403      	str	r4, [sp, #12]
 8003766:	4673      	mov	r3, lr
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 8003768:	441f      	add	r7, r3
			sdr(SDR_END|SDR_NOCHECK);
 800376a:	2002      	movs	r0, #2
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 800376c:	b2bf      	uxth	r7, r7
			sdr(SDR_END|SDR_NOCHECK);
 800376e:	f7fd f9a7 	bl	8000ac0 <sdr>
			break;
 8003772:	e60f      	b.n	8003394 <CharacterInputThread+0x774>
		chprintf(dbg, "---------FAIL!\r\n");
 8003774:	491d      	ldr	r1, [pc, #116]	; (80037ec <CharacterInputThread+0xbcc>)
 8003776:	9c04      	ldr	r4, [sp, #16]
 8003778:	4650      	mov	r0, sl
 800377a:	f7fe fff9 	bl	8002770 <chprintf>
 800377e:	2700      	movs	r7, #0
 8003780:	f7ff ba62 	b.w	8002c48 <CharacterInputThread+0x28>
			i += read_bytes(address_mask, &(buf[i]), sdr_bytes);
 8003784:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <CharacterInputThread+0xbc0>)
 8003786:	8811      	ldrh	r1, [r2, #0]
 8003788:	aa0a      	add	r2, sp, #40	; 0x28
 800378a:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 800378c:	2900      	cmp	r1, #0
 800378e:	f000 8114 	beq.w	80039ba <CharacterInputThread+0xd9a>
 8003792:	9c03      	ldr	r4, [sp, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	469c      	mov	ip, r3
		data[i] = *(buf++);
 8003798:	4b19      	ldr	r3, [pc, #100]	; (8003800 <CharacterInputThread+0xbe0>)
 800379a:	f810 7b01 	ldrb.w	r7, [r0], #1
 800379e:	549f      	strb	r7, [r3, r2]
	for (i=0; i < len; i++){
 80037a0:	3201      	adds	r2, #1
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	4291      	cmp	r1, r2
 80037a6:	dcf7      	bgt.n	8003798 <CharacterInputThread+0xb78>
	return len;
 80037a8:	4663      	mov	r3, ip
 80037aa:	fa5f fc81 	uxtb.w	ip, r1
			i += read_bytes(address_mask, &(buf[i]), sdr_bytes);
 80037ae:	4463      	add	r3, ip
 80037b0:	b29b      	uxth	r3, r3
			i += read_bytes(data_mask, &(buf[i]), sdr_bytes);
 80037b2:	aa0a      	add	r2, sp, #40	; 0x28
 80037b4:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 80037b6:	9403      	str	r4, [sp, #12]
			i += read_bytes(data_mask, &(buf[i]), sdr_bytes);
 80037b8:	2200      	movs	r2, #0
 80037ba:	469e      	mov	lr, r3
		data[i] = *(buf++);
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <CharacterInputThread+0xbe4>)
 80037be:	f810 7b01 	ldrb.w	r7, [r0], #1
 80037c2:	549f      	strb	r7, [r3, r2]
	for (i=0; i < len; i++){
 80037c4:	3201      	adds	r2, #1
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	4291      	cmp	r1, r2
 80037ca:	dcf7      	bgt.n	80037bc <CharacterInputThread+0xb9c>
 80037cc:	9403      	str	r4, [sp, #12]
 80037ce:	4673      	mov	r3, lr
			i += read_bytes(data_mask, &(buf[i]), sdr_bytes);
 80037d0:	4463      	add	r3, ip
 80037d2:	b29f      	uxth	r7, r3
			break;
 80037d4:	e5de      	b.n	8003394 <CharacterInputThread+0x774>
 80037d6:	bf00      	nop
 80037d8:	200017ec 	.word	0x200017ec
 80037dc:	200017f0 	.word	0x200017f0
 80037e0:	200017f4 	.word	0x200017f4
 80037e4:	200017fc 	.word	0x200017fc
 80037e8:	08005ed0 	.word	0x08005ed0
 80037ec:	08005ef4 	.word	0x08005ef4
 80037f0:	08005eb8 	.word	0x08005eb8
 80037f4:	2000183c 	.word	0x2000183c
 80037f8:	08005ea8 	.word	0x08005ea8
 80037fc:	2000181c 	.word	0x2000181c
 8003800:	2000138c 	.word	0x2000138c
 8003804:	20001568 	.word	0x20001568
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 8003808:	4a6d      	ldr	r2, [pc, #436]	; (80039c0 <CharacterInputThread+0xda0>)
 800380a:	8811      	ldrh	r1, [r2, #0]
 800380c:	aa0a      	add	r2, sp, #40	; 0x28
 800380e:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 8003810:	2900      	cmp	r1, #0
 8003812:	f000 80c6 	beq.w	80039a2 <CharacterInputThread+0xd82>
 8003816:	9c03      	ldr	r4, [sp, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	469c      	mov	ip, r3
		data[i] = *(buf++);
 800381c:	4b69      	ldr	r3, [pc, #420]	; (80039c4 <CharacterInputThread+0xda4>)
 800381e:	f810 7b01 	ldrb.w	r7, [r0], #1
 8003822:	549f      	strb	r7, [r3, r2]
	for (i=0; i < len; i++){
 8003824:	3201      	adds	r2, #1
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	4291      	cmp	r1, r2
 800382a:	dcf7      	bgt.n	800381c <CharacterInputThread+0xbfc>
	return len;
 800382c:	4663      	mov	r3, ip
 800382e:	fa5f fc81 	uxtb.w	ip, r1
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 8003832:	4463      	add	r3, ip
 8003834:	b29b      	uxth	r3, r3
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 8003836:	aa0a      	add	r2, sp, #40	; 0x28
 8003838:	18d0      	adds	r0, r2, r3
	for (i=0; i < len; i++){
 800383a:	9403      	str	r4, [sp, #12]
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 800383c:	2200      	movs	r2, #0
 800383e:	469e      	mov	lr, r3
		data[i] = *(buf++);
 8003840:	4b61      	ldr	r3, [pc, #388]	; (80039c8 <CharacterInputThread+0xda8>)
 8003842:	f810 7b01 	ldrb.w	r7, [r0], #1
 8003846:	549f      	strb	r7, [r3, r2]
	for (i=0; i < len; i++){
 8003848:	3201      	adds	r2, #1
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	4291      	cmp	r1, r2
 800384e:	dcf7      	bgt.n	8003840 <CharacterInputThread+0xc20>
 8003850:	9403      	str	r4, [sp, #12]
 8003852:	4673      	mov	r3, lr
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 8003854:	4463      	add	r3, ip
			if (sdr(SDR_CONTINUE|SDR_CHECK)) {
 8003856:	2010      	movs	r0, #16
			i += read_bytes(tdo_expected, &(buf[i]), sdr_bytes);
 8003858:	b29f      	uxth	r7, r3
			if (sdr(SDR_CONTINUE|SDR_CHECK)) {
 800385a:	f7fd f931 	bl	8000ac0 <sdr>
 800385e:	2800      	cmp	r0, #0
 8003860:	f43f ad98 	beq.w	8003394 <CharacterInputThread+0x774>
		chprintf(dbg, "---------FAIL!\r\n");
 8003864:	4959      	ldr	r1, [pc, #356]	; (80039cc <CharacterInputThread+0xdac>)
 8003866:	9c04      	ldr	r4, [sp, #16]
 8003868:	4650      	mov	r0, sl
 800386a:	f7fe ff81 	bl	8002770 <chprintf>
 800386e:	2700      	movs	r7, #0
 8003870:	f7ff b9ea 	b.w	8002c48 <CharacterInputThread+0x28>
            state = CLOCK_DRCs;
 8003874:	2728      	movs	r7, #40	; 0x28
 8003876:	f7ff b9e7 	b.w	8002c48 <CharacterInputThread+0x28>
 800387a:	2706      	movs	r7, #6
 800387c:	f7ff b9e4 	b.w	8002c48 <CharacterInputThread+0x28>
          state = BANK_BEE;
 8003880:	2708      	movs	r7, #8
 8003882:	f7ff b9e1 	b.w	8002c48 <CharacterInputThread+0x28>
          state = BANK_BRR;
 8003886:	2704      	movs	r7, #4
 8003888:	f7ff b9de 	b.w	8002c48 <CharacterInputThread+0x28>
          temp=0;
 800388c:	4a50      	ldr	r2, [pc, #320]	; (80039d0 <CharacterInputThread+0xdb0>)
 800388e:	9403      	str	r4, [sp, #12]
 8003890:	2300      	movs	r3, #0
 8003892:	7013      	strb	r3, [r2, #0]
          for (i=0;i<sizeof(serial);i++){
 8003894:	ab0a      	add	r3, sp, #40	; 0x28
 8003896:	3b04      	subs	r3, #4
 8003898:	f10d 081b 	add.w	r8, sp, #27
 800389c:	461c      	mov	r4, r3
            streamPut(ost, serial[i]);
 800389e:	f818 7f01 	ldrb.w	r7, [r8, #1]!
 80038a2:	682a      	ldr	r2, [r5, #0]
 80038a4:	4639      	mov	r1, r7
 80038a6:	68d2      	ldr	r2, [r2, #12]
 80038a8:	4630      	mov	r0, r6
 80038aa:	4790      	blx	r2
            temp += serial[i];
 80038ac:	4b48      	ldr	r3, [pc, #288]	; (80039d0 <CharacterInputThread+0xdb0>)
 80038ae:	7819      	ldrb	r1, [r3, #0]
 80038b0:	4439      	add	r1, r7
 80038b2:	b2c9      	uxtb	r1, r1
          for (i=0;i<sizeof(serial);i++){
 80038b4:	45a0      	cmp	r8, r4
            temp += serial[i];
 80038b6:	7019      	strb	r1, [r3, #0]
          for (i=0;i<sizeof(serial);i++){
 80038b8:	d1f1      	bne.n	800389e <CharacterInputThread+0xc7e>
          streamPut(ost, temp);
 80038ba:	682b      	ldr	r3, [r5, #0]
 80038bc:	9c03      	ldr	r4, [sp, #12]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4630      	mov	r0, r6
 80038c2:	4798      	blx	r3
        state = IDLE;
 80038c4:	2700      	movs	r7, #0
 80038c6:	f7ff b9bf 	b.w	8002c48 <CharacterInputThread+0x28>
              streamPut(ost, checksum);
 80038ca:	682b      	ldr	r3, [r5, #0]
 80038cc:	2100      	movs	r1, #0
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4630      	mov	r0, r6
 80038d2:	4798      	blx	r3
              count *= 256;
 80038d4:	f8b9 3000 	ldrh.w	r3, [r9]
 80038d8:	021b      	lsls	r3, r3, #8
              count --;
 80038da:	3b01      	subs	r3, #1
 80038dc:	f8a9 3000 	strh.w	r3, [r9]
                tbuf[0] = 0;
 80038e0:	2700      	movs	r7, #0
                streamPut(ost, tbuf[0]);
 80038e2:	682b      	ldr	r3, [r5, #0]
                tbuf[0] = 0;
 80038e4:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
                streamPut(ost, tbuf[0]);
 80038e8:	2100      	movs	r1, #0
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4630      	mov	r0, r6
 80038ee:	4798      	blx	r3
                count--;
 80038f0:	f8b9 1000 	ldrh.w	r1, [r9]
 80038f4:	3901      	subs	r1, #1
 80038f6:	b289      	uxth	r1, r1
 80038f8:	f8a9 1000 	strh.w	r1, [r9]
              while (count){ //Blocks of 256 Bytes
 80038fc:	2900      	cmp	r1, #0
 80038fe:	d1f0      	bne.n	80038e2 <CharacterInputThread+0xcc2>
              streamPut(ost, checksum);
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	4630      	mov	r0, r6
 8003904:	68db      	ldr	r3, [r3, #12]
            state = IDLE;
 8003906:	460f      	mov	r7, r1
              streamPut(ost, checksum);
 8003908:	4798      	blx	r3
 800390a:	f7ff b99d 	b.w	8002c48 <CharacterInputThread+0x28>
            for (i=0; i<count; i++){
 800390e:	f8b9 7000 	ldrh.w	r7, [r9]
 8003912:	b1a7      	cbz	r7, 800393e <CharacterInputThread+0xd1e>
 8003914:	f04f 0800 	mov.w	r8, #0
            checksum = 0;
 8003918:	4647      	mov	r7, r8
              checksum += tbuf[i];
 800391a:	fa1f f288 	uxth.w	r2, r8
 800391e:	a90a      	add	r1, sp, #40	; 0x28
              streamPut(ost, tbuf[i]);
 8003920:	682b      	ldr	r3, [r5, #0]
              checksum += tbuf[i];
 8003922:	5c89      	ldrb	r1, [r1, r2]
              streamPut(ost, tbuf[i]);
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4630      	mov	r0, r6
              checksum += tbuf[i];
 8003928:	440f      	add	r7, r1
 800392a:	f108 0801 	add.w	r8, r8, #1
              streamPut(ost, tbuf[i]);
 800392e:	4798      	blx	r3
            for (i=0; i<count; i++){
 8003930:	f8b9 2000 	ldrh.w	r2, [r9]
 8003934:	fa1f f388 	uxth.w	r3, r8
 8003938:	429a      	cmp	r2, r3
              checksum += tbuf[i];
 800393a:	b2ff      	uxtb	r7, r7
            for (i=0; i<count; i++){
 800393c:	d8ed      	bhi.n	800391a <CharacterInputThread+0xcfa>
            streamPut(ost, checksum);
 800393e:	682b      	ldr	r3, [r5, #0]
 8003940:	4639      	mov	r1, r7
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4630      	mov	r0, r6
 8003946:	4798      	blx	r3
          state = IDLE;
 8003948:	2700      	movs	r7, #0
 800394a:	f7ff b97d 	b.w	8002c48 <CharacterInputThread+0x28>
            chprintf(dbg, "Bank > 8 ERROR\r\n");
 800394e:	4921      	ldr	r1, [pc, #132]	; (80039d4 <CharacterInputThread+0xdb4>)
 8003950:	4650      	mov	r0, sl
 8003952:	f7fe ff0d 	bl	8002770 <chprintf>
        state = IDLE;
 8003956:	2700      	movs	r7, #0
 8003958:	f7ff b976 	b.w	8002c48 <CharacterInputThread+0x28>
            chprintf(dbg, "Bank > 8 ERROR\r\n");
 800395c:	491d      	ldr	r1, [pc, #116]	; (80039d4 <CharacterInputThread+0xdb4>)
 800395e:	4650      	mov	r0, sl
 8003960:	f7fe ff06 	bl	8002770 <chprintf>
        state = IDLE;
 8003964:	2700      	movs	r7, #0
 8003966:	f7ff b96f 	b.w	8002c48 <CharacterInputThread+0x28>
          state = BANK_BR;
 800396a:	2703      	movs	r7, #3
 800396c:	f7ff b96c 	b.w	8002c48 <CharacterInputThread+0x28>
            chprintf(dbg, "Bank > 8 ERROR\r\n");
 8003970:	4918      	ldr	r1, [pc, #96]	; (80039d4 <CharacterInputThread+0xdb4>)
 8003972:	4650      	mov	r0, sl
 8003974:	f7fe fefc 	bl	8002770 <chprintf>
        state = IDLE;
 8003978:	2700      	movs	r7, #0
 800397a:	f7ff b965 	b.w	8002c48 <CharacterInputThread+0x28>
          state = BANK_BEE;
 800397e:	2708      	movs	r7, #8
 8003980:	f7ff b962 	b.w	8002c48 <CharacterInputThread+0x28>
          chprintf(ost, "%c%cU", VMAJOR, VMINOR); // U for Unicomp, N for Nucleo NVRAM Programmer
 8003984:	4914      	ldr	r1, [pc, #80]	; (80039d8 <CharacterInputThread+0xdb8>)
 8003986:	2300      	movs	r3, #0
 8003988:	2201      	movs	r2, #1
 800398a:	4630      	mov	r0, r6
 800398c:	f7fe fef0 	bl	8002770 <chprintf>
        state = IDLE;
 8003990:	2700      	movs	r7, #0
 8003992:	f7ff b959 	b.w	8002c48 <CharacterInputThread+0x28>
          state = BANK_BES;
 8003996:	2705      	movs	r7, #5
 8003998:	f7ff b956 	b.w	8002c48 <CharacterInputThread+0x28>
 800399c:	f7fd f860 	bl	8000a60 <state_goto.part.0>
 80039a0:	e4f8      	b.n	8003394 <CharacterInputThread+0x774>
	return len;
 80039a2:	468c      	mov	ip, r1
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 80039a4:	b29b      	uxth	r3, r3
	for (i=0; i < len; i++){
 80039a6:	e755      	b.n	8003854 <CharacterInputThread+0xc34>
	return len;
 80039a8:	460f      	mov	r7, r1
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 80039aa:	b29b      	uxth	r3, r3
	for (i=0; i < len; i++){
 80039ac:	e522      	b.n	80033f4 <CharacterInputThread+0x7d4>
	return len;
 80039ae:	468c      	mov	ip, r1
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 80039b0:	b29b      	uxth	r3, r3
	for (i=0; i < len; i++){
 80039b2:	e55a      	b.n	800346a <CharacterInputThread+0x84a>
	return len;
 80039b4:	468c      	mov	ip, r1
			i += read_bytes(tdi_value, &(buf[i]), sdr_bytes);
 80039b6:	b29b      	uxth	r3, r3
	for (i=0; i < len; i++){
 80039b8:	e6b1      	b.n	800371e <CharacterInputThread+0xafe>
	return len;
 80039ba:	468c      	mov	ip, r1
			i += read_bytes(address_mask, &(buf[i]), sdr_bytes);
 80039bc:	b29b      	uxth	r3, r3
	for (i=0; i < len; i++){
 80039be:	e707      	b.n	80037d0 <CharacterInputThread+0xbb0>
 80039c0:	200017f4 	.word	0x200017f4
 80039c4:	200017fc 	.word	0x200017fc
 80039c8:	2000181c 	.word	0x2000181c
 80039cc:	08005ef4 	.word	0x08005ef4
 80039d0:	2000185c 	.word	0x2000185c
 80039d4:	08005f64 	.word	0x08005f64
 80039d8:	08005f78 	.word	0x08005f78
 80039dc:	00000000 	.word	0x00000000

080039e0 <cmd_test>:
/*===========================================================================*/
/* Command line related.                                                     */
/*===========================================================================*/


void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80039e0:	b510      	push	{r4, lr}
  (void)* argv;
  (void)argc;
  char text[10];
  uint16_t val;

  chprintf(chp, "Enter Number (<256) \r\n");
 80039e2:	490b      	ldr	r1, [pc, #44]	; (8003a10 <cmd_test+0x30>)
void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80039e4:	b084      	sub	sp, #16
 80039e6:	4604      	mov	r4, r0
  chprintf(chp, "Enter Number (<256) \r\n");
 80039e8:	f7fe fec2 	bl	8002770 <chprintf>
  val = (uint16_t)strtol(text, NULL, 0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	4611      	mov	r1, r2
 80039f0:	a801      	add	r0, sp, #4
 80039f2:	f001 fefd 	bl	80057f0 <strtol>
 80039f6:	4603      	mov	r3, r0

  chprintf(chp, "You entered text: %s Val: %04x got: %02x\r\n",
 80039f8:	aa01      	add	r2, sp, #4
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	4905      	ldr	r1, [pc, #20]	; (8003a14 <cmd_test+0x34>)
 80039fe:	4620      	mov	r0, r4
 8003a00:	f7fe feb6 	bl	8002770 <chprintf>
                      text, val);
  chprintf(ost, "OK\r\n");
 8003a04:	4904      	ldr	r1, [pc, #16]	; (8003a18 <cmd_test+0x38>)
 8003a06:	4805      	ldr	r0, [pc, #20]	; (8003a1c <cmd_test+0x3c>)
 8003a08:	f7fe feb2 	bl	8002770 <chprintf>

}
 8003a0c:	b004      	add	sp, #16
 8003a0e:	bd10      	pop	{r4, pc}
 8003a10:	08005f8c 	.word	0x08005f8c
 8003a14:	08005fa4 	.word	0x08005fa4
 8003a18:	08005fd0 	.word	0x08005fd0
 8003a1c:	20000e9c 	.word	0x20000e9c

08003a20 <cmd_echo>:

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc != 1) {
 8003a20:	2901      	cmp	r1, #1
 8003a22:	d003      	beq.n	8003a2c <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8003a24:	4a03      	ldr	r2, [pc, #12]	; (8003a34 <cmd_echo+0x14>)
 8003a26:	4904      	ldr	r1, [pc, #16]	; (8003a38 <cmd_echo+0x18>)
 8003a28:	f7fe bea2 	b.w	8002770 <chprintf>
    return;
  }
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	4903      	ldr	r1, [pc, #12]	; (8003a3c <cmd_echo+0x1c>)
 8003a30:	f7fe be9e 	b.w	8002770 <chprintf>
 8003a34:	08005fd8 	.word	0x08005fd8
 8003a38:	08005fe8 	.word	0x08005fe8
 8003a3c:	08005ff4 	.word	0x08005ff4

08003a40 <cmd_info>:
  if (argc > 0) {
 8003a40:	2900      	cmp	r1, #0
 8003a42:	dc2e      	bgt.n	8003aa2 <cmd_info+0x62>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003a44:	b510      	push	{r4, lr}
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8003a46:	4a19      	ldr	r2, [pc, #100]	; (8003aac <cmd_info+0x6c>)
 8003a48:	4919      	ldr	r1, [pc, #100]	; (8003ab0 <cmd_info+0x70>)
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	4604      	mov	r4, r0
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8003a4e:	f7fe fe8f 	bl	8002770 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 8003a52:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <cmd_info+0x74>)
 8003a54:	4918      	ldr	r1, [pc, #96]	; (8003ab8 <cmd_info+0x78>)
 8003a56:	4620      	mov	r0, r4
 8003a58:	f7fe fe8a 	bl	8002770 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 8003a5c:	4a17      	ldr	r2, [pc, #92]	; (8003abc <cmd_info+0x7c>)
 8003a5e:	4918      	ldr	r1, [pc, #96]	; (8003ac0 <cmd_info+0x80>)
 8003a60:	4620      	mov	r0, r4
 8003a62:	f7fe fe85 	bl	8002770 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 8003a66:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <cmd_info+0x84>)
 8003a68:	4917      	ldr	r1, [pc, #92]	; (8003ac8 <cmd_info+0x88>)
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f7fe fe80 	bl	8002770 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8003a70:	4a16      	ldr	r2, [pc, #88]	; (8003acc <cmd_info+0x8c>)
 8003a72:	4917      	ldr	r1, [pc, #92]	; (8003ad0 <cmd_info+0x90>)
 8003a74:	4620      	mov	r0, r4
 8003a76:	f7fe fe7b 	bl	8002770 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 8003a7a:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <cmd_info+0x94>)
 8003a7c:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <cmd_info+0x98>)
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7fe fe76 	bl	8002770 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 8003a84:	4a15      	ldr	r2, [pc, #84]	; (8003adc <cmd_info+0x9c>)
 8003a86:	4916      	ldr	r1, [pc, #88]	; (8003ae0 <cmd_info+0xa0>)
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7fe fe71 	bl	8002770 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 8003a8e:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <cmd_info+0xa4>)
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <cmd_info+0xa8>)
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <cmd_info+0xac>)
 8003a96:	4916      	ldr	r1, [pc, #88]	; (8003af0 <cmd_info+0xb0>)
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f7fe fe69 	bl	8002770 <chprintf>
}
 8003a9e:	b002      	add	sp, #8
 8003aa0:	bd10      	pop	{r4, pc}
    shellUsage(chp, "info");
 8003aa2:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <cmd_info+0xb4>)
 8003aa4:	4914      	ldr	r1, [pc, #80]	; (8003af8 <cmd_info+0xb8>)
 8003aa6:	f7fe be63 	b.w	8002770 <chprintf>
 8003aaa:	bf00      	nop
 8003aac:	08006004 	.word	0x08006004
 8003ab0:	0800600c 	.word	0x0800600c
 8003ab4:	08006020 	.word	0x08006020
 8003ab8:	08006060 	.word	0x08006060
 8003abc:	08006074 	.word	0x08006074
 8003ac0:	08006080 	.word	0x08006080
 8003ac4:	08006094 	.word	0x08006094
 8003ac8:	080060a0 	.word	0x080060a0
 8003acc:	080060b4 	.word	0x080060b4
 8003ad0:	080060cc 	.word	0x080060cc
 8003ad4:	080060e0 	.word	0x080060e0
 8003ad8:	0800610c 	.word	0x0800610c
 8003adc:	08006120 	.word	0x08006120
 8003ae0:	08006138 	.word	0x08006138
 8003ae4:	08006174 	.word	0x08006174
 8003ae8:	08006150 	.word	0x08006150
 8003aec:	0800614c 	.word	0x0800614c
 8003af0:	0800615c 	.word	0x0800615c
 8003af4:	08005ffc 	.word	0x08005ffc
 8003af8:	08005fe8 	.word	0x08005fe8
 8003afc:	00000000 	.word	0x00000000

08003b00 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8003b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003b04:	4dba      	ldr	r5, [pc, #744]	; (8003df0 <shellThread+0x2f0>)
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
 8003b06:	f8d0 a000 	ldr.w	sl, [r0]
#if !defined(_CHIBIOS_NIL_)
  chRegSetThreadName(SHELL_THREAD_NAME);
#endif

#if SHELL_USE_HISTORY == TRUE
  *(scfg->sc_histbuf) = 0;
 8003b0a:	6883      	ldr	r3, [r0, #8]
 8003b0c:	696a      	ldr	r2, [r5, #20]
 8003b0e:	49b9      	ldr	r1, [pc, #740]	; (8003df4 <shellThread+0x2f4>)
THD_FUNCTION(shellThread, p) {
 8003b10:	b0a7      	sub	sp, #156	; 0x9c
 8003b12:	4604      	mov	r4, r0
 8003b14:	9000      	str	r0, [sp, #0]
  const ShellCommand *scp = scfg->sc_commands;
 8003b16:	6840      	ldr	r0, [r0, #4]
 8003b18:	9006      	str	r0, [sp, #24]
  *(scfg->sc_histbuf) = 0;
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	6191      	str	r1, [r2, #24]
 8003b1e:	7018      	strb	r0, [r3, #0]
  ShellHistory hist = {
 8003b20:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8003b24:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 8003b28:	49b3      	ldr	r1, [pc, #716]	; (8003df8 <shellThread+0x2f8>)
  ShellHistory hist = {
 8003b2a:	9010      	str	r0, [sp, #64]	; 0x40
  chprintf(chp, SHELL_NEWLINE_STR);
 8003b2c:	4650      	mov	r0, sl
  ShellHistory hist = {
 8003b2e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  chprintf(chp, SHELL_NEWLINE_STR);
 8003b32:	f7fe fe1d 	bl	8002770 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8003b36:	49b1      	ldr	r1, [pc, #708]	; (8003dfc <shellThread+0x2fc>)
 8003b38:	4650      	mov	r0, sl
 8003b3a:	f7fe fe19 	bl	8002770 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8003b3e:	696b      	ldr	r3, [r5, #20]
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
 8003b40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b44:	f013 0304 	ands.w	r3, r3, #4
 8003b48:	f040 8093 	bne.w	8003c72 <shellThread+0x172>
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
  char *p = line;
  BaseSequentialStream *chp = scfg->sc_channel;
#if SHELL_USE_ESC_SEQ == TRUE
  bool escape = false;
  bool bracket = false;
 8003b4c:	9302      	str	r3, [sp, #8]
 8003b4e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 8003b52:	46d0      	mov	r8, sl
    chprintf(chp, SHELL_PROMPT_STR);
 8003b54:	49aa      	ldr	r1, [pc, #680]	; (8003e00 <shellThread+0x300>)
 8003b56:	4640      	mov	r0, r8
 8003b58:	f7fe fe0a 	bl	8002770 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 8003b5c:	9b00      	ldr	r3, [sp, #0]
  bool bracket = false;
 8003b5e:	2500      	movs	r5, #0
  BaseSequentialStream *chp = scfg->sc_channel;
 8003b60:	681c      	ldr	r4, [r3, #0]
  bool escape = false;
 8003b62:	462e      	mov	r6, r5
  char *p = line;
 8003b64:	464f      	mov	r7, r9
#endif

  while (true) {
    char c;

    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8003b70:	4620      	mov	r0, r4
 8003b72:	4798      	blx	r3
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d045      	beq.n	8003c04 <shellThread+0x104>
      return true;
#if SHELL_USE_ESC_SEQ == TRUE
    if (c == 27) {
 8003b78:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8003b7c:	291b      	cmp	r1, #27
 8003b7e:	d02a      	beq.n	8003bd6 <shellThread+0xd6>
      escape = true;
      continue;
    }
    if (escape) {
 8003b80:	b15e      	cbz	r6, 8003b9a <shellThread+0x9a>
      escape = false;
      if (c == '[') {
 8003b82:	295b      	cmp	r1, #91	; 0x5b
 8003b84:	d03c      	beq.n	8003c00 <shellThread+0x100>
        escape = true;
        bracket = true;
        continue;
      }
      if (bracket) {
 8003b86:	b135      	cbz	r5, 8003b96 <shellThread+0x96>
        bracket = false;
#if SHELL_USE_HISTORY == TRUE
        if (c == 'A') {
 8003b88:	2941      	cmp	r1, #65	; 0x41
 8003b8a:	f000 814d 	beq.w	8003e28 <shellThread+0x328>
            chprintf(chp, "%s", line);
            p = line + len;
          }
          continue;
        }
        if (c == 'B') {
 8003b8e:	2942      	cmp	r1, #66	; 0x42
 8003b90:	f000 8111 	beq.w	8003db6 <shellThread+0x2b6>
        bracket = false;
 8003b94:	2500      	movs	r5, #0
      escape = false;
 8003b96:	462e      	mov	r6, r5
 8003b98:	e7e5      	b.n	8003b66 <shellThread+0x66>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
#endif
    if ((c == 8) || (c == 127)) {
 8003b9a:	2908      	cmp	r1, #8
 8003b9c:	d01d      	beq.n	8003bda <shellThread+0xda>
 8003b9e:	297f      	cmp	r1, #127	; 0x7f
 8003ba0:	d01b      	beq.n	8003bda <shellThread+0xda>
        streamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8003ba2:	290d      	cmp	r1, #13
 8003ba4:	f000 8172 	beq.w	8003e8c <shellThread+0x38c>
#endif
      *p = 0;
      return false;
    }
#if SHELL_USE_COMPLETION == TRUE
    if (c == '\t') {
 8003ba8:	2909      	cmp	r1, #9
 8003baa:	d076      	beq.n	8003c9a <shellThread+0x19a>
      }
      continue;
    }
#endif
#if SHELL_USE_HISTORY == TRUE
    if (c == 14) {
 8003bac:	290e      	cmp	r1, #14
 8003bae:	f000 8147 	beq.w	8003e40 <shellThread+0x340>
        chprintf(chp, "%s", line);
        p = line + len;
      }
      continue;
    }
    if (c == 16) {
 8003bb2:	2910      	cmp	r1, #16
 8003bb4:	f000 8160 	beq.w	8003e78 <shellThread+0x378>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 8003bb8:	291f      	cmp	r1, #31
 8003bba:	d9d4      	bls.n	8003b66 <shellThread+0x66>
      continue;
    if (p < line + size - 1) {
 8003bbc:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8003bc0:	429f      	cmp	r7, r3
 8003bc2:	d2d0      	bcs.n	8003b66 <shellThread+0x66>
      streamPut(chp, c);
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	4798      	blx	r3
      *p++ = (char)c;
 8003bcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003bd0:	f807 3b01 	strb.w	r3, [r7], #1
 8003bd4:	e7c7      	b.n	8003b66 <shellThread+0x66>
      escape = true;
 8003bd6:	2601      	movs	r6, #1
 8003bd8:	e7c5      	b.n	8003b66 <shellThread+0x66>
      if (p != line) {
 8003bda:	454f      	cmp	r7, r9
 8003bdc:	d0c3      	beq.n	8003b66 <shellThread+0x66>
        streamPut(chp, 0x08);
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	2108      	movs	r1, #8
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4620      	mov	r0, r4
 8003be6:	4798      	blx	r3
        streamPut(chp, 0x20);
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	2120      	movs	r1, #32
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4620      	mov	r0, r4
 8003bf0:	4798      	blx	r3
        streamPut(chp, 0x08);
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	2108      	movs	r1, #8
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4620      	mov	r0, r4
        p--;
 8003bfa:	3f01      	subs	r7, #1
        streamPut(chp, 0x08);
 8003bfc:	4798      	blx	r3
 8003bfe:	e7b2      	b.n	8003b66 <shellThread+0x66>
        bracket = true;
 8003c00:	4635      	mov	r5, r6
 8003c02:	e7b0      	b.n	8003b66 <shellThread+0x66>
  chThdSleep(delay);
 8003c04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c08:	f7fd ffea 	bl	8001be0 <chThdSleep>
    lp = parse_arguments(line, &tokp);
 8003c0c:	a909      	add	r1, sp, #36	; 0x24
 8003c0e:	4648      	mov	r0, r9
 8003c10:	f7fe fd7e 	bl	8002710 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003c14:	a909      	add	r1, sp, #36	; 0x24
    lp = parse_arguments(line, &tokp);
 8003c16:	4605      	mov	r5, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003c18:	2000      	movs	r0, #0
 8003c1a:	ac11      	add	r4, sp, #68	; 0x44
    n = 0;
 8003c1c:	2600      	movs	r6, #0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003c1e:	f7fe fd77 	bl	8002710 <parse_arguments>
 8003c22:	b150      	cbz	r0, 8003c3a <shellThread+0x13a>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8003c24:	2e04      	cmp	r6, #4
 8003c26:	d031      	beq.n	8003c8c <shellThread+0x18c>
      args[n++] = lp;
 8003c28:	f844 0b04 	str.w	r0, [r4], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003c2c:	a909      	add	r1, sp, #36	; 0x24
 8003c2e:	2000      	movs	r0, #0
      args[n++] = lp;
 8003c30:	3601      	adds	r6, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003c32:	f7fe fd6d 	bl	8002710 <parse_arguments>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d1f4      	bne.n	8003c24 <shellThread+0x124>
    args[n] = NULL;
 8003c3a:	ab26      	add	r3, sp, #152	; 0x98
 8003c3c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003c40:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8003c44:	b175      	cbz	r5, 8003c64 <shellThread+0x164>
      if (strcmp(cmd, "help") == 0) {
 8003c46:	496f      	ldr	r1, [pc, #444]	; (8003e04 <shellThread+0x304>)
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f7fc fbfd 	bl	8000448 <strcmp>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	f040 81db 	bne.w	800400a <shellThread+0x50a>
        if (n > 0) {
 8003c54:	2e00      	cmp	r6, #0
 8003c56:	f000 8182 	beq.w	8003f5e <shellThread+0x45e>
          shellUsage(chp, "help");
 8003c5a:	4a6a      	ldr	r2, [pc, #424]	; (8003e04 <shellThread+0x304>)
 8003c5c:	496a      	ldr	r1, [pc, #424]	; (8003e08 <shellThread+0x308>)
 8003c5e:	4640      	mov	r0, r8
 8003c60:	f7fe fd86 	bl	8002770 <chprintf>
 8003c64:	4b62      	ldr	r3, [pc, #392]	; (8003df0 <shellThread+0x2f0>)
 8003c66:	695b      	ldr	r3, [r3, #20]
  while (!chThdShouldTerminateX()) {
 8003c68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c6c:	075b      	lsls	r3, r3, #29
 8003c6e:	f57f af71 	bpl.w	8003b54 <shellThread+0x54>
 8003c72:	2320      	movs	r3, #32
 8003c74:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4864      	ldr	r0, [pc, #400]	; (8003e0c <shellThread+0x30c>)
 8003c7c:	f7fd f8b8 	bl	8000df0 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8003c80:	2000      	movs	r0, #0
 8003c82:	f7fd fda5 	bl	80017d0 <chThdExitS>
}
 8003c86:	b027      	add	sp, #156	; 0x9c
 8003c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 8003c8c:	4960      	ldr	r1, [pc, #384]	; (8003e10 <shellThread+0x310>)
 8003c8e:	4640      	mov	r0, r8
 8003c90:	f7fe fd6e 	bl	8002770 <chprintf>
    args[n] = NULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	9315      	str	r3, [sp, #84]	; 0x54
    if (cmd != NULL) {
 8003c98:	e7e4      	b.n	8003c64 <shellThread+0x164>
      if (p < line + size - 1) {
 8003c9a:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8003c9e:	429f      	cmp	r7, r3
 8003ca0:	f4bf af61 	bcs.w	8003b66 <shellThread+0x66>
  char help_cmp[] = "help";
 8003ca4:	4b57      	ldr	r3, [pc, #348]	; (8003e04 <shellThread+0x304>)
        *p = 0;
 8003ca6:	703e      	strb	r6, [r7, #0]
  char help_cmp[] = "help";
 8003ca8:	e893 0003 	ldmia.w	r3, {r0, r1}
  if (strstr(help_cmp, line) == help_cmp) {
 8003cac:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
  char help_cmp[] = "help";
 8003cb0:	900a      	str	r0, [sp, #40]	; 0x28
 8003cb2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
  if (strstr(help_cmp, line) == help_cmp) {
 8003cb6:	4650      	mov	r0, sl
 8003cb8:	4649      	mov	r1, r9
 8003cba:	f001 ffeb 	bl	8005c94 <strstr>
        get_completions(scfg, line);
 8003cbe:	9b00      	ldr	r3, [sp, #0]
  if (strstr(help_cmp, line) == help_cmp) {
 8003cc0:	4550      	cmp	r0, sl
        get_completions(scfg, line);
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	9203      	str	r2, [sp, #12]
 8003cc8:	9301      	str	r3, [sp, #4]
  if (strstr(help_cmp, line) == help_cmp) {
 8003cca:	f000 813d 	beq.w	8003f48 <shellThread+0x448>
 8003cce:	1d1a      	adds	r2, r3, #4
 8003cd0:	9205      	str	r2, [sp, #20]
        get_completions(scfg, line);
 8003cd2:	469a      	mov	sl, r3
  while (lcp->sc_name != NULL) {
 8003cd4:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8003e24 <shellThread+0x324>
 8003cd8:	4a4e      	ldr	r2, [pc, #312]	; (8003e14 <shellThread+0x314>)
 8003cda:	9504      	str	r5, [sp, #16]
 8003cdc:	465b      	mov	r3, fp
 8003cde:	4615      	mov	r5, r2
 8003ce0:	46a3      	mov	fp, r4
 8003ce2:	461c      	mov	r4, r3
    if (strstr(lcp->sc_name, line) == lcp->sc_name) {
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	f001 ffd4 	bl	8005c94 <strstr>
 8003cec:	4284      	cmp	r4, r0
      *scmp++ = (char *)lcp->sc_name;
 8003cee:	bf08      	it	eq
 8003cf0:	f84a 4b04 	streq.w	r4, [sl], #4
  while (lcp->sc_name != NULL) {
 8003cf4:	f855 4f08 	ldr.w	r4, [r5, #8]!
 8003cf8:	2c00      	cmp	r4, #0
 8003cfa:	d1f3      	bne.n	8003ce4 <shellThread+0x1e4>
  if (scp != NULL) {
 8003cfc:	e9dd 2503 	ldrd	r2, r5, [sp, #12]
 8003d00:	465c      	mov	r4, fp
 8003d02:	b19a      	cbz	r2, 8003d2c <shellThread+0x22c>
    while (scp->sc_name != NULL) {
 8003d04:	6813      	ldr	r3, [r2, #0]
 8003d06:	b18b      	cbz	r3, 8003d2c <shellThread+0x22c>
 8003d08:	9503      	str	r5, [sp, #12]
 8003d0a:	46a3      	mov	fp, r4
 8003d0c:	4615      	mov	r5, r2
 8003d0e:	461c      	mov	r4, r3
      if (strstr(scp->sc_name, line) == scp->sc_name) {
 8003d10:	4620      	mov	r0, r4
 8003d12:	4649      	mov	r1, r9
 8003d14:	f001 ffbe 	bl	8005c94 <strstr>
 8003d18:	4284      	cmp	r4, r0
        *scmp++ = (char *)scp->sc_name;
 8003d1a:	bf08      	it	eq
 8003d1c:	f84a 4b04 	streq.w	r4, [sl], #4
    while (scp->sc_name != NULL) {
 8003d20:	f855 4f08 	ldr.w	r4, [r5, #8]!
 8003d24:	2c00      	cmp	r4, #0
 8003d26:	d1f3      	bne.n	8003d10 <shellThread+0x210>
 8003d28:	9d03      	ldr	r5, [sp, #12]
 8003d2a:	465c      	mov	r4, fp
  *scmp = NULL;
 8003d2c:	9b02      	ldr	r3, [sp, #8]
 8003d2e:	f8ca 3000 	str.w	r3, [sl]
  if (*scmp != NULL) {
 8003d32:	9b01      	ldr	r3, [sp, #4]
 8003d34:	f8d3 a000 	ldr.w	sl, [r3]
 8003d38:	46d3      	mov	fp, sl
 8003d3a:	f1ba 0f00 	cmp.w	sl, #0
 8003d3e:	f43f af12 	beq.w	8003b66 <shellThread+0x66>
    if (*cmp == NULL) {
 8003d42:	685b      	ldr	r3, [r3, #4]
        int len = process_completions(scfg, line, p - line, size);
 8003d44:	eba7 0209 	sub.w	r2, r7, r9
 8003d48:	9203      	str	r2, [sp, #12]
    if (*cmp == NULL) {
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8179 	beq.w	8004042 <shellThread+0x542>
      while (*(*scmp + clen) != 0) {
 8003d50:	f89a c000 	ldrb.w	ip, [sl]
 8003d54:	f1bc 0f00 	cmp.w	ip, #0
 8003d58:	f000 81d0 	beq.w	80040fc <shellThread+0x5fc>
  int clen = 0;
 8003d5c:	f8cd 8010 	str.w	r8, [sp, #16]
 8003d60:	46a3      	mov	fp, r4
 8003d62:	9507      	str	r5, [sp, #28]
 8003d64:	4664      	mov	r4, ip
 8003d66:	9d03      	ldr	r5, [sp, #12]
 8003d68:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003d6c:	f8dd 8014 	ldr.w	r8, [sp, #20]
      while (*(*scmp + clen) != 0) {
 8003d70:	46be      	mov	lr, r7
  int clen = 0;
 8003d72:	2100      	movs	r1, #0
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 8003d74:	5c5a      	ldrb	r2, [r3, r1]
 8003d76:	42a2      	cmp	r2, r4
 8003d78:	bf08      	it	eq
 8003d7a:	4642      	moveq	r2, r8
 8003d7c:	d105      	bne.n	8003d8a <shellThread+0x28a>
               (*(*cmp + clen) != 0) && (*cmp != NULL)) {
 8003d7e:	b13b      	cbz	r3, 8003d90 <shellThread+0x290>
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 8003d80:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8003d84:	5c58      	ldrb	r0, [r3, r1]
 8003d86:	42a0      	cmp	r0, r4
 8003d88:	d0f9      	beq.n	8003d7e <shellThread+0x27e>
        if (*cmp == NULL) {
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 80ff 	bne.w	8003f8e <shellThread+0x48e>
          if ((c < line + size - 1) && (clen >= length))
 8003d90:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8003d94:	459e      	cmp	lr, r3
 8003d96:	d205      	bcs.n	8003da4 <shellThread+0x2a4>
 8003d98:	428d      	cmp	r5, r1
            *c++ = *(*scmp + clen);
 8003d9a:	bfdc      	itt	le
 8003d9c:	f80e 4b01 	strble.w	r4, [lr], #1
 8003da0:	f8dc a000 	ldrle.w	sl, [ip]
          clen++;
 8003da4:	3101      	adds	r1, #1
      while (*(*scmp + clen) != 0) {
 8003da6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8003daa:	2c00      	cmp	r4, #0
 8003dac:	f000 813f 	beq.w	800402e <shellThread+0x52e>
 8003db0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003db4:	e7de      	b.n	8003d74 <shellThread+0x274>
          int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8003db6:	2201      	movs	r2, #1
 8003db8:	4649      	mov	r1, r9
 8003dba:	a80c      	add	r0, sp, #48	; 0x30
 8003dbc:	f7fe fae8 	bl	8002390 <get_history>
          if (len == 0)
 8003dc0:	1e06      	subs	r6, r0, #0
 8003dc2:	d13a      	bne.n	8003e3a <shellThread+0x33a>
            *line = 0;
 8003dc4:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
            _shell_reset_cur(chp);
 8003dc8:	230d      	movs	r3, #13
 8003dca:	224f      	movs	r2, #79	; 0x4f
 8003dcc:	4912      	ldr	r1, [pc, #72]	; (8003e18 <shellThread+0x318>)
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f7fe fcce 	bl	8002770 <chprintf>
            _shell_clr_line(chp);
 8003dd4:	4911      	ldr	r1, [pc, #68]	; (8003e1c <shellThread+0x31c>)
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f7fe fcca 	bl	8002770 <chprintf>
        bracket = false;
 8003ddc:	2500      	movs	r5, #0
            chprintf(chp, "%s", line);
 8003dde:	4910      	ldr	r1, [pc, #64]	; (8003e20 <shellThread+0x320>)
 8003de0:	464a      	mov	r2, r9
 8003de2:	4620      	mov	r0, r4
            p = line + len;
 8003de4:	eb09 0706 	add.w	r7, r9, r6
            chprintf(chp, "%s", line);
 8003de8:	f7fe fcc2 	bl	8002770 <chprintf>
      escape = false;
 8003dec:	462e      	mov	r6, r5
 8003dee:	e6ba      	b.n	8003b66 <shellThread+0x66>
 8003df0:	200013b0 	.word	0x200013b0
 8003df4:	08006180 	.word	0x08006180
 8003df8:	08005fa0 	.word	0x08005fa0
 8003dfc:	08006188 	.word	0x08006188
 8003e00:	0800619c 	.word	0x0800619c
 8003e04:	080061dc 	.word	0x080061dc
 8003e08:	08005fe8 	.word	0x08005fe8
 8003e0c:	200017f8 	.word	0x200017f8
 8003e10:	080061c4 	.word	0x080061c4
 8003e14:	08006528 	.word	0x08006528
 8003e18:	080061ac 	.word	0x080061ac
 8003e1c:	080061b8 	.word	0x080061b8
 8003e20:	080061bc 	.word	0x080061bc
 8003e24:	08005ffc 	.word	0x08005ffc
          int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	a80c      	add	r0, sp, #48	; 0x30
 8003e2e:	f7fe faaf 	bl	8002390 <get_history>
          if (len > 0) {
 8003e32:	1e06      	subs	r6, r0, #0
 8003e34:	f77f aeae 	ble.w	8003b94 <shellThread+0x94>
 8003e38:	e7c6      	b.n	8003dc8 <shellThread+0x2c8>
          if (len >= 0) {
 8003e3a:	f6ff aeab 	blt.w	8003b94 <shellThread+0x94>
 8003e3e:	e7c3      	b.n	8003dc8 <shellThread+0x2c8>
      int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8003e40:	2201      	movs	r2, #1
 8003e42:	4649      	mov	r1, r9
 8003e44:	a80c      	add	r0, sp, #48	; 0x30
 8003e46:	f7fe faa3 	bl	8002390 <get_history>
      if (len == 0)
 8003e4a:	f1b0 0a00 	subs.w	sl, r0, #0
 8003e4e:	d178      	bne.n	8003f42 <shellThread+0x442>
        *line = 0;
 8003e50:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
        _shell_reset_cur(chp);
 8003e54:	230d      	movs	r3, #13
 8003e56:	224f      	movs	r2, #79	; 0x4f
 8003e58:	49ab      	ldr	r1, [pc, #684]	; (8004108 <shellThread+0x608>)
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f7fe fc88 	bl	8002770 <chprintf>
        _shell_clr_line(chp);
 8003e60:	49aa      	ldr	r1, [pc, #680]	; (800410c <shellThread+0x60c>)
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7fe fc84 	bl	8002770 <chprintf>
        chprintf(chp, "%s", line);
 8003e68:	49a9      	ldr	r1, [pc, #676]	; (8004110 <shellThread+0x610>)
 8003e6a:	464a      	mov	r2, r9
 8003e6c:	4620      	mov	r0, r4
        p = line + len;
 8003e6e:	eb09 070a 	add.w	r7, r9, sl
        chprintf(chp, "%s", line);
 8003e72:	f7fe fc7d 	bl	8002770 <chprintf>
 8003e76:	e676      	b.n	8003b66 <shellThread+0x66>
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8003e78:	4632      	mov	r2, r6
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	a80c      	add	r0, sp, #48	; 0x30
 8003e7e:	f7fe fa87 	bl	8002390 <get_history>
      if (len > 0) {
 8003e82:	f1b0 0a00 	subs.w	sl, r0, #0
 8003e86:	f77f ae6e 	ble.w	8003b66 <shellThread+0x66>
 8003e8a:	e7e3      	b.n	8003e54 <shellThread+0x354>
      chprintf(chp, SHELL_NEWLINE_STR);
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	49a1      	ldr	r1, [pc, #644]	; (8004114 <shellThread+0x614>)
 8003e90:	f7fe fc6e 	bl	8002770 <chprintf>
  if (length > shp->sh_size - 2)
 8003e94:	9d0d      	ldr	r5, [sp, #52]	; 0x34
      save_history(shp, line, p - line);
 8003e96:	eba7 0409 	sub.w	r4, r7, r9
  if (length > shp->sh_size - 2)
 8003e9a:	1e6b      	subs	r3, r5, #1
 8003e9c:	429c      	cmp	r4, r3
 8003e9e:	da4d      	bge.n	8003f3c <shellThread+0x43c>
  while ((*(line + length -1) == ' ') && (length > 0))
 8003ea0:	1e63      	subs	r3, r4, #1
 8003ea2:	eb09 0203 	add.w	r2, r9, r3
 8003ea6:	f819 1003 	ldrb.w	r1, [r9, r3]
 8003eaa:	2920      	cmp	r1, #32
 8003eac:	d10a      	bne.n	8003ec4 <shellThread+0x3c4>
 8003eae:	2c00      	cmp	r4, #0
 8003eb0:	dc03      	bgt.n	8003eba <shellThread+0x3ba>
 8003eb2:	e043      	b.n	8003f3c <shellThread+0x43c>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d041      	beq.n	8003f3c <shellThread+0x43c>
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8003ebe:	2920      	cmp	r1, #32
    length--;
 8003ec0:	461c      	mov	r4, r3
  while ((*(line + length -1) == ' ') && (length > 0))
 8003ec2:	d0f7      	beq.n	8003eb4 <shellThread+0x3b4>
  if (length <= 0)
 8003ec4:	2c00      	cmp	r4, #0
 8003ec6:	dd39      	ble.n	8003f3c <shellThread+0x43c>
  if (shp->sh_end >= shp->sh_beg) {
 8003ec8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8003eca:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8003ece:	1af2      	subs	r2, r6, r3
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8003ed0:	1b99      	subs	r1, r3, r6
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8003ed2:	3201      	adds	r2, #1
  if (shp->sh_end >= shp->sh_beg) {
 8003ed4:	429e      	cmp	r6, r3
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8003ed6:	eba5 0202 	sub.w	r2, r5, r2
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8003eda:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
  if (shp->sh_end >= shp->sh_beg) {
 8003ede:	db09      	blt.n	8003ef4 <shellThread+0x3f4>
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8003ee0:	42a2      	cmp	r2, r4
 8003ee2:	dc09      	bgt.n	8003ef8 <shellThread+0x3f8>
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8003ee4:	5cc2      	ldrb	r2, [r0, r3]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3301      	adds	r3, #1
  if (pos >= shp->sh_size)
 8003eea:	429d      	cmp	r5, r3
    pos -= shp->sh_size;
 8003eec:	bfd8      	it	le
 8003eee:	1b5b      	suble	r3, r3, r5
  shp->sh_beg = pos;
 8003ef0:	930e      	str	r3, [sp, #56]	; 0x38
 8003ef2:	e7ec      	b.n	8003ece <shellThread+0x3ce>
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8003ef4:	42a1      	cmp	r1, r4
 8003ef6:	ddf5      	ble.n	8003ee4 <shellThread+0x3e4>
  if (length < shp->sh_size - shp->sh_end - 1)
 8003ef8:	1bad      	subs	r5, r5, r6
 8003efa:	3d01      	subs	r5, #1
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8003efc:	3601      	adds	r6, #1
  if (length < shp->sh_size - shp->sh_end - 1)
 8003efe:	42a5      	cmp	r5, r4
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8003f00:	4430      	add	r0, r6
  if (length < shp->sh_size - shp->sh_end - 1)
 8003f02:	dc27      	bgt.n	8003f54 <shellThread+0x454>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, part_len);
 8003f04:	462a      	mov	r2, r5
 8003f06:	4649      	mov	r1, r9
 8003f08:	f7fc fa00 	bl	800030c <memcpy>
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 8003f0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f0e:	1b62      	subs	r2, r4, r5
 8003f10:	eb09 0105 	add.w	r1, r9, r5
 8003f14:	f7fc f9fa 	bl	800030c <memcpy>
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 8003f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f1c:	54d4      	strb	r4, [r2, r3]
  shp->sh_end += length + 1;
 8003f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  if (shp->sh_end >= shp->sh_size)
 8003f20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  shp->sh_end += length + 1;
 8003f22:	3401      	adds	r4, #1
 8003f24:	4414      	add	r4, r2
  if (shp->sh_end >= shp->sh_size)
 8003f26:	429c      	cmp	r4, r3
  shp->sh_end += length + 1;
 8003f28:	940f      	str	r4, [sp, #60]	; 0x3c
    shp->sh_end -= shp->sh_size;
 8003f2a:	bfa8      	it	ge
 8003f2c:	1ae4      	subge	r4, r4, r3
  *(shp->sh_buffer + shp->sh_end) = 0;
 8003f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f30:	9a02      	ldr	r2, [sp, #8]
    shp->sh_end -= shp->sh_size;
 8003f32:	bfa8      	it	ge
 8003f34:	940f      	strge	r4, [sp, #60]	; 0x3c
  *(shp->sh_buffer + shp->sh_end) = 0;
 8003f36:	551a      	strb	r2, [r3, r4]
  shp->sh_cur = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9310      	str	r3, [sp, #64]	; 0x40
      *p = 0;
 8003f3c:	9b02      	ldr	r3, [sp, #8]
 8003f3e:	703b      	strb	r3, [r7, #0]
 8003f40:	e664      	b.n	8003c0c <shellThread+0x10c>
      if (len >= 0) {
 8003f42:	f6ff ae10 	blt.w	8003b66 <shellThread+0x66>
 8003f46:	e785      	b.n	8003e54 <shellThread+0x354>
    *scmp++ = help_cmp;
 8003f48:	9a01      	ldr	r2, [sp, #4]
 8003f4a:	1d13      	adds	r3, r2, #4
 8003f4c:	9305      	str	r3, [sp, #20]
 8003f4e:	6010      	str	r0, [r2, #0]
 8003f50:	469a      	mov	sl, r3
 8003f52:	e6bf      	b.n	8003cd4 <shellThread+0x1d4>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8003f54:	4622      	mov	r2, r4
 8003f56:	4649      	mov	r1, r9
 8003f58:	f7fc f9d8 	bl	800030c <memcpy>
 8003f5c:	e7dc      	b.n	8003f18 <shellThread+0x418>
        chprintf(chp, "Commands: help ");
 8003f5e:	496e      	ldr	r1, [pc, #440]	; (8004118 <shellThread+0x618>)
 8003f60:	4c6e      	ldr	r4, [pc, #440]	; (800411c <shellThread+0x61c>)
    chprintf(chp, "%s ", scp->sc_name);
 8003f62:	4d6f      	ldr	r5, [pc, #444]	; (8004120 <shellThread+0x620>)
        chprintf(chp, "Commands: help ");
 8003f64:	4640      	mov	r0, r8
 8003f66:	f7fe fc03 	bl	8002770 <chprintf>
  while (scp->sc_name != NULL) {
 8003f6a:	4a6e      	ldr	r2, [pc, #440]	; (8004124 <shellThread+0x624>)
    chprintf(chp, "%s ", scp->sc_name);
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4640      	mov	r0, r8
 8003f70:	f7fe fbfe 	bl	8002770 <chprintf>
  while (scp->sc_name != NULL) {
 8003f74:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8003f78:	2a00      	cmp	r2, #0
 8003f7a:	d1f7      	bne.n	8003f6c <shellThread+0x46c>
        if (scp != NULL)
 8003f7c:	9b06      	ldr	r3, [sp, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 809f 	bne.w	80040c2 <shellThread+0x5c2>
        chprintf(chp, SHELL_NEWLINE_STR);
 8003f84:	4963      	ldr	r1, [pc, #396]	; (8004114 <shellThread+0x614>)
 8003f86:	4640      	mov	r0, r8
 8003f88:	f7fe fbf2 	bl	8002770 <chprintf>
 8003f8c:	e66a      	b.n	8003c64 <shellThread+0x164>
 8003f8e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003f92:	9d07      	ldr	r5, [sp, #28]
 8003f94:	465c      	mov	r4, fp
 8003f96:	eb09 0a01 	add.w	sl, r9, r1
    *(line + clen) = 0;
 8003f9a:	9b02      	ldr	r3, [sp, #8]
 8003f9c:	f88a 3000 	strb.w	r3, [sl]
        if (len > 0) {
 8003fa0:	2900      	cmp	r1, #0
 8003fa2:	f43f ade0 	beq.w	8003b66 <shellThread+0x66>
  if (*(scmp + 1) != NULL) {
 8003fa6:	9b01      	ldr	r3, [sp, #4]
          write_completions(scfg, line, p - line);
 8003fa8:	9a00      	ldr	r2, [sp, #0]
  if (*(scmp + 1) != NULL) {
 8003faa:	685b      	ldr	r3, [r3, #4]
          write_completions(scfg, line, p - line);
 8003fac:	f8d2 b000 	ldr.w	fp, [r2]
  if (*(scmp + 1) != NULL) {
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d071      	beq.n	8004098 <shellThread+0x598>
    chprintf(chp, SHELL_NEWLINE_STR);
 8003fb4:	4957      	ldr	r1, [pc, #348]	; (8004114 <shellThread+0x614>)
 8003fb6:	4658      	mov	r0, fp
 8003fb8:	f7fe fbda 	bl	8002770 <chprintf>
    while (*scmp != NULL)
 8003fbc:	9b01      	ldr	r3, [sp, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	b1a2      	cbz	r2, 8003fec <shellThread+0x4ec>
 8003fc2:	4653      	mov	r3, sl
 8003fc4:	9401      	str	r4, [sp, #4]
 8003fc6:	46aa      	mov	sl, r5
      chprintf(chp, " %s", *scmp++);
 8003fc8:	4f57      	ldr	r7, [pc, #348]	; (8004128 <shellThread+0x628>)
 8003fca:	9c05      	ldr	r4, [sp, #20]
 8003fcc:	465d      	mov	r5, fp
 8003fce:	469b      	mov	fp, r3
 8003fd0:	e000      	b.n	8003fd4 <shellThread+0x4d4>
 8003fd2:	3404      	adds	r4, #4
 8003fd4:	4639      	mov	r1, r7
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f7fe fbca 	bl	8002770 <chprintf>
    while (*scmp != NULL)
 8003fdc:	6822      	ldr	r2, [r4, #0]
 8003fde:	2a00      	cmp	r2, #0
 8003fe0:	d1f7      	bne.n	8003fd2 <shellThread+0x4d2>
 8003fe2:	465b      	mov	r3, fp
 8003fe4:	9c01      	ldr	r4, [sp, #4]
 8003fe6:	46ab      	mov	fp, r5
 8003fe8:	4655      	mov	r5, sl
 8003fea:	469a      	mov	sl, r3
    chprintf(chp, SHELL_NEWLINE_STR);
 8003fec:	4949      	ldr	r1, [pc, #292]	; (8004114 <shellThread+0x614>)
 8003fee:	4658      	mov	r0, fp
 8003ff0:	f7fe fbbe 	bl	8002770 <chprintf>
    chprintf(chp, SHELL_PROMPT_STR);
 8003ff4:	494d      	ldr	r1, [pc, #308]	; (800412c <shellThread+0x62c>)
 8003ff6:	4658      	mov	r0, fp
 8003ff8:	f7fe fbba 	bl	8002770 <chprintf>
    chprintf(chp, "%s", line);
 8003ffc:	4944      	ldr	r1, [pc, #272]	; (8004110 <shellThread+0x610>)
 8003ffe:	464a      	mov	r2, r9
 8004000:	4658      	mov	r0, fp
 8004002:	f7fe fbb5 	bl	8002770 <chprintf>
          p = line + len;
 8004006:	4657      	mov	r7, sl
 8004008:	e5ad      	b.n	8003b66 <shellThread+0x66>
 800400a:	4c44      	ldr	r4, [pc, #272]	; (800411c <shellThread+0x61c>)
  while (scp->sc_name != NULL) {
 800400c:	4845      	ldr	r0, [pc, #276]	; (8004124 <shellThread+0x624>)
 800400e:	e003      	b.n	8004018 <shellThread+0x518>
 8004010:	f854 0f08 	ldr.w	r0, [r4, #8]!
 8004014:	2800      	cmp	r0, #0
 8004016:	d046      	beq.n	80040a6 <shellThread+0x5a6>
    if (strcmp(scp->sc_name, name) == 0) {
 8004018:	4629      	mov	r1, r5
 800401a:	f7fc fa15 	bl	8000448 <strcmp>
 800401e:	2800      	cmp	r0, #0
 8004020:	d1f6      	bne.n	8004010 <shellThread+0x510>
      scp->sc_function(chp, argc, argv);
 8004022:	6863      	ldr	r3, [r4, #4]
 8004024:	4631      	mov	r1, r6
 8004026:	aa11      	add	r2, sp, #68	; 0x44
 8004028:	4640      	mov	r0, r8
 800402a:	4798      	blx	r3
      return false;
 800402c:	e61a      	b.n	8003c64 <shellThread+0x164>
 800402e:	46a4      	mov	ip, r4
 8004030:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004034:	9d07      	ldr	r5, [sp, #28]
    *(line + clen) = 0;
 8004036:	f809 c001 	strb.w	ip, [r9, r1]
 800403a:	465c      	mov	r4, fp
 800403c:	eb09 0a01 	add.w	sl, r9, r1
 8004040:	e7b1      	b.n	8003fa6 <shellThread+0x4a6>
      clen = strlen(*scmp);
 8004042:	4650      	mov	r0, sl
 8004044:	f7fc fb7c 	bl	8000740 <strlen>
      while ((c < line + clen) && (c < line + size - 1))
 8004048:	eb09 0a00 	add.w	sl, r9, r0
 800404c:	4557      	cmp	r7, sl
      clen = strlen(*scmp);
 800404e:	4601      	mov	r1, r0
      while ((c < line + clen) && (c < line + size - 1))
 8004050:	d257      	bcs.n	8004102 <shellThread+0x602>
 8004052:	9b03      	ldr	r3, [sp, #12]
 8004054:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004058:	eba3 0c07 	sub.w	ip, r3, r7
 800405c:	463b      	mov	r3, r7
 800405e:	e005      	b.n	800406c <shellThread+0x56c>
 8004060:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8004064:	4293      	cmp	r3, r2
 8004066:	d098      	beq.n	8003f9a <shellThread+0x49a>
 8004068:	f8de b000 	ldr.w	fp, [lr]
        *c++ = *(*scmp + i++);
 800406c:	eb03 020c 	add.w	r2, r3, ip
 8004070:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8004074:	f803 2b01 	strb.w	r2, [r3], #1
      while ((c < line + clen) && (c < line + size - 1))
 8004078:	4553      	cmp	r3, sl
 800407a:	d1f1      	bne.n	8004060 <shellThread+0x560>
      if (c < line + size -1) {
 800407c:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8004080:	459a      	cmp	sl, r3
 8004082:	d28a      	bcs.n	8003f9a <shellThread+0x49a>
        clen++;
 8004084:	3001      	adds	r0, #1
        *c = ' ';
 8004086:	2320      	movs	r3, #32
 8004088:	f88a 3000 	strb.w	r3, [sl]
    *(line + clen) = 0;
 800408c:	9b02      	ldr	r3, [sp, #8]
 800408e:	f809 3000 	strb.w	r3, [r9, r0]
 8004092:	eb09 0a00 	add.w	sl, r9, r0
 8004096:	e786      	b.n	8003fa6 <shellThread+0x4a6>
    chprintf(chp, "%s", line + pos);
 8004098:	463a      	mov	r2, r7
 800409a:	491d      	ldr	r1, [pc, #116]	; (8004110 <shellThread+0x610>)
 800409c:	4658      	mov	r0, fp
 800409e:	f7fe fb67 	bl	8002770 <chprintf>
          p = line + len;
 80040a2:	4657      	mov	r7, sl
 80040a4:	e55f      	b.n	8003b66 <shellThread+0x66>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 80040a6:	9c06      	ldr	r4, [sp, #24]
 80040a8:	b1f4      	cbz	r4, 80040e8 <shellThread+0x5e8>
  while (scp->sc_name != NULL) {
 80040aa:	6820      	ldr	r0, [r4, #0]
 80040ac:	b918      	cbnz	r0, 80040b6 <shellThread+0x5b6>
 80040ae:	e01b      	b.n	80040e8 <shellThread+0x5e8>
 80040b0:	f854 0f08 	ldr.w	r0, [r4, #8]!
 80040b4:	b1c0      	cbz	r0, 80040e8 <shellThread+0x5e8>
    if (strcmp(scp->sc_name, name) == 0) {
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7fc f9c6 	bl	8000448 <strcmp>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d1f7      	bne.n	80040b0 <shellThread+0x5b0>
 80040c0:	e7af      	b.n	8004022 <shellThread+0x522>
  while (scp->sc_name != NULL) {
 80040c2:	9c06      	ldr	r4, [sp, #24]
 80040c4:	6822      	ldr	r2, [r4, #0]
 80040c6:	2a00      	cmp	r2, #0
 80040c8:	f43f af5c 	beq.w	8003f84 <shellThread+0x484>
    chprintf(chp, "%s ", scp->sc_name);
 80040cc:	4d14      	ldr	r5, [pc, #80]	; (8004120 <shellThread+0x620>)
 80040ce:	4629      	mov	r1, r5
 80040d0:	4640      	mov	r0, r8
 80040d2:	f7fe fb4d 	bl	8002770 <chprintf>
  while (scp->sc_name != NULL) {
 80040d6:	f854 2f08 	ldr.w	r2, [r4, #8]!
 80040da:	2a00      	cmp	r2, #0
 80040dc:	d1f7      	bne.n	80040ce <shellThread+0x5ce>
        chprintf(chp, SHELL_NEWLINE_STR);
 80040de:	490d      	ldr	r1, [pc, #52]	; (8004114 <shellThread+0x614>)
 80040e0:	4640      	mov	r0, r8
 80040e2:	f7fe fb45 	bl	8002770 <chprintf>
 80040e6:	e5bd      	b.n	8003c64 <shellThread+0x164>
        chprintf(chp, "%s", cmd);
 80040e8:	4909      	ldr	r1, [pc, #36]	; (8004110 <shellThread+0x610>)
 80040ea:	462a      	mov	r2, r5
 80040ec:	4640      	mov	r0, r8
 80040ee:	f7fe fb3f 	bl	8002770 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 80040f2:	490f      	ldr	r1, [pc, #60]	; (8004130 <shellThread+0x630>)
 80040f4:	4640      	mov	r0, r8
 80040f6:	f7fe fb3b 	bl	8002770 <chprintf>
 80040fa:	e5b3      	b.n	8003c64 <shellThread+0x164>
    *(line + clen) = 0;
 80040fc:	f88d c058 	strb.w	ip, [sp, #88]	; 0x58
 8004100:	e531      	b.n	8003b66 <shellThread+0x66>
      while ((c < line + clen) && (c < line + size - 1))
 8004102:	46ba      	mov	sl, r7
 8004104:	e7be      	b.n	8004084 <shellThread+0x584>
 8004106:	bf00      	nop
 8004108:	080061ac 	.word	0x080061ac
 800410c:	080061b8 	.word	0x080061b8
 8004110:	080061bc 	.word	0x080061bc
 8004114:	08005fa0 	.word	0x08005fa0
 8004118:	080061e4 	.word	0x080061e4
 800411c:	08006528 	.word	0x08006528
 8004120:	080061f4 	.word	0x080061f4
 8004124:	08005ffc 	.word	0x08005ffc
 8004128:	080061c0 	.word	0x080061c0
 800412c:	0800619c 	.word	0x0800619c
 8004130:	080061f8 	.word	0x080061f8
	...

08004140 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004140:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8004144:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004146:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800414a:	2300      	movs	r3, #0
 800414c:	f383 8811 	msr	BASEPRI, r3
}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
	...

08004160 <chThdExit>:
 8004160:	2320      	movs	r3, #32
 8004162:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8004166:	f7fd bb33 	b.w	80017d0 <chThdExitS>
 800416a:	bf00      	nop
 800416c:	0000      	movs	r0, r0
	...

08004170 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8004170:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 8004172:	6810      	ldr	r0, [r2, #0]
 8004174:	6951      	ldr	r1, [r2, #20]
  tqp->next             = tp->queue.next;
 8004176:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8004178:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800417a:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800417c:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800417e:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8004180:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8004184:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 8004186:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8004188:	6150      	str	r0, [r2, #20]
  tp->state = CH_STATE_READY;
 800418a:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800418e:	e000      	b.n	8004192 <chSchDoReschedule+0x22>
 8004190:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	4294      	cmp	r4, r2
 8004196:	d3fb      	bcc.n	8004190 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8004198:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 800419a:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 800419c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 80041a0:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80041a2:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 80041a4:	f7fc b89c 	b.w	80002e0 <_port_switch>
 80041a8:	200013b0 	.word	0x200013b0
 80041ac:	00000000 	.word	0x00000000

080041b0 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 80041b0:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80041b2:	4d1b      	ldr	r5, [pc, #108]	; (8004220 <chMtxUnlock+0x70>)
void chMtxUnlock(mutex_t *mp) {
 80041b4:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 80041b6:	696e      	ldr	r6, [r5, #20]
 80041b8:	2320      	movs	r3, #32
 80041ba:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 80041be:	6800      	ldr	r0, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 80041c0:	68cb      	ldr	r3, [r1, #12]
 80041c2:	63b3      	str	r3, [r6, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80041c4:	4288      	cmp	r0, r1
 80041c6:	d025      	beq.n	8004214 <chMtxUnlock+0x64>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80041c8:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 80041ca:	b14b      	cbz	r3, 80041e0 <chMtxUnlock+0x30>
 80041cc:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <chMtxUnlock+0x2a>
 80041d2:	6892      	ldr	r2, [r2, #8]
 80041d4:	4294      	cmp	r4, r2
 80041d6:	bf38      	it	cc
 80041d8:	4614      	movcc	r4, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80041da:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f5      	bne.n	80041cc <chMtxUnlock+0x1c>
  tqp->next             = tp->queue.next;
 80041e0:	6803      	ldr	r3, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80041e2:	6b82      	ldr	r2, [r0, #56]	; 0x38
      ctp->prio = newprio;
 80041e4:	60b4      	str	r4, [r6, #8]
 80041e6:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80041e8:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 80041ea:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 80041ee:	6381      	str	r1, [r0, #56]	; 0x38

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80041f0:	f7fc fdbe 	bl	8000d70 <chSchReadyI>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 80041f4:	682a      	ldr	r2, [r5, #0]
 80041f6:	696b      	ldr	r3, [r5, #20]
  if (chSchIsRescRequiredI()) {
 80041f8:	6892      	ldr	r2, [r2, #8]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d803      	bhi.n	8004208 <chMtxUnlock+0x58>
 8004200:	2300      	movs	r3, #0
 8004202:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 8004206:	bd70      	pop	{r4, r5, r6, pc}
    chSchDoRescheduleAhead();
 8004208:	f7ff ffb2 	bl	8004170 <chSchDoReschedule>
 800420c:	2300      	movs	r3, #0
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	6083      	str	r3, [r0, #8]
 8004218:	2300      	movs	r3, #0
 800421a:	f383 8811 	msr	BASEPRI, r3
}
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	200013b0 	.word	0x200013b0
	...

08004230 <cmd_mem>:
#if (SHELL_CMD_MEM_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
  size_t n, total, largest;

  (void)argv;
  if (argc > 0) {
 8004230:	2900      	cmp	r1, #0
 8004232:	dc38      	bgt.n	80042a6 <cmd_mem+0x76>
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	4605      	mov	r5, r0
 8004238:	2320      	movs	r3, #32
 800423a:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800423e:	4e1e      	ldr	r6, [pc, #120]	; (80042b8 <cmd_mem+0x88>)
 8004240:	f106 000c 	add.w	r0, r6, #12
 8004244:	f7fd fa64 	bl	8001710 <chMtxLockS>
 8004248:	2400      	movs	r4, #0
 800424a:	f384 8811 	msr	BASEPRI, r4
  H_LOCK(heapp);
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 800424e:	6873      	ldr	r3, [r6, #4]
 8004250:	b36b      	cbz	r3, 80042ae <cmd_mem+0x7e>
  tpages = 0U;
 8004252:	4622      	mov	r2, r4
  n = 0U;
 8004254:	4627      	mov	r7, r4
  while (H_NEXT(qp) != NULL) {
 8004256:	e9d3 3100 	ldrd	r3, r1, [r3]
 800425a:	428c      	cmp	r4, r1
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 800425c:	f107 0701 	add.w	r7, r7, #1
    tpages += pages;
 8004260:	440a      	add	r2, r1
 8004262:	bf38      	it	cc
 8004264:	460c      	movcc	r4, r1
  while (H_NEXT(qp) != NULL) {
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f5      	bne.n	8004256 <cmd_mem+0x26>
 800426a:	00d6      	lsls	r6, r2, #3
 800426c:	00e4      	lsls	r4, r4, #3

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
    *largestp = lpages * CH_HEAP_ALIGNMENT;
  }
  H_UNLOCK(heapp);
 800426e:	4813      	ldr	r0, [pc, #76]	; (80042bc <cmd_mem+0x8c>)
 8004270:	f7ff ff9e 	bl	80041b0 <chMtxUnlock>
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 8004274:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <cmd_mem+0x90>)
    shellUsage(chp, "mem");
    return;
  }
  n = chHeapStatus(NULL, &total, &largest);
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 8004276:	4913      	ldr	r1, [pc, #76]	; (80042c4 <cmd_mem+0x94>)
 8004278:	e9d3 3200 	ldrd	r3, r2, [r3]
 800427c:	4628      	mov	r0, r5
 800427e:	1ad2      	subs	r2, r2, r3
 8004280:	f7fe fa76 	bl	8002770 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 8004284:	463a      	mov	r2, r7
 8004286:	4910      	ldr	r1, [pc, #64]	; (80042c8 <cmd_mem+0x98>)
 8004288:	4628      	mov	r0, r5
 800428a:	f7fe fa71 	bl	8002770 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 800428e:	4632      	mov	r2, r6
 8004290:	490e      	ldr	r1, [pc, #56]	; (80042cc <cmd_mem+0x9c>)
 8004292:	4628      	mov	r0, r5
 8004294:	f7fe fa6c 	bl	8002770 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 8004298:	4622      	mov	r2, r4
 800429a:	4628      	mov	r0, r5
 800429c:	490c      	ldr	r1, [pc, #48]	; (80042d0 <cmd_mem+0xa0>)
}
 800429e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 80042a2:	f7fe ba65 	b.w	8002770 <chprintf>
    shellUsage(chp, "mem");
 80042a6:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <cmd_mem+0xa4>)
 80042a8:	490b      	ldr	r1, [pc, #44]	; (80042d8 <cmd_mem+0xa8>)
 80042aa:	f7fe ba61 	b.w	8002770 <chprintf>
  while (H_NEXT(qp) != NULL) {
 80042ae:	461c      	mov	r4, r3
 80042b0:	461e      	mov	r6, r3
  n = 0U;
 80042b2:	461f      	mov	r7, r3
 80042b4:	e7db      	b.n	800426e <cmd_mem+0x3e>
 80042b6:	bf00      	nop
 80042b8:	20001588 	.word	0x20001588
 80042bc:	20001594 	.word	0x20001594
 80042c0:	20001548 	.word	0x20001548
 80042c4:	08006204 	.word	0x08006204
 80042c8:	08006224 	.word	0x08006224
 80042cc:	0800623c 	.word	0x0800623c
 80042d0:	0800625c 	.word	0x0800625c
 80042d4:	08006200 	.word	0x08006200
 80042d8:	08005fe8 	.word	0x08005fe8
 80042dc:	00000000 	.word	0x00000000

080042e0 <chThdRelease>:
 80042e0:	2220      	movs	r2, #32
 80042e2:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 80042e6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80042ea:	3b01      	subs	r3, #1
 80042ec:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80042f0:	6a03      	ldr	r3, [r0, #32]
 80042f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	d003      	beq.n	8004302 <chThdRelease+0x22>
 80042fa:	2300      	movs	r3, #0
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	4770      	bx	lr
    REG_REMOVE(tp);
 8004302:	e9d0 1303 	ldrd	r1, r3, [r0, #12]
void chThdRelease(thread_t *tp) {
 8004306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    REG_REMOVE(tp);
 800430a:	60d9      	str	r1, [r3, #12]
 800430c:	68c1      	ldr	r1, [r0, #12]
 800430e:	2700      	movs	r7, #0
 8004310:	610b      	str	r3, [r1, #16]
 8004312:	f387 8811 	msr	BASEPRI, r7
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8004316:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d00d      	beq.n	800433e <chThdRelease+0x5e>
 8004322:	2b02      	cmp	r3, #2
 8004324:	d001      	beq.n	800432a <chThdRelease+0x4a>
}
 8004326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 800432a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800432c:	69c1      	ldr	r1, [r0, #28]
 800432e:	f382 8811 	msr	BASEPRI, r2
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	600a      	str	r2, [r1, #0]
  mp->next = php;
 8004336:	6019      	str	r1, [r3, #0]
 8004338:	f387 8811 	msr	BASEPRI, r7
 800433c:	e7f3      	b.n	8004326 <chThdRelease+0x46>
      chHeapFree(chThdGetWorkingAreaX(tp));
 800433e:	69c6      	ldr	r6, [r0, #28]
  heapp = H_HEAP(hp);
 8004340:	e956 0302 	ldrd	r0, r3, [r6, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8004344:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004346:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8004348:	f846 3c04 	str.w	r3, [r6, #-4]
  qp = &heapp->header;
 800434c:	1d05      	adds	r5, r0, #4
  H_LOCK(heapp);
 800434e:	f100 080c 	add.w	r8, r0, #12
  hp = (heap_header_t *)p - 1U;
 8004352:	f1a6 0408 	sub.w	r4, r6, #8
 8004356:	f382 8811 	msr	BASEPRI, r2
 800435a:	4640      	mov	r0, r8
 800435c:	f7fd f9d8 	bl	8001710 <chMtxLockS>
 8004360:	f387 8811 	msr	BASEPRI, r7
  qp = &heapp->header;
 8004364:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 8004366:	429d      	cmp	r5, r3
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8004368:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 800436a:	d001      	beq.n	8004370 <chThdRelease+0x90>
 800436c:	429c      	cmp	r4, r3
 800436e:	d902      	bls.n	8004376 <chThdRelease+0x96>
 8004370:	b11a      	cbz	r2, 800437a <chThdRelease+0x9a>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8004372:	4294      	cmp	r4, r2
 8004374:	d301      	bcc.n	800437a <chThdRelease+0x9a>
    qp = H_NEXT(qp);
 8004376:	4613      	mov	r3, r2
 8004378:	e7f5      	b.n	8004366 <chThdRelease+0x86>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800437a:	f856 1c04 	ldr.w	r1, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 800437e:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 8004382:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8004384:	1c4a      	adds	r2, r1, #1
 8004386:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800438a:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800438e:	4281      	cmp	r1, r0
 8004390:	d011      	beq.n	80043b6 <chThdRelease+0xd6>
      if ((H_LIMIT(qp) == hp)) {
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	1c4a      	adds	r2, r1, #1
 8004396:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800439a:	4294      	cmp	r4, r2
 800439c:	d004      	beq.n	80043a8 <chThdRelease+0xc8>
  H_UNLOCK(heapp);
 800439e:	4640      	mov	r0, r8
}
 80043a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043a4:	f7ff bf04 	b.w	80041b0 <chMtxUnlock>
        H_NEXT(qp) = H_NEXT(hp);
 80043a8:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80043ac:	3201      	adds	r2, #1
 80043ae:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 80043b0:	6018      	str	r0, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80043b2:	6059      	str	r1, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 80043b4:	e7f3      	b.n	800439e <chThdRelease+0xbe>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80043b6:	e9d1 1000 	ldrd	r1, r0, [r1]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80043ba:	4402      	add	r2, r0
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80043bc:	f846 1c08 	str.w	r1, [r6, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80043c0:	f846 2c04 	str.w	r2, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80043c4:	e7e5      	b.n	8004392 <chThdRelease+0xb2>
 80043c6:	bf00      	nop
	...

080043d0 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80043d0:	4bc7      	ldr	r3, [pc, #796]	; (80046f0 <main+0x320>)
  PWR->CR |= PWR_CR_DBP;
 80043d2:	48c8      	ldr	r0, [pc, #800]	; (80046f4 <main+0x324>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	f062 021f 	orn	r2, r2, #31
};

/*
 * Application entry point.
 */
int main(void) {
 80043da:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80043de:	611a      	str	r2, [r3, #16]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	f002 021f 	and.w	r2, r2, #31
 80043e6:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 80043e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80043ec:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	615c      	str	r4, [r3, #20]
 80043f2:	2100      	movs	r1, #0
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	6159      	str	r1, [r3, #20]
 80043f8:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8004400:	621a      	str	r2, [r3, #32]
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004408:	621a      	str	r2, [r3, #32]
 800440a:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 800440c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800440e:	625c      	str	r4, [r3, #36]	; 0x24
 8004410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004412:	6259      	str	r1, [r3, #36]	; 0x24
 8004414:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8004416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004418:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
 800441e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004420:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004424:	661a      	str	r2, [r3, #96]	; 0x60
 8004426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8004428:	6802      	ldr	r2, [r0, #0]
 800442a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442e:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8004430:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004432:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004436:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800443a:	b08d      	sub	sp, #52	; 0x34
 800443c:	d003      	beq.n	8004446 <main+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 800443e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004442:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8004444:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8004446:	4eab      	ldr	r6, [pc, #684]	; (80046f4 <main+0x324>)

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004448:	49ab      	ldr	r1, [pc, #684]	; (80046f8 <main+0x328>)
 800444a:	6870      	ldr	r0, [r6, #4]
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 800444c:	4dab      	ldr	r5, [pc, #684]	; (80046fc <main+0x32c>)
 800444e:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 8004730 <main+0x360>
  usbp->state        = USB_STOP;
 8004452:	4fab      	ldr	r7, [pc, #684]	; (8004700 <main+0x330>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8004454:	4aa6      	ldr	r2, [pc, #664]	; (80046f0 <main+0x320>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8004456:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8004734 <main+0x364>
  tqp->next = (thread_t *)tqp;
 800445a:	4caa      	ldr	r4, [pc, #680]	; (8004704 <main+0x334>)
 800445c:	2360      	movs	r3, #96	; 0x60
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800445e:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8004462:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8004466:	6070      	str	r0, [r6, #4]
 8004468:	f04f 0880 	mov.w	r8, #128	; 0x80
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800446c:	f881 3306 	strb.w	r3, [r1, #774]	; 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004470:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004474:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004478:	f8c1 c000 	str.w	ip, [r1]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800447c:	f44f 7c00 	mov.w	ip, #512	; 0x200
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004480:	f881 3307 	strb.w	r3, [r1, #775]	; 0x307
 8004484:	462e      	mov	r6, r5
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004486:	f8c1 8180 	str.w	r8, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800448a:	f8c1 8000 	str.w	r8, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800448e:	f881 3308 	strb.w	r3, [r1, #776]	; 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004492:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004496:	6008      	str	r0, [r1, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004498:	f881 3309 	strb.w	r3, [r1, #777]	; 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800449c:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044a0:	f8c1 c000 	str.w	ip, [r1]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044a4:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80044a8:	f881 330a 	strb.w	r3, [r1, #778]	; 0x30a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044ac:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044b0:	f8c1 c000 	str.w	ip, [r1]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044b4:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80044b8:	f881 3317 	strb.w	r3, [r1, #791]	; 0x317
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044bc:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044c0:	f8c1 c000 	str.w	ip, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80044c4:	f881 3328 	strb.w	r3, [r1, #808]	; 0x328
 80044c8:	f105 0c0c 	add.w	ip, r5, #12
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044cc:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
  iqp->q_buffer  = bp;
 80044d0:	f105 0354 	add.w	r3, r5, #84	; 0x54
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044d4:	6048      	str	r0, [r1, #4]
 80044d6:	f846 eb04 	str.w	lr, [r6], #4
  tqp->prev = (thread_t *)tqp;
 80044da:	e9c5 cc03 	strd	ip, ip, [r5, #12]
  iqp->q_top     = bp + size;
 80044de:	f505 7eaa 	add.w	lr, r5, #340	; 0x154
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80044e2:	f04f 0c01 	mov.w	ip, #1
  iqp->q_wrptr   = bp;
 80044e6:	e9c5 3308 	strd	r3, r3, [r5, #32]
  iqp->q_buffer  = bp;
 80044ea:	61ab      	str	r3, [r5, #24]
  iqp->q_counter = 0;
 80044ec:	2300      	movs	r3, #0
  esp->next = (event_listener_t *)esp;
 80044ee:	606e      	str	r6, [r5, #4]
 80044f0:	f885 c008 	strb.w	ip, [r5, #8]
 80044f4:	616b      	str	r3, [r5, #20]
  iqp->q_top     = bp + size;
 80044f6:	f8c5 e01c 	str.w	lr, [r5, #28]
 80044fa:	f887 c000 	strb.w	ip, [r7]
  oqp->q_counter = size;
 80044fe:	63a8      	str	r0, [r5, #56]	; 0x38
  ST_ENABLE_CLOCK();
 8004500:	6c10      	ldr	r0, [r2, #64]	; 0x40
  oqp->q_buffer  = bp;
 8004502:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
 8004506:	ea40 000c 	orr.w	r0, r0, ip
 800450a:	6410      	str	r0, [r2, #64]	; 0x40
 800450c:	6e10      	ldr	r0, [r2, #96]	; 0x60
  oqp->q_rdptr   = bp;
 800450e:	f8c5 e048 	str.w	lr, [r5, #72]	; 0x48
 8004512:	ea40 000c 	orr.w	r0, r0, ip
 8004516:	6610      	str	r0, [r2, #96]	; 0x60
 8004518:	6e12      	ldr	r2, [r2, #96]	; 0x60
  ST_ENABLE_STOP();
 800451a:	f8d9 0008 	ldr.w	r0, [r9, #8]
  oqp->q_wrptr   = bp;
 800451e:	f8c5 e044 	str.w	lr, [r5, #68]	; 0x44
  oqp->q_top     = bp + size;
 8004522:	f505 7e15 	add.w	lr, r5, #596	; 0x254
 8004526:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 800452a:	f8df e20c 	ldr.w	lr, [pc, #524]	; 8004738 <main+0x368>
 800452e:	f8c5 e04c 	str.w	lr, [r5, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8004532:	f8df e208 	ldr.w	lr, [pc, #520]	; 800473c <main+0x36c>
 8004536:	f8c5 e254 	str.w	lr, [r5, #596]	; 0x254
  USBD1.otg       = OTG_FS;
 800453a:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
 800453e:	f8c7 e054 	str.w	lr, [r7, #84]	; 0x54
 8004542:	ea40 000c 	orr.w	r0, r0, ip
  USBD1.otgparams = &fsparams;
 8004546:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8004740 <main+0x370>
    usbp->in_params[i]  = NULL;
 800454a:	61fb      	str	r3, [r7, #28]
  iqp->q_link    = link;
 800454c:	e9c5 350a 	strd	r3, r5, [r5, #40]	; 0x28
  usbp->transmitting = 0;
 8004550:	e9c7 3301 	strd	r3, r3, [r7, #4]
    usbp->out_params[i] = NULL;
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
    usbp->in_params[i]  = NULL;
 8004556:	623b      	str	r3, [r7, #32]
    usbp->out_params[i] = NULL;
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800455c:	633b      	str	r3, [r7, #48]	; 0x30
 800455e:	f8c7 e058 	str.w	lr, [r7, #88]	; 0x58
  oqp->q_link    = link;
 8004562:	652d      	str	r5, [r5, #80]	; 0x50
  tqp->next = (thread_t *)tqp;
 8004564:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8004568:	f8c9 0008 	str.w	r0, [r9, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800456c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  tqp->prev = (thread_t *)tqp;
 8004570:	e9c5 ee0c 	strd	lr, lr, [r5, #48]	; 0x30
 8004574:	f242 0ecf 	movw	lr, #8399	; 0x20cf
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8004578:	4e63      	ldr	r6, [pc, #396]	; (8004708 <main+0x338>)
 800457a:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800457e:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
  tqp->next = (thread_t *)tqp;
 8004582:	4a62      	ldr	r2, [pc, #392]	; (800470c <main+0x33c>)
 8004584:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8004588:	6183      	str	r3, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800458a:	6343      	str	r3, [r0, #52]	; 0x34
  tqp->prev = (thread_t *)tqp;
 800458c:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 800458e:	60c3      	str	r3, [r0, #12]
  ch.rlist.prio = NOPRIO;
 8004590:	60a3      	str	r3, [r4, #8]
  STM32_ST_TIM->CR2    = 0;
 8004592:	6043      	str	r3, [r0, #4]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8004594:	60e4      	str	r4, [r4, #12]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8004596:	f8c0 c014 	str.w	ip, [r0, #20]
  ch.rlist.older = (thread_t *)&ch.rlist;
 800459a:	6124      	str	r4, [r4, #16]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800459c:	f8c0 c000 	str.w	ip, [r0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80045a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80045a4:	f881 831c 	strb.w	r8, [r1, #796]	; 0x31c
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80045a8:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
  ch.vtlist.delta = (sysinterval_t)-1;
 80045ac:	f8c4 e020 	str.w	lr, [r4, #32]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80045b0:	6008      	str	r0, [r1, #0]
  tqp->next = (thread_t *)tqp;
 80045b2:	f106 010c 	add.w	r1, r6, #12
  ch_memcore.basemem = __heap_base__;
 80045b6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8004744 <main+0x374>
 80045ba:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8004748 <main+0x378>
 80045be:	f8c6 8000 	str.w	r8, [r6]
  tqp->prev = (thread_t *)tqp;
 80045c2:	e9c6 1103 	strd	r1, r1, [r6, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80045c6:	f102 0c10 	add.w	ip, r2, #16
  mp->object_size = size;
 80045ca:	2014      	movs	r0, #20
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80045cc:	f104 0118 	add.w	r1, r4, #24
 80045d0:	e9c2 c304 	strd	ip, r3, [r2, #16]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80045d4:	e9c4 1106 	strd	r1, r1, [r4, #24]
  mp->provider = provider;
 80045d8:	f8df c170 	ldr.w	ip, [pc, #368]	; 800474c <main+0x37c>
  ch_memcore.topmem  = __heap_end__;
 80045dc:	494c      	ldr	r1, [pc, #304]	; (8004710 <main+0x340>)
  mp->object_size = size;
 80045de:	6190      	str	r0, [r2, #24]
  ch_memcore.basemem = __heap_base__;
 80045e0:	484c      	ldr	r0, [pc, #304]	; (8004714 <main+0x344>)
 80045e2:	f8c9 0000 	str.w	r0, [r9]
  ch_memcore.topmem  = __heap_end__;
 80045e6:	f8c9 1004 	str.w	r1, [r9, #4]
  mp->align = align;
 80045ea:	f04f 0804 	mov.w	r8, #4
  tmp->cumulative = (rttime_t)0;
 80045ee:	2000      	movs	r0, #0
 80045f0:	2100      	movs	r1, #0
  H_PAGES(&default_heap.header) = 0;
 80045f2:	e9c6 3301 	strd	r3, r3, [r6, #4]
  ch.vtlist.lasttime = (systime_t)0;
 80045f6:	6263      	str	r3, [r4, #36]	; 0x24
  mp->owner = NULL;
 80045f8:	6173      	str	r3, [r6, #20]
 80045fa:	6093      	str	r3, [r2, #8]
 80045fc:	e9c2 2200 	strd	r2, r2, [r2]
  tqp->next = (thread_t *)tqp;
 8004600:	6024      	str	r4, [r4, #0]
 8004602:	f8c2 801c 	str.w	r8, [r2, #28]
  mp->provider = provider;
 8004606:	f8c2 c020 	str.w	ip, [r2, #32]
 800460a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800460e:	e9c2 8c0d 	strd	r8, ip, [r2, #52]	; 0x34
 8004612:	f102 0140 	add.w	r1, r2, #64	; 0x40
 8004616:	f102 0c3c 	add.w	ip, r2, #60	; 0x3c
 800461a:	e9c2 c10f 	strd	ip, r1, [r2, #60]	; 0x3c
  tmp->last       = (rtcnt_t)0;
 800461e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004622:	f102 0a24 	add.w	sl, r2, #36	; 0x24
 8004626:	f102 0928 	add.w	r9, r2, #40	; 0x28
  mp->object_size = size;
 800462a:	201c      	movs	r0, #28
  mp->next = NULL;
 800462c:	62d3      	str	r3, [r2, #44]	; 0x2c
  ch.tm.offset = (rtcnt_t)0;
 800462e:	6723      	str	r3, [r4, #112]	; 0x70
  tmp->n          = (ucnt_t)0;
 8004630:	9309      	str	r3, [sp, #36]	; 0x24
 8004632:	f102 0344 	add.w	r3, r2, #68	; 0x44
  tmp->best       = (rtcnt_t)-1;
 8004636:	f8cd e018 	str.w	lr, [sp, #24]
 800463a:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
 800463e:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
  mp->object_size = size;
 8004642:	6310      	str	r0, [r2, #48]	; 0x30
 8004644:	6453      	str	r3, [r2, #68]	; 0x44
    chTMStartMeasurementX(&tm);
 8004646:	a806      	add	r0, sp, #24
 8004648:	f7fc fb12 	bl	8000c70 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800464c:	a806      	add	r0, sp, #24
 800464e:	f7fc fae7 	bl	8000c20 <chTMStopMeasurementX>
  } while (i > 0U);
 8004652:	f1b8 0801 	subs.w	r8, r8, #1
 8004656:	d1f6      	bne.n	8004646 <main+0x276>
  REG_INSERT(tp);
 8004658:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <main+0x348>)
 800465a:	6920      	ldr	r0, [r4, #16]
  ch.tm.offset = tm.best;
 800465c:	9906      	ldr	r1, [sp, #24]
  tp->name      = name;
 800465e:	4a2f      	ldr	r2, [pc, #188]	; (800471c <main+0x34c>)
 8004660:	6721      	str	r1, [r4, #112]	; 0x70
  tp->prio      = prio;
 8004662:	f04f 0c80 	mov.w	ip, #128	; 0x80
  tp->refs      = (trefs_t)1;
 8004666:	2101      	movs	r1, #1
  tp->prio      = prio;
 8004668:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
  tp->realprio  = prio;
 800466c:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
  tp->name      = name;
 8004670:	6462      	str	r2, [r4, #68]	; 0x44
  tlp->next = (thread_t *)tlp;
 8004672:	f103 0c28 	add.w	ip, r3, #40	; 0x28
  tqp->next = (thread_t *)tqp;
 8004676:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  tp->epending  = (eventmask_t)0;
 800467a:	e9c4 8818 	strd	r8, r8, [r4, #96]	; 0x60
  REG_INSERT(tp);
 800467e:	e9c4 400e 	strd	r4, r0, [r4, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
 8004682:	f884 804d 	strb.w	r8, [r4, #77]	; 0x4d
  tp->refs      = (trefs_t)1;
 8004686:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
 800468a:	f04f 0920 	mov.w	r9, #32
  REG_INSERT(tp);
 800468e:	60c3      	str	r3, [r0, #12]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8004690:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8004694:	e9c4 c215 	strd	ip, r2, [r4, #84]	; 0x54
  currp->state = CH_STATE_CURRENT;
 8004698:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
  currp->wabase = NULL;
 800469c:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  tqp->prev = (thread_t *)tqp;
 80046a0:	65e2      	str	r2, [r4, #92]	; 0x5c
 80046a2:	f389 8811 	msr	BASEPRI, r9
  __ASM volatile ("cpsie i" : : : "memory");
 80046a6:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046a8:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <main+0x350>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80046aa:	4a1e      	ldr	r2, [pc, #120]	; (8004724 <main+0x354>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046ac:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ae:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 80046b2:	4001      	ands	r1, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80046b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 80046b8:	430a      	orrs	r2, r1
 80046ba:	f6a0 300f 	subw	r0, r0, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80046be:	60da      	str	r2, [r3, #12]
 80046c0:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80046c2:	4919      	ldr	r1, [pc, #100]	; (8004728 <main+0x358>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80046c4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80046c8:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80046ca:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046cc:	2010      	movs	r0, #16
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	600a      	str	r2, [r1, #0]
 80046d4:	77d8      	strb	r0, [r3, #31]
 80046d6:	f883 9022 	strb.w	r9, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80046da:	f388 8811 	msr	BASEPRI, r8
  __ASM volatile ("cpsie i" : : : "memory");
 80046de:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80046e0:	f389 8811 	msr	BASEPRI, r9
  tp = chThdCreateSuspendedI(tdp);
 80046e4:	4811      	ldr	r0, [pc, #68]	; (800472c <main+0x35c>)
 80046e6:	f7fc facb 	bl	8000c80 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 80046ea:	f7fc ffc9 	bl	8001680 <chSchWakeupS.constprop.0>
 80046ee:	e02f      	b.n	8004750 <main+0x380>
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40007000 	.word	0x40007000
 80046f8:	e000e100 	.word	0xe000e100
 80046fc:	20000c40 	.word	0x20000c40
 8004700:	2000132c 	.word	0x2000132c
 8004704:	200013b0 	.word	0x200013b0
 8004708:	20001588 	.word	0x20001588
 800470c:	20001424 	.word	0x20001424
 8004710:	20010000 	.word	0x20010000
 8004714:	20009930 	.word	0x20009930
 8004718:	200013dc 	.word	0x200013dc
 800471c:	080063d0 	.word	0x080063d0
 8004720:	e000ed00 	.word	0xe000ed00
 8004724:	05fa0300 	.word	0x05fa0300
 8004728:	e0001000 	.word	0xe0001000
 800472c:	08006474 	.word	0x08006474
 8004730:	080066cc 	.word	0x080066cc
 8004734:	e0042000 	.word	0xe0042000
 8004738:	080008f1 	.word	0x080008f1
 800473c:	40004400 	.word	0x40004400
 8004740:	08006464 	.word	0x08006464
 8004744:	20001548 	.word	0x20001548
 8004748:	080008b1 	.word	0x080008b1
 800474c:	08000bf1 	.word	0x08000bf1
 8004750:	f388 8811 	msr	BASEPRI, r8
 8004754:	f389 8811 	msr	BASEPRI, r9
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8004758:	7a2b      	ldrb	r3, [r5, #8]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d111      	bne.n	8004782 <main+0x3b2>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 800475e:	4bb8      	ldr	r3, [pc, #736]	; (8004a40 <main+0x670>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004760:	4ab8      	ldr	r2, [pc, #736]	; (8004a44 <main+0x674>)
 8004762:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004764:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004768:	6419      	str	r1, [r3, #64]	; 0x40
 800476a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800476c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004770:	6619      	str	r1, [r3, #96]	; 0x60
 8004772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004774:	21c0      	movs	r1, #192	; 0xc0
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004776:	2340      	movs	r3, #64	; 0x40
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004778:	f882 1326 	strb.w	r1, [r2, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800477c:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004780:	6053      	str	r3, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 8004782:	f8d5 2254 	ldr.w	r2, [r5, #596]	; 0x254
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8004786:	4bb0      	ldr	r3, [pc, #704]	; (8004a48 <main+0x678>)
 8004788:	429a      	cmp	r2, r3
 800478a:	f000 8266 	beq.w	8004c5a <main+0x88a>
 800478e:	49af      	ldr	r1, [pc, #700]	; (8004a4c <main+0x67c>)
    fck = STM32_PCLK2 / config->speed;
 8004790:	f240 23d9 	movw	r3, #729	; 0x2d9
 8004794:	428a      	cmp	r2, r1
 8004796:	bf18      	it	ne
 8004798:	f44f 73b6 	movne.w	r3, #364	; 0x16c
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800479c:	2040      	movs	r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800479e:	f04f 0801 	mov.w	r8, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80047a2:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 80047a6:	f04f 0a00 	mov.w	sl, #0
  u->BRR = fck;
 80047aa:	6093      	str	r3, [r2, #8]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 80047ac:	f04f 0902 	mov.w	r9, #2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80047b0:	6110      	str	r0, [r2, #16]
 80047b2:	23ff      	movs	r3, #255	; 0xff
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80047b4:	f8c2 8014 	str.w	r8, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80047b8:	60d1      	str	r1, [r2, #12]
  u->SR = 0;
 80047ba:	f8c2 a000 	str.w	sl, [r2]
  (void)u->SR;  /* SR reset step 1.*/
 80047be:	6811      	ldr	r1, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80047c0:	6852      	ldr	r2, [r2, #4]
 80047c2:	f885 3258 	strb.w	r3, [r5, #600]	; 0x258
 80047c6:	f885 9008 	strb.w	r9, [r5, #8]
 80047ca:	f38a 8811 	msr	BASEPRI, sl
      0,
      0
  };

  sdStart(&SHELLPORT, &serial_config6);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 80047ce:	48a0      	ldr	r0, [pc, #640]	; (8004a50 <main+0x680>)
	//chprintf(dbg, "\r\n");
}

void xsvf_init(void){
  palSetLineMode(TDO, PAL_MODE_INPUT);
  TDI_IDLE;
 80047d0:	4da0      	ldr	r5, [pc, #640]	; (8004a54 <main+0x684>)
 80047d2:	f240 3282 	movw	r2, #898	; 0x382
 80047d6:	2104      	movs	r1, #4
 80047d8:	f7fc fc7a 	bl	80010d0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 80047dc:	489c      	ldr	r0, [pc, #624]	; (8004a50 <main+0x680>)
 80047de:	f240 3282 	movw	r2, #898	; 0x382
 80047e2:	2108      	movs	r1, #8
 80047e4:	f7fc fc74 	bl	80010d0 <_pal_lld_setgroupmode>
  palSetLineMode(TDO, PAL_MODE_INPUT);
 80047e8:	4652      	mov	r2, sl
 80047ea:	4641      	mov	r1, r8
 80047ec:	2020      	movs	r0, #32
 80047ee:	f7fc fc6f 	bl	80010d0 <_pal_lld_setgroupmode>
  TMS_IDLE;
  TCK_IDLE;
 80047f2:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  TMS_IDLE;
 80047f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  TDI_IDLE;
 80047fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047fe:	8369      	strh	r1, [r5, #26]
  palSetLineMode(TDI_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8004800:	4628      	mov	r0, r5
  TMS_IDLE;
 8004802:	836b      	strh	r3, [r5, #26]
  palSetLineMode(TDI_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8004804:	2219      	movs	r2, #25
  TCK_IDLE;
 8004806:	f8a5 b01a 	strh.w	fp, [r5, #26]
  palSetLineMode(TDI_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800480a:	f7fc fc61 	bl	80010d0 <_pal_lld_setgroupmode>
  palSetLineMode(TMS_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800480e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004812:	4619      	mov	r1, r3
 8004814:	2219      	movs	r2, #25
 8004816:	f7fc fc5b 	bl	80010d0 <_pal_lld_setgroupmode>
  palSetLineMode(TCK_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800481a:	4659      	mov	r1, fp
 800481c:	2219      	movs	r2, #25
 800481e:	f7fc fc57 	bl	80010d0 <_pal_lld_setgroupmode>
  xsvf_init();

  chprintf(dbg, "\r\nXSVF Player: %i.%i \r\nSystem started. (Shell)\r\n", VMAJOR, VMINOR);
 8004822:	4653      	mov	r3, sl
 8004824:	4642      	mov	r2, r8
 8004826:	498c      	ldr	r1, [pc, #560]	; (8004a58 <main+0x688>)
 8004828:	488c      	ldr	r0, [pc, #560]	; (8004a5c <main+0x68c>)
  obqp->notify    = onfy;
 800482a:	f8df b258 	ldr.w	fp, [pc, #600]	; 8004a84 <main+0x6b4>
 800482e:	f7fd ff9f 	bl	8002770 <chprintf>
  sdup->vmt = &vmt;
 8004832:	4a8b      	ldr	r2, [pc, #556]	; (8004a60 <main+0x690>)
 8004834:	4b8b      	ldr	r3, [pc, #556]	; (8004a64 <main+0x694>)
  ibqp->notify    = infy;
 8004836:	f8df c250 	ldr.w	ip, [pc, #592]	; 8004a88 <main+0x6b8>
 800483a:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
 800483e:	4610      	mov	r0, r2
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004840:	f202 458c 	addw	r5, r2, #1164	; 0x48c
 8004844:	f840 3b04 	str.w	r3, [r0], #4
  ibqp->brdptr    = bp;
 8004848:	f102 017c 	add.w	r1, r2, #124	; 0x7c
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800484c:	f502 7321 	add.w	r3, r2, #644	; 0x284
  tqp->next = (thread_t *)tqp;
 8004850:	f102 0e0c 	add.w	lr, r2, #12
 8004854:	f102 0c44 	add.w	ip, r2, #68	; 0x44
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004858:	65d5      	str	r5, [r2, #92]	; 0x5c
  ibqp->bsize     = size + sizeof (size_t);
 800485a:	f44f 7582 	mov.w	r5, #260	; 0x104
  ibqp->bcounter  = 0;
 800485e:	f8c2 a018 	str.w	sl, [r2, #24]
  ibqp->bsize     = size + sizeof (size_t);
 8004862:	6295      	str	r5, [r2, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 8004864:	6615      	str	r5, [r2, #96]	; 0x60
  ibqp->top       = NULL;
 8004866:	e9c2 aa0d 	strd	sl, sl, [r2, #52]	; 0x34
  obqp->top       = NULL;
 800486a:	e9c2 aa1b 	strd	sl, sl, [r2, #108]	; 0x6c
  tqp->prev = (thread_t *)tqp;
 800486e:	e9c2 ee03 	strd	lr, lr, [r2, #12]
  ibqp->bwrptr    = bp;
 8004872:	e9c2 1107 	strd	r1, r1, [r2, #28]
  obqp->bwrptr    = bp;
 8004876:	e9c2 3315 	strd	r3, r3, [r2, #84]	; 0x54
 800487a:	e9c2 cc11 	strd	ip, ip, [r2, #68]	; 0x44
  sdup->state = SDU_STOP;
 800487e:	f882 8008 	strb.w	r8, [r2, #8]
  ibqp->suspended = suspended;
 8004882:	f882 8014 	strb.w	r8, [r2, #20]
  ibqp->bn        = n;
 8004886:	f8c2 902c 	str.w	r9, [r2, #44]	; 0x2c
  obqp->suspended = suspended;
 800488a:	f882 804c 	strb.w	r8, [r2, #76]	; 0x4c
  obqp->bcounter  = n;
 800488e:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  obqp->bn        = n;
 8004892:	f8c2 9064 	str.w	r9, [r2, #100]	; 0x64
  ibqp->link      = link;
 8004896:	6412      	str	r2, [r2, #64]	; 0x40
  obqp->link      = link;
 8004898:	6792      	str	r2, [r2, #120]	; 0x78
  obqp->notify    = onfy;
 800489a:	f8c2 b074 	str.w	fp, [r2, #116]	; 0x74
 800489e:	6050      	str	r0, [r2, #4]
  ibqp->buffers   = bp;
 80048a0:	6311      	str	r1, [r2, #48]	; 0x30
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80048a2:	6253      	str	r3, [r2, #36]	; 0x24
  obqp->buffers   = bp;
 80048a4:	6693      	str	r3, [r2, #104]	; 0x68
 80048a6:	2520      	movs	r5, #32
 80048a8:	f385 8811 	msr	BASEPRI, r5
  sdup->config = config;
 80048ac:	4b6e      	ldr	r3, [pc, #440]	; (8004a68 <main+0x698>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 80048ae:	623a      	str	r2, [r7, #32]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 80048b0:	62fa      	str	r2, [r7, #44]	; 0x2c
    usbp->in_params[config->int_in - 1U]  = sdup;
 80048b2:	61fa      	str	r2, [r7, #28]
  sdup->state = SDU_READY;
 80048b4:	f882 9008 	strb.w	r9, [r2, #8]
  sdup->config = config;
 80048b8:	f8c2 348c 	str.w	r3, [r2, #1164]	; 0x48c
 80048bc:	f38a 8811 	msr	BASEPRI, sl
  sduObjectInit(&OSTRICHPORT);
  sduStart(&OSTRICHPORT, &serusbcfg1);
//  palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
//  palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));

  usbDisconnectBus(serusbcfg1.usbp);
 80048c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80048c4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80048c8:	6393      	str	r3, [r2, #56]	; 0x38
  chThdSleepMilliseconds(1500);
 80048ca:	f643 2098 	movw	r0, #15000	; 0x3a98
 80048ce:	f7fd f987 	bl	8001be0 <chThdSleep>
 80048d2:	f385 8811 	msr	BASEPRI, r5
  if (usbp->state == USB_STOP) {
 80048d6:	783b      	ldrb	r3, [r7, #0]
  usbp->config = config;
 80048d8:	4a64      	ldr	r2, [pc, #400]	; (8004a6c <main+0x69c>)
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	4543      	cmp	r3, r8
    usbp->epc[i] = NULL;
 80048de:	e9c7 aa03 	strd	sl, sl, [r7, #12]
 80048e2:	e9c7 aa05 	strd	sl, sl, [r7, #20]
 80048e6:	f000 812d 	beq.w	8004b44 <main+0x774>
  usbp->state = USB_READY;
 80048ea:	f04f 0c02 	mov.w	ip, #2
 80048ee:	f887 c000 	strb.w	ip, [r7]
 80048f2:	2500      	movs	r5, #0
 80048f4:	f385 8811 	msr	BASEPRI, r5
  usbStart(serusbcfg1.usbp, &usbcfg);
  usbConnectBus(serusbcfg1.usbp);
 80048f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048fa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80048fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004900:	6393      	str	r3, [r2, #56]	; 0x38
 8004902:	2720      	movs	r7, #32
 8004904:	f387 8811 	msr	BASEPRI, r7
  tp->wabase = (stkalign_t *)wsp;
 8004908:	4b59      	ldr	r3, [pc, #356]	; (8004a70 <main+0x6a0>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800490a:	495a      	ldr	r1, [pc, #360]	; (8004a74 <main+0x6a4>)
  REG_INSERT(tp);
 800490c:	6922      	ldr	r2, [r4, #16]
  tp->mtxlist   = NULL;
 800490e:	f248 0eb8 	movw	lr, #32952	; 0x80b8
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004912:	f248 0860 	movw	r8, #32864	; 0x8060
  tp->mtxlist   = NULL;
 8004916:	f843 500e 	str.w	r5, [r3, lr]
  tp->state     = CH_STATE_WTSTART;
 800491a:	f248 0ea0 	movw	lr, #32928	; 0x80a0
  REG_INSERT(tp);
 800491e:	f101 0024 	add.w	r0, r1, #36	; 0x24
  tp->state     = CH_STATE_WTSTART;
 8004922:	f823 c00e 	strh.w	ip, [r3, lr]
  REG_INSERT(tp);
 8004926:	f248 0c8c 	movw	ip, #32908	; 0x808c
  tp->wabase = (stkalign_t *)wsp;
 800492a:	f248 0e9c 	movw	lr, #32924	; 0x809c
  REG_INSERT(tp);
 800492e:	f843 400c 	str.w	r4, [r3, ip]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004932:	f248 0c94 	movw	ip, #32916	; 0x8094
  tp->wabase = (stkalign_t *)wsp;
 8004936:	f843 300e 	str.w	r3, [r3, lr]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800493a:	f843 100c 	str.w	r1, [r3, ip]
 800493e:	f248 0e7c 	movw	lr, #32892	; 0x807c
 8004942:	f8df c148 	ldr.w	ip, [pc, #328]	; 8004a8c <main+0x6bc>
 8004946:	f8c1 c000 	str.w	ip, [r1]
 800494a:	494b      	ldr	r1, [pc, #300]	; (8004a78 <main+0x6a8>)
 800494c:	f843 100e 	str.w	r1, [r3, lr]
  tp->prio      = prio;
 8004950:	f248 0c88 	movw	ip, #32904	; 0x8088
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004954:	f843 5008 	str.w	r5, [r3, r8]
  tp->realprio  = prio;
 8004958:	f248 0ebc 	movw	lr, #32956	; 0x80bc
  tp->prio      = prio;
 800495c:	2180      	movs	r1, #128	; 0x80
  tp->epending  = (eventmask_t)0;
 800495e:	f248 08b4 	movw	r8, #32948	; 0x80b4
  tp->prio      = prio;
 8004962:	f843 100c 	str.w	r1, [r3, ip]
  tp->refs      = (trefs_t)1;
 8004966:	f248 0ca2 	movw	ip, #32930	; 0x80a2
  tp->epending  = (eventmask_t)0;
 800496a:	f843 5008 	str.w	r5, [r3, r8]
  tp->realprio  = prio;
 800496e:	f843 100e 	str.w	r1, [r3, lr]
  tp->refs      = (trefs_t)1;
 8004972:	f04f 0801 	mov.w	r8, #1
  tp->name      = name;
 8004976:	f248 0198 	movw	r1, #32920	; 0x8098
  tp->refs      = (trefs_t)1;
 800497a:	f803 800c 	strb.w	r8, [r3, ip]
  tp->name      = name;
 800497e:	f8df c110 	ldr.w	ip, [pc, #272]	; 8004a90 <main+0x6c0>
 8004982:	f843 c001 	str.w	ip, [r3, r1]
  REG_INSERT(tp);
 8004986:	f248 0c90 	movw	ip, #32912	; 0x8090
  tlp->next = (thread_t *)tlp;
 800498a:	f248 01a8 	movw	r1, #32936	; 0x80a8
 800498e:	f843 200c 	str.w	r2, [r3, ip]
 8004992:	60d0      	str	r0, [r2, #12]
 8004994:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8004998:	505a      	str	r2, [r3, r1]
  tqp->next = (thread_t *)tqp;
 800499a:	f248 0cac 	movw	ip, #32940	; 0x80ac
  tqp->prev = (thread_t *)tqp;
 800499e:	f248 01b0 	movw	r1, #32944	; 0x80b0
  tqp->next = (thread_t *)tqp;
 80049a2:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 80049a6:	f843 200c 	str.w	r2, [r3, ip]
  tqp->prev = (thread_t *)tqp;
 80049aa:	505a      	str	r2, [r3, r1]
 80049ac:	6120      	str	r0, [r4, #16]
  chSchWakeupS(tp, MSG_OK);
 80049ae:	f7fc fe67 	bl	8001680 <chSchWakeupS.constprop.0>
 80049b2:	f385 8811 	msr	BASEPRI, r5
 80049b6:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <main+0x6ac>)
 80049b8:	601b      	str	r3, [r3, #0]
 80049ba:	f387 8811 	msr	BASEPRI, r7
  esp->next     = elp;
 80049be:	aa01      	add	r2, sp, #4
  elp->next     = esp->next;
 80049c0:	6819      	ldr	r1, [r3, #0]
  esp->next     = elp;
 80049c2:	601a      	str	r2, [r3, #0]
  elp->wflags   = wflags;
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->listener = currp;
 80049c8:	6963      	ldr	r3, [r4, #20]
  elp->events   = events;
 80049ca:	f8cd 800c 	str.w	r8, [sp, #12]
  elp->flags    = (eventflags_t)0;
 80049ce:	9504      	str	r5, [sp, #16]
  elp->next     = esp->next;
 80049d0:	9101      	str	r1, [sp, #4]
  elp->listener = currp;
 80049d2:	9302      	str	r3, [sp, #8]
  elp->wflags   = wflags;
 80049d4:	9005      	str	r0, [sp, #20]
 80049d6:	f385 8811 	msr	BASEPRI, r5
 80049da:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004a94 <main+0x6c4>
  chMtxLockS(mp);
 80049de:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8004a98 <main+0x6c8>
  thread_t *shelltp = NULL;
 80049e2:	46ab      	mov	fp, r5
 80049e4:	463d      	mov	r5, r7
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
                                    "shell", NORMALPRIO + 1,
                                    shellThread, (void *)&shell_cfg1);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 80049e6:	465f      	mov	r7, fp
    if (!shelltp)
 80049e8:	f1bb 0f00 	cmp.w	fp, #0
 80049ec:	d01b      	beq.n	8004a26 <main+0x656>
    else if (chThdTerminatedX(shelltp)) {
 80049ee:	f89b 3020 	ldrb.w	r3, [fp, #32]
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	f000 8094 	beq.w	8004b20 <main+0x750>
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 80049f8:	f8d4 9014 	ldr.w	r9, [r4, #20]
 80049fc:	f385 8811 	msr	BASEPRI, r5
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8004a00:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8004a04:	07da      	lsls	r2, r3, #31
 8004a06:	f140 8091 	bpl.w	8004b2c <main+0x75c>
 8004a0a:	f06f 0201 	mvn.w	r2, #1
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8004a0e:	4013      	ands	r3, r2
 8004a10:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 8004a14:	f387 8811 	msr	BASEPRI, r7
    }
#endif
    /* Waiting for an exit event then freeing terminated shells.*/
    chEvtWaitAny(EVENT_MASK(0));
    if (chThdTerminatedX(shelltp)) {
 8004a18:	f89b 3020 	ldrb.w	r3, [fp, #32]
 8004a1c:	2b0f      	cmp	r3, #15
 8004a1e:	d1e3      	bne.n	80049e8 <main+0x618>
      chThdRelease(shelltp);
 8004a20:	4658      	mov	r0, fp
 8004a22:	f7ff fc5d 	bl	80042e0 <chThdRelease>
 8004a26:	f385 8811 	msr	BASEPRI, r5
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	f7fc fe70 	bl	8001710 <chMtxLockS>
 8004a30:	f387 8811 	msr	BASEPRI, r7
  while (H_NEXT(qp) != NULL) {
 8004a34:	6871      	ldr	r1, [r6, #4]
 8004a36:	2900      	cmp	r1, #0
 8004a38:	d049      	beq.n	8004ace <main+0x6fe>
  qp = &heapp->header;
 8004a3a:	4811      	ldr	r0, [pc, #68]	; (8004a80 <main+0x6b0>)
 8004a3c:	4686      	mov	lr, r0
 8004a3e:	e02e      	b.n	8004a9e <main+0x6ce>
 8004a40:	40023800 	.word	0x40023800
 8004a44:	e000e100 	.word	0xe000e100
 8004a48:	40011000 	.word	0x40011000
 8004a4c:	40011400 	.word	0x40011400
 8004a50:	40020000 	.word	0x40020000
 8004a54:	40020800 	.word	0x40020800
 8004a58:	0800627c 	.word	0x0800627c
 8004a5c:	20000c40 	.word	0x20000c40
 8004a60:	20000e9c 	.word	0x20000e9c
 8004a64:	080066f4 	.word	0x080066f4
 8004a68:	0800650c 	.word	0x0800650c
 8004a6c:	080065c0 	.word	0x080065c0
 8004a70:	20001860 	.word	0x20001860
 8004a74:	200098bc 	.word	0x200098bc
 8004a78:	080002f1 	.word	0x080002f1
 8004a7c:	200017f8 	.word	0x200017f8
 8004a80:	2000158c 	.word	0x2000158c
 8004a84:	080014f1 	.word	0x080014f1
 8004a88:	08001451 	.word	0x08001451
 8004a8c:	08002c21 	.word	0x08002c21
 8004a90:	080062b0 	.word	0x080062b0
 8004a94:	08006180 	.word	0x08006180
 8004a98:	20001594 	.word	0x20001594
  while (H_NEXT(qp) != NULL) {
 8004a9c:	4619      	mov	r1, r3
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004a9e:	6848      	ldr	r0, [r1, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004aa0:	f101 030f 	add.w	r3, r1, #15
 8004aa4:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004aa8:	1c42      	adds	r2, r0, #1
 8004aaa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004aae:	f1a3 0c08 	sub.w	ip, r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004ab2:	eba2 0903 	sub.w	r9, r2, r3
 8004ab6:	4594      	cmp	ip, r2
 8004ab8:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8004abc:	d203      	bcs.n	8004ac6 <main+0x6f6>
 8004abe:	f5b9 7f8c 	cmp.w	r9, #280	; 0x118
 8004ac2:	f200 80cd 	bhi.w	8004c60 <main+0x890>
  while (H_NEXT(qp) != NULL) {
 8004ac6:	680b      	ldr	r3, [r1, #0]
 8004ac8:	468e      	mov	lr, r1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e6      	bne.n	8004a9c <main+0x6cc>
  H_UNLOCK(heapp);
 8004ace:	4640      	mov	r0, r8
 8004ad0:	f7ff fb6e 	bl	80041b0 <chMtxUnlock>
  if (heapp->provider != NULL) {
 8004ad4:	6833      	ldr	r3, [r6, #0]
 8004ad6:	b333      	cbz	r3, 8004b26 <main+0x756>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8004ad8:	2208      	movs	r2, #8
 8004ada:	4611      	mov	r1, r2
 8004adc:	f640 00c8 	movw	r0, #2248	; 0x8c8
 8004ae0:	4798      	blx	r3
    if (ahp != NULL) {
 8004ae2:	4681      	mov	r9, r0
 8004ae4:	b1f8      	cbz	r0, 8004b26 <main+0x756>
      H_SIZE(hp) = size;
 8004ae6:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8004aea:	e940 6302 	strd	r6, r3, [r0, #-8]
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 8004aee:	f609 02c8 	addw	r2, r9, #2248	; 0x8c8
  thread_descriptor_t td = {
 8004af2:	9208      	str	r2, [sp, #32]
 8004af4:	4a79      	ldr	r2, [pc, #484]	; (8004cdc <main+0x90c>)
 8004af6:	920a      	str	r2, [sp, #40]	; 0x28
 8004af8:	2381      	movs	r3, #129	; 0x81
 8004afa:	4a79      	ldr	r2, [pc, #484]	; (8004ce0 <main+0x910>)
 8004afc:	920b      	str	r2, [sp, #44]	; 0x2c
 8004afe:	e9cd a906 	strd	sl, r9, [sp, #24]
 8004b02:	9309      	str	r3, [sp, #36]	; 0x24
 8004b04:	f385 8811 	msr	BASEPRI, r5
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8004b08:	a806      	add	r0, sp, #24
 8004b0a:	f7fc f8b9 	bl	8000c80 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 8004b14:	4683      	mov	fp, r0
  chSchWakeupS(tp, MSG_OK);
 8004b16:	f7fc fdb3 	bl	8001680 <chSchWakeupS.constprop.0>
 8004b1a:	f387 8811 	msr	BASEPRI, r7
 8004b1e:	e76b      	b.n	80049f8 <main+0x628>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 8004b20:	4658      	mov	r0, fp
 8004b22:	f7ff fbdd 	bl	80042e0 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 8004b26:	f04f 0b00 	mov.w	fp, #0
 8004b2a:	e765      	b.n	80049f8 <main+0x628>
    ctp->u.ewmask = events;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8004b32:	200a      	movs	r0, #10
 8004b34:	f7fc fdd4 	bl	80016e0 <chSchGoSleepS>
    m = ctp->epending & events;
 8004b38:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 8004b3c:	f003 0201 	and.w	r2, r3, #1
 8004b40:	43d2      	mvns	r2, r2
 8004b42:	e764      	b.n	8004a0e <main+0x63e>
      rccEnableOTG_FS(true);
 8004b44:	4b67      	ldr	r3, [pc, #412]	; (8004ce4 <main+0x914>)
  stm32_otg_t *otgp = usbp->otg;
 8004b46:	f8d7 8054 	ldr.w	r8, [r7, #84]	; 0x54
      rccEnableOTG_FS(true);
 8004b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004b4c:	4a66      	ldr	r2, [pc, #408]	; (8004ce8 <main+0x918>)
 8004b4e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004b52:	6359      	str	r1, [r3, #52]	; 0x34
 8004b54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b56:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004b5a:	6559      	str	r1, [r3, #84]	; 0x54
 8004b5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
      rccResetOTG_FS();
 8004b5e:	6959      	ldr	r1, [r3, #20]
 8004b60:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004b64:	6159      	str	r1, [r3, #20]
 8004b66:	6959      	ldr	r1, [r3, #20]
 8004b68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004b6c:	6159      	str	r1, [r3, #20]
 8004b6e:	695b      	ldr	r3, [r3, #20]
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8004b70:	495e      	ldr	r1, [pc, #376]	; (8004cec <main+0x91c>)
 8004b72:	23e0      	movs	r3, #224	; 0xe0
 8004b74:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004b78:	2308      	movs	r3, #8
 8004b7a:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004b7e:	6093      	str	r3, [r2, #8]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8004b80:	4b5b      	ldr	r3, [pc, #364]	; (8004cf0 <main+0x920>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8004b82:	f8c8 100c 	str.w	r1, [r8, #12]
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8004b86:	22c0      	movs	r2, #192	; 0xc0
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8004b88:	f8c8 3800 	str.w	r3, [r8, #2048]	; 0x800
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8004b8c:	f44f 1334 	mov.w	r3, #2949120	; 0x2d0000
    otgp->PCGCCTL = 0;
 8004b90:	f8c8 ae00 	str.w	sl, [r8, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8004b94:	f8c8 2000 	str.w	r2, [r8]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8004b98:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8004b9c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	dafb      	bge.n	8004b9c <main+0x7cc>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f8c8 3010 	str.w	r3, [r8, #16]
  chSysPolledDelayX(cycles);
 8004baa:	200c      	movs	r0, #12
 8004bac:	f7fc f950 	bl	8000e50 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8004bb0:	f8d8 5010 	ldr.w	r5, [r8, #16]
 8004bb4:	f015 0501 	ands.w	r5, r5, #1
 8004bb8:	d1fa      	bne.n	8004bb0 <main+0x7e0>
 8004bba:	2012      	movs	r0, #18
 8004bbc:	f7fc f948 	bl	8000e50 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8004bc0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	dafb      	bge.n	8004bc0 <main+0x7f0>
    otg_disable_ep(usbp);
 8004bc8:	e9d7 1315 	ldrd	r1, r3, [r7, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004bcc:	f8d3 e008 	ldr.w	lr, [r3, #8]
    otgp->GAHBCFG = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f8c8 3008 	str.w	r3, [r8, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bda:	e000      	b.n	8004bde <main+0x80e>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004bdc:	464d      	mov	r5, r9
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004bde:	eb01 1245 	add.w	r2, r1, r5, lsl #5
 8004be2:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8004be4:	f8d2 c900 	ldr.w	ip, [r2, #2304]	; 0x900
 8004be8:	f1bc 0f00 	cmp.w	ip, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004bec:	f105 0901 	add.w	r9, r5, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8004bf0:	da05      	bge.n	8004bfe <main+0x82e>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8004bf2:	f8d2 c900 	ldr.w	ip, [r2, #2304]	; 0x900
 8004bf6:	f04c 4c80 	orr.w	ip, ip, #1073741824	; 0x40000000
 8004bfa:	f8c2 c900 	str.w	ip, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8004bfe:	f8d2 cb00 	ldr.w	ip, [r2, #2816]	; 0xb00
 8004c02:	f1bc 0f00 	cmp.w	ip, #0
 8004c06:	da05      	bge.n	8004c14 <main+0x844>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8004c08:	f8d2 cb00 	ldr.w	ip, [r2, #2816]	; 0xb00
 8004c0c:	f04c 4c80 	orr.w	ip, ip, #1073741824	; 0x40000000
 8004c10:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004c14:	4575      	cmp	r5, lr
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004c16:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004c1a:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004c1e:	d1dd      	bne.n	8004bdc <main+0x80c>
    if (usbp->config->sof_cb == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68da      	ldr	r2, [r3, #12]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8004c24:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004c28:	f8c1 381c 	str.w	r3, [r1, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f8c8 3810 	str.w	r3, [r8, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 8004c32:	f8c8 3814 	str.w	r3, [r8, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8004c36:	f8c8 381c 	str.w	r3, [r8, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 8004c3a:	2a00      	cmp	r2, #0
 8004c3c:	d045      	beq.n	8004cca <main+0x8fa>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8004c3e:	4b2d      	ldr	r3, [pc, #180]	; (8004cf4 <main+0x924>)
 8004c40:	f8c8 3018 	str.w	r3, [r8, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c48:	f8c8 3014 	str.w	r3, [r8, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8004c4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	f8c8 3008 	str.w	r3, [r8, #8]
 8004c58:	e647      	b.n	80048ea <main+0x51a>
    fck = STM32_PCLK2 / config->speed;
 8004c5a:	f240 23d9 	movw	r3, #729	; 0x2d9
 8004c5e:	e59d      	b.n	800479c <main+0x3cc>
      if (ahp > hp) {
 8004c60:	458c      	cmp	ip, r1
 8004c62:	4683      	mov	fp, r0
 8004c64:	4670      	mov	r0, lr
 8004c66:	d81b      	bhi.n	8004ca0 <main+0x8d0>
        if (H_PAGES(hp) == pages) {
 8004c68:	f240 1319 	movw	r3, #281	; 0x119
 8004c6c:	459b      	cmp	fp, r3
 8004c6e:	d030      	beq.n	8004cd2 <main+0x902>
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004c70:	f601 03d8 	addw	r3, r1, #2264	; 0x8d8
 8004c74:	1ad2      	subs	r2, r2, r3
 8004c76:	10d2      	asrs	r2, r2, #3
          H_NEXT(fp) = H_NEXT(hp);
 8004c78:	680b      	ldr	r3, [r1, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004c7a:	f8c1 28d4 	str.w	r2, [r1, #2260]	; 0x8d4
          fp = H_BLOCK(hp) + pages;
 8004c7e:	f501 620d 	add.w	r2, r1, #2256	; 0x8d0
          H_NEXT(fp) = H_NEXT(hp);
 8004c82:	f8c1 38d0 	str.w	r3, [r1, #2256]	; 0x8d0
          H_NEXT(qp) = fp;
 8004c86:	468c      	mov	ip, r1
 8004c88:	6002      	str	r2, [r0, #0]
      H_HEAP(hp) = heapp;
 8004c8a:	46e1      	mov	r9, ip
      H_SIZE(hp) = size;
 8004c8c:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8004c90:	f8cc 3004 	str.w	r3, [ip, #4]
      H_UNLOCK(heapp);
 8004c94:	4640      	mov	r0, r8
      H_HEAP(hp) = heapp;
 8004c96:	f849 6b08 	str.w	r6, [r9], #8
      H_UNLOCK(heapp);
 8004c9a:	f7ff fa89 	bl	80041b0 <chMtxUnlock>
 8004c9e:	e726      	b.n	8004aee <main+0x71e>
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004ca0:	f101 0208 	add.w	r2, r1, #8
 8004ca4:	ebac 0202 	sub.w	r2, ip, r2
        if (bpages > pages) {
 8004ca8:	f240 1019 	movw	r0, #281	; 0x119
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004cac:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 8004cae:	4581      	cmp	r9, r0
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004cb0:	604a      	str	r2, [r1, #4]
        if (bpages > pages) {
 8004cb2:	d0ea      	beq.n	8004c8a <main+0x8ba>
          H_NEXT(fp) = H_NEXT(hp);
 8004cb4:	6808      	ldr	r0, [r1, #0]
 8004cb6:	f8cc 08d0 	str.w	r0, [ip, #2256]	; 0x8d0
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004cba:	f5a9 728d 	sub.w	r2, r9, #282	; 0x11a
          fp = H_BLOCK(ahp) + pages;
 8004cbe:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004cc2:	f8cc 28d4 	str.w	r2, [ip, #2260]	; 0x8d4
          H_NEXT(hp) = fp;
 8004cc6:	600b      	str	r3, [r1, #0]
 8004cc8:	e7df      	b.n	8004c8a <main+0x8ba>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <main+0x928>)
 8004ccc:	f8c8 3018 	str.w	r3, [r8, #24]
 8004cd0:	e7b8      	b.n	8004c44 <main+0x874>
          H_NEXT(qp) = H_NEXT(hp);
 8004cd2:	680b      	ldr	r3, [r1, #0]
 8004cd4:	6003      	str	r3, [r0, #0]
 8004cd6:	468c      	mov	ip, r1
 8004cd8:	e7d7      	b.n	8004c8a <main+0x8ba>
 8004cda:	bf00      	nop
 8004cdc:	08003b01 	.word	0x08003b01
 8004ce0:	08006514 	.word	0x08006514
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	e000e100 	.word	0xe000e100
 8004cec:	40001440 	.word	0x40001440
 8004cf0:	02200003 	.word	0x02200003
 8004cf4:	c0303c08 	.word	0xc0303c08
 8004cf8:	c0303c00 	.word	0xc0303c00
 8004cfc:	00000000 	.word	0x00000000

08004d00 <cmd_threads>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8004d00:	2900      	cmp	r1, #0
 8004d02:	dc4e      	bgt.n	8004da2 <cmd_threads+0xa2>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    shellUsage(chp, "threads");
    return;
  }
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8004d08:	4928      	ldr	r1, [pc, #160]	; (8004dac <cmd_threads+0xac>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004d0a:	b089      	sub	sp, #36	; 0x24
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	2620      	movs	r6, #32
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8004d10:	f7fd fd2e 	bl	8002770 <chprintf>
 8004d14:	f386 8811 	msr	BASEPRI, r6
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8004d18:	4f25      	ldr	r7, [pc, #148]	; (8004db0 <cmd_threads+0xb0>)
 8004d1a:	68fc      	ldr	r4, [r7, #12]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8004d1c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004d20:	3301      	adds	r3, #1
 8004d22:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8004d26:	2300      	movs	r3, #0
 8004d28:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
 8004d2c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8004dbc <cmd_threads+0xbc>
#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
    uint32_t stklimit = (uint32_t)tp->wabase;
#else
    uint32_t stklimit = 0U;
#endif
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8004d30:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004dc0 <cmd_threads+0xc0>
 8004d34:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8004dc4 <cmd_threads+0xc4>
 8004d38:	9607      	str	r6, [sp, #28]
 8004d3a:	e00a      	b.n	8004d52 <cmd_threads+0x52>
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
    ntp->refs++;
 8004d3c:	f89b 3022 	ldrb.w	r3, [fp, #34]	; 0x22
 8004d40:	3301      	adds	r3, #1
 8004d42:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
 8004d46:	f382 8811 	msr	BASEPRI, r2
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f7ff fac8 	bl	80042e0 <chThdRelease>
 8004d50:	465c      	mov	r4, fp
    uint32_t stklimit = (uint32_t)tp->wabase;
 8004d52:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
             stklimit, (uint32_t)tp->ctx.sp, (uint32_t)tp,
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 8004d56:	f894 c020 	ldrb.w	ip, [r4, #32]
 8004d5a:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8004d5e:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 8004d62:	68a6      	ldr	r6, [r4, #8]
 8004d64:	6963      	ldr	r3, [r4, #20]
 8004d66:	9602      	str	r6, [sp, #8]
 8004d68:	2900      	cmp	r1, #0
 8004d6a:	bf08      	it	eq
 8004d6c:	4649      	moveq	r1, r9
 8004d6e:	3801      	subs	r0, #1
 8004d70:	e9cd c103 	strd	ip, r1, [sp, #12]
 8004d74:	9001      	str	r0, [sp, #4]
 8004d76:	9400      	str	r4, [sp, #0]
 8004d78:	4641      	mov	r1, r8
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f7fd fcf8 	bl	8002770 <chprintf>
 8004d80:	9b07      	ldr	r3, [sp, #28]
 8004d82:	f383 8811 	msr	BASEPRI, r3
  ntp = tp->newer;
 8004d86:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  if (ntp == (thread_t *)&ch.rlist) {
 8004d8a:	45bb      	cmp	fp, r7
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	d1d4      	bne.n	8004d3c <cmd_threads+0x3c>
 8004d92:	f382 8811 	msr	BASEPRI, r2
  chThdRelease(tp);
 8004d96:	4620      	mov	r0, r4
             tp->name == NULL ? "" : tp->name);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}
 8004d98:	b009      	add	sp, #36	; 0x24
 8004d9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9e:	f7ff ba9f 	b.w	80042e0 <chThdRelease>
    shellUsage(chp, "threads");
 8004da2:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <cmd_threads+0xb4>)
 8004da4:	4904      	ldr	r1, [pc, #16]	; (8004db8 <cmd_threads+0xb8>)
 8004da6:	f7fd bce3 	b.w	8002770 <chprintf>
 8004daa:	bf00      	nop
 8004dac:	080062c0 	.word	0x080062c0
 8004db0:	200013b0 	.word	0x200013b0
 8004db4:	080062b8 	.word	0x080062b8
 8004db8:	08005fe8 	.word	0x08005fe8
 8004dbc:	08006550 	.word	0x08006550
 8004dc0:	08005f04 	.word	0x08005f04
 8004dc4:	08006300 	.word	0x08006300
	...

08004dd0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <__early_init+0x1a4>)
  gpiop->PUPDR   = config->pupdr;
 8004dd2:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8004fbc <__early_init+0x1ec>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004dd6:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8004dd8:	4867      	ldr	r0, [pc, #412]	; (8004f78 <__early_init+0x1a8>)
 8004dda:	4968      	ldr	r1, [pc, #416]	; (8004f7c <__early_init+0x1ac>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004ddc:	f042 021f 	orr.w	r2, r2, #31
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8004de0:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004de2:	611a      	str	r2, [r3, #16]
 8004de4:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8004de6:	4d66      	ldr	r5, [pc, #408]	; (8004f80 <__early_init+0x1b0>)
  gpiop->AFRL    = config->afrl;
 8004de8:	4f66      	ldr	r7, [pc, #408]	; (8004f84 <__early_init+0x1b4>)
  gpiop->OTYPER  = config->otyper;
 8004dea:	4c67      	ldr	r4, [pc, #412]	; (8004f88 <__early_init+0x1b8>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004dec:	f022 021f 	bic.w	r2, r2, #31
 8004df0:	611a      	str	r2, [r3, #16]
 8004df2:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8004df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df6:	f042 021f 	orr.w	r2, r2, #31
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8004dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dfe:	f042 021f 	orr.w	r2, r2, #31
 8004e02:	651a      	str	r2, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8004e04:	f44f 7280 	mov.w	r2, #256	; 0x100
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8004e08:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8004e0a:	606a      	str	r2, [r5, #4]
  gpiop->ODR     = config->odr;
 8004e0c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 8004e10:	f06f 0250 	mvn.w	r2, #80	; 0x50
 8004e14:	60aa      	str	r2, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8004e16:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->AFRH    = config->afrh;
 8004e1a:	f44f 222a 	mov.w	r2, #696320	; 0xaa000
  gpiop->ODR     = config->odr;
 8004e1e:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8004e20:	622f      	str	r7, [r5, #32]
  gpiop->MODER   = config->moder;
 8004e22:	4f5a      	ldr	r7, [pc, #360]	; (8004f8c <__early_init+0x1bc>)
  gpiop->AFRH    = config->afrh;
 8004e24:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8004e26:	2200      	movs	r2, #0
  gpiop->MODER   = config->moder;
 8004e28:	602f      	str	r7, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8004e2a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
 8004e2e:	4f58      	ldr	r7, [pc, #352]	; (8004f90 <__early_init+0x1c0>)
  gpiop->OTYPER  = config->otyper;
 8004e30:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004e32:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8004e34:	60c7      	str	r7, [r0, #12]
  gpiop->MODER   = config->moder;
 8004e36:	2780      	movs	r7, #128	; 0x80
  gpiop->ODR     = config->odr;
 8004e38:	6146      	str	r6, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8004e3a:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8004e3c:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004e3e:	6007      	str	r7, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8004e40:	4f54      	ldr	r7, [pc, #336]	; (8004f94 <__early_init+0x1c4>)
  gpiop->OTYPER  = config->otyper;
 8004e42:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004e44:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8004e46:	60cf      	str	r7, [r1, #12]
  gpiop->MODER   = config->moder;
 8004e48:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->ODR     = config->odr;
 8004e4c:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004e4e:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004e50:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004e52:	600f      	str	r7, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8004e54:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 8004e58:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
 8004e5c:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004e5e:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8004e60:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
 8004e62:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8004e64:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8004e66:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004e68:	6022      	str	r2, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8004e6a:	f8c0 2c04 	str.w	r2, [r0, #3076]	; 0xc04
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8004e6e:	f5a4 34ce 	sub.w	r4, r4, #105472	; 0x19c00
  gpiop->OSPEEDR = config->ospeedr;
 8004e72:	f8c0 5c08 	str.w	r5, [r0, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 8004e76:	f8c0 7c0c 	str.w	r7, [r0, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 8004e7a:	f8c0 6c14 	str.w	r6, [r0, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 8004e7e:	f8c0 2c20 	str.w	r2, [r0, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 8004e82:	f8c0 2c24 	str.w	r2, [r0, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 8004e86:	f8c0 2c00 	str.w	r2, [r0, #3072]	; 0xc00
  gpiop->PUPDR   = config->pupdr;
 8004e8a:	4843      	ldr	r0, [pc, #268]	; (8004f98 <__early_init+0x1c8>)
  gpiop->OTYPER  = config->otyper;
 8004e8c:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004e8e:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8004e90:	60c8      	str	r0, [r1, #12]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8004e92:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8004e96:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  gpiop->ODR     = config->odr;
 8004e9a:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004e9c:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004e9e:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004ea0:	600a      	str	r2, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8004ea2:	641d      	str	r5, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8004ea4:	6020      	str	r0, [r4, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	f042 0201 	orr.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	0796      	lsls	r6, r2, #30
 8004eb2:	d5fc      	bpl.n	8004eae <__early_init+0xde>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8004eb4:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004eb6:	4a2f      	ldr	r2, [pc, #188]	; (8004f74 <__early_init+0x1a4>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8004eb8:	f021 0103 	bic.w	r1, r1, #3
 8004ebc:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004ebe:	6893      	ldr	r3, [r2, #8]
 8004ec0:	f013 030c 	ands.w	r3, r3, #12
 8004ec4:	d1fb      	bne.n	8004ebe <__early_init+0xee>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004ec6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8004ec8:	492a      	ldr	r1, [pc, #168]	; (8004f74 <__early_init+0x1a4>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004eca:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8004ece:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8004ed0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8004eda:	680b      	ldr	r3, [r1, #0]
 8004edc:	039d      	lsls	r5, r3, #14
 8004ede:	d5fc      	bpl.n	8004eda <__early_init+0x10a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8004ee0:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004ee2:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <__early_init+0x1a4>)
  RCC->CSR |= RCC_CSR_LSION;
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004eea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004eec:	0794      	lsls	r4, r2, #30
 8004eee:	d5fc      	bpl.n	8004eea <__early_init+0x11a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8004ef0:	4a2a      	ldr	r2, [pc, #168]	; (8004f9c <__early_init+0x1cc>)
 8004ef2:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8004ef4:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8004ef6:	492a      	ldr	r1, [pc, #168]	; (8004fa0 <__early_init+0x1d0>)
  RCC->CR |= RCC_CR_PLLON;
 8004ef8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004efc:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8004efe:	684b      	ldr	r3, [r1, #4]
 8004f00:	0458      	lsls	r0, r3, #17
 8004f02:	d5fc      	bpl.n	8004efe <__early_init+0x12e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <__early_init+0x1a4>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	0192      	lsls	r2, r2, #6
 8004f0a:	d5fc      	bpl.n	8004f06 <__early_init+0x136>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8004f0c:	4925      	ldr	r1, [pc, #148]	; (8004fa4 <__early_init+0x1d4>)
 8004f0e:	6099      	str	r1, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8004f10:	4a25      	ldr	r2, [pc, #148]	; (8004fa8 <__early_init+0x1d8>)
    RCC->DCKCFGR = dckcfgr |
 8004f12:	2103      	movs	r1, #3
 8004f14:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	4b24      	ldr	r3, [pc, #144]	; (8004fac <__early_init+0x1dc>)
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d01e      	beq.n	8004f5e <__early_init+0x18e>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8004f20:	4b23      	ldr	r3, [pc, #140]	; (8004fb0 <__early_init+0x1e0>)
 8004f22:	f240 7202 	movw	r2, #1794	; 0x702
 8004f26:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8004f28:	4a21      	ldr	r2, [pc, #132]	; (8004fb0 <__early_init+0x1e0>)
 8004f2a:	6813      	ldr	r3, [r2, #0]
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d1fa      	bne.n	8004f2a <__early_init+0x15a>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8004f34:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <__early_init+0x1a4>)
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	f042 0202 	orr.w	r2, r2, #2
 8004f3c:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	f002 020c 	and.w	r2, r2, #12
 8004f44:	2a08      	cmp	r2, #8
 8004f46:	d1fa      	bne.n	8004f3e <__early_init+0x16e>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8004f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f4e:	645a      	str	r2, [r3, #68]	; 0x44
 8004f50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f56:	665a      	str	r2, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8004f58:	bcf0      	pop	{r4, r5, r6, r7}
 8004f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f5c:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8004f5e:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <__early_init+0x1e4>)
 8004f60:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <__early_init+0x1e8>)
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d1db      	bne.n	8004f20 <__early_init+0x150>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8004f68:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <__early_init+0x1e0>)
 8004f6a:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e7da      	b.n	8004f28 <__early_init+0x158>
 8004f72:	bf00      	nop
 8004f74:	40023800 	.word	0x40023800
 8004f78:	40020400 	.word	0x40020400
 8004f7c:	40020800 	.word	0x40020800
 8004f80:	40020000 	.word	0x40020000
 8004f84:	55507700 	.word	0x55507700
 8004f88:	40020c00 	.word	0x40020c00
 8004f8c:	2a80a9a0 	.word	0x2a80a9a0
 8004f90:	55555455 	.word	0x55555455
 8004f94:	01555555 	.word	0x01555555
 8004f98:	55555550 	.word	0x55555550
 8004f9c:	07415419 	.word	0x07415419
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	38881000 	.word	0x38881000
 8004fa8:	e0042000 	.word	0xe0042000
 8004fac:	20006411 	.word	0x20006411
 8004fb0:	40023c00 	.word	0x40023c00
 8004fb4:	e000ed00 	.word	0xe000ed00
 8004fb8:	410fc241 	.word	0x410fc241
 8004fbc:	64150005 	.word	0x64150005

08004fc0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8004fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8004fc4:	4c62      	ldr	r4, [pc, #392]	; (8005150 <VectorD8+0x190>)
 8004fc6:	f8d4 6254 	ldr.w	r6, [r4, #596]	; 0x254
  uint16_t cr1 = u->CR1;
 8004fca:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 8004fce:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8004fd0:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8004fd2:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8004fd4:	d476      	bmi.n	80050c4 <VectorD8+0x104>
 8004fd6:	2320      	movs	r3, #32
 8004fd8:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004fdc:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8004fe0:	d044      	beq.n	800506c <VectorD8+0xac>
  chEvtBroadcastFlagsI(esp, flags);
 8004fe2:	4f5c      	ldr	r7, [pc, #368]	; (8005154 <VectorD8+0x194>)
  chThdDequeueNextI(tqp, msg);
 8004fe4:	f107 0908 	add.w	r9, r7, #8
 8004fe8:	e008      	b.n	8004ffc <VectorD8+0x3c>
    if (sr & USART_SR_RXNE)
 8004fea:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8004fec:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8004ff0:	d41e      	bmi.n	8005030 <VectorD8+0x70>
    sr = u->SR;
 8004ff2:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004ff4:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8004ff8:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004ffa:	d037      	beq.n	800506c <VectorD8+0xac>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8004ffc:	072b      	lsls	r3, r5, #28
 8004ffe:	d0f4      	beq.n	8004fea <VectorD8+0x2a>
    sts |= SD_OVERRUN_ERROR;
 8005000:	f015 0f08 	tst.w	r5, #8
 8005004:	bf0c      	ite	eq
 8005006:	2100      	moveq	r1, #0
 8005008:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800500a:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 800500c:	bf48      	it	mi
 800500e:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8005012:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8005014:	bf48      	it	mi
 8005016:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800501a:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 800501c:	bf48      	it	mi
 800501e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8005022:	4638      	mov	r0, r7
 8005024:	f7fb fee4 	bl	8000df0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8005028:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800502a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800502e:	d5e0      	bpl.n	8004ff2 <VectorD8+0x32>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8005030:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8005032:	f894 5258 	ldrb.w	r5, [r4, #600]	; 0x258
 8005036:	b3a3      	cbz	r3, 80050a2 <VectorD8+0xe2>
  if (!iqIsFullI(iqp)) {
 8005038:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800503c:	4293      	cmp	r3, r2
 800503e:	d038      	beq.n	80050b2 <VectorD8+0xf2>
    iqp->q_counter++;
 8005040:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8005042:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8005044:	3201      	adds	r2, #1
 8005046:	ea05 050a 	and.w	r5, r5, sl
 800504a:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 800504c:	6221      	str	r1, [r4, #32]
 800504e:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8005050:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005054:	429a      	cmp	r2, r3
 8005056:	d301      	bcc.n	800505c <VectorD8+0x9c>
      iqp->q_wrptr = iqp->q_buffer;
 8005058:	69a3      	ldr	r3, [r4, #24]
 800505a:	6223      	str	r3, [r4, #32]
  chThdDequeueNextI(tqp, msg);
 800505c:	4648      	mov	r0, r9
 800505e:	f7fb feb7 	bl	8000dd0 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 8005062:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005064:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8005068:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800506a:	d1c7      	bne.n	8004ffc <VectorD8+0x3c>
 800506c:	2300      	movs	r3, #0
 800506e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8005072:	f018 0f80 	tst.w	r8, #128	; 0x80
 8005076:	d001      	beq.n	800507c <VectorD8+0xbc>
 8005078:	062a      	lsls	r2, r5, #24
 800507a:	d432      	bmi.n	80050e2 <VectorD8+0x122>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800507c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005080:	d00b      	beq.n	800509a <VectorD8+0xda>
 8005082:	066b      	lsls	r3, r5, #25
 8005084:	d509      	bpl.n	800509a <VectorD8+0xda>
 8005086:	2320      	movs	r3, #32
 8005088:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 800508c:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8005090:	429a      	cmp	r2, r3
 8005092:	d043      	beq.n	800511c <VectorD8+0x15c>
 8005094:	2300      	movs	r3, #0
 8005096:	f383 8811 	msr	BASEPRI, r3
}
 800509a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800509e:	f7fb bd7f 	b.w	8000ba0 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 80050a2:	2104      	movs	r1, #4
 80050a4:	4638      	mov	r0, r7
 80050a6:	f7fb fea3 	bl	8000df0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80050aa:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d1c6      	bne.n	8005040 <VectorD8+0x80>
 80050b2:	6962      	ldr	r2, [r4, #20]
 80050b4:	2a00      	cmp	r2, #0
 80050b6:	d0c3      	beq.n	8005040 <VectorD8+0x80>
 80050b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050bc:	4638      	mov	r0, r7
 80050be:	f7fb fe97 	bl	8000df0 <chEvtBroadcastFlagsI>
 80050c2:	e796      	b.n	8004ff2 <VectorD8+0x32>
 80050c4:	2320      	movs	r3, #32
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050ce:	1d20      	adds	r0, r4, #4
 80050d0:	f7fb fe8e 	bl	8000df0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80050d4:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80050d8:	6033      	str	r3, [r6, #0]
 80050da:	2300      	movs	r3, #0
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	e779      	b.n	8004fd6 <VectorD8+0x16>
 80050e2:	2320      	movs	r3, #32
 80050e4:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 80050e8:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d022      	beq.n	8005136 <VectorD8+0x176>
    oqp->q_counter++;
 80050f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 80050f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 80050f4:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 80050f6:	3201      	adds	r2, #1
 80050f8:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 80050fa:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 80050fc:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 80050fe:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8005100:	d301      	bcc.n	8005106 <VectorD8+0x146>
      oqp->q_rdptr = oqp->q_buffer;
 8005102:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005104:	64a3      	str	r3, [r4, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8005106:	4814      	ldr	r0, [pc, #80]	; (8005158 <VectorD8+0x198>)
 8005108:	f7fb fe62 	bl	8000dd0 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 800510c:	6077      	str	r7, [r6, #4]
 800510e:	2300      	movs	r3, #0
 8005110:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8005114:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005118:	d0bf      	beq.n	800509a <VectorD8+0xda>
 800511a:	e7b2      	b.n	8005082 <VectorD8+0xc2>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800511c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0b8      	beq.n	8005094 <VectorD8+0xd4>
  chEvtBroadcastFlagsI(esp, flags);
 8005122:	480c      	ldr	r0, [pc, #48]	; (8005154 <VectorD8+0x194>)
 8005124:	2110      	movs	r1, #16
 8005126:	f7fb fe63 	bl	8000df0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800512a:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800512e:	ea08 0303 	and.w	r3, r8, r3
 8005132:	60f3      	str	r3, [r6, #12]
 8005134:	e7ae      	b.n	8005094 <VectorD8+0xd4>
  if (!oqIsEmptyI(oqp)) {
 8005136:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005138:	2a00      	cmp	r2, #0
 800513a:	d0d9      	beq.n	80050f0 <VectorD8+0x130>
 800513c:	4805      	ldr	r0, [pc, #20]	; (8005154 <VectorD8+0x194>)
 800513e:	2108      	movs	r1, #8
 8005140:	f7fb fe56 	bl	8000df0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8005144:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8005148:	ea08 0303 	and.w	r3, r8, r3
 800514c:	60f3      	str	r3, [r6, #12]
 800514e:	e7de      	b.n	800510e <VectorD8+0x14e>
 8005150:	20000c40 	.word	0x20000c40
 8005154:	20000c44 	.word	0x20000c44
 8005158:	20000c70 	.word	0x20000c70
 800515c:	00000000 	.word	0x00000000

08005160 <VectorB0>:
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8005160:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8005164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sr  = timp->SR;
 8005168:	6903      	ldr	r3, [r0, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800516a:	68c2      	ldr	r2, [r0, #12]
 800516c:	4013      	ands	r3, r2
 800516e:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8005170:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8005172:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8005174:	6102      	str	r2, [r0, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8005176:	d403      	bmi.n	8005180 <VectorB0+0x20>
}
 8005178:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800517c:	f7fb bd10 	b.w	8000ba0 <_port_irq_epilogue>
 8005180:	2320      	movs	r3, #32
 8005182:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8005186:	4d23      	ldr	r5, [pc, #140]	; (8005214 <VectorB0+0xb4>)
 8005188:	6a47      	ldr	r7, [r0, #36]	; 0x24
 800518a:	69ab      	ldr	r3, [r5, #24]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800518c:	6a6a      	ldr	r2, [r5, #36]	; 0x24

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 800518e:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8005190:	1abe      	subs	r6, r7, r2
 8005192:	42b1      	cmp	r1, r6
 8005194:	bf88      	it	hi
 8005196:	f105 0918 	addhi.w	r9, r5, #24
 800519a:	d825      	bhi.n	80051e8 <VectorB0+0x88>
  STM32_ST_TIM->DIER = 0U;
 800519c:	4604      	mov	r4, r0
 800519e:	f105 0918 	add.w	r9, r5, #24
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80051a2:	f04f 0800 	mov.w	r8, #0
 80051a6:	2720      	movs	r7, #32
 80051a8:	e000      	b.n	80051ac <VectorB0+0x4c>
 80051aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80051ac:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 80051ae:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80051b0:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 80051b2:	626a      	str	r2, [r5, #36]	; 0x24
      nowdelta -= vtp->delta;
 80051b4:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 80051b8:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80051ba:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 80051be:	61a8      	str	r0, [r5, #24]
      vtp->func = NULL;
 80051c0:	f8c3 800c 	str.w	r8, [r3, #12]
 80051c4:	bf08      	it	eq
 80051c6:	f8c4 800c 	streq.w	r8, [r4, #12]
 80051ca:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 80051ce:	6918      	ldr	r0, [r3, #16]
 80051d0:	4790      	blx	r2
 80051d2:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 80051d6:	69ab      	ldr	r3, [r5, #24]
    }
    while (vtp->delta <= nowdelta);
 80051d8:	6899      	ldr	r1, [r3, #8]
 80051da:	428e      	cmp	r6, r1
 80051dc:	d2e5      	bcs.n	80051aa <VectorB0+0x4a>
  return (systime_t)STM32_ST_TIM->CNT;
 80051de:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80051e0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80051e2:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 80051e4:	428e      	cmp	r6, r1
 80051e6:	d2de      	bcs.n	80051a6 <VectorB0+0x46>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80051e8:	454b      	cmp	r3, r9
 80051ea:	d00b      	beq.n	8005204 <VectorB0+0xa4>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 80051ec:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 80051ee:	626f      	str	r7, [r5, #36]	; 0x24
  ch.vtlist.next->delta -= nowdelta;
 80051f0:	1bc9      	subs	r1, r1, r7
 80051f2:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80051f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 80051f8:	2a02      	cmp	r2, #2
 80051fa:	bf2c      	ite	cs
 80051fc:	18bf      	addcs	r7, r7, r2
 80051fe:	3702      	addcc	r7, #2
 8005200:	609a      	str	r2, [r3, #8]
 8005202:	634f      	str	r7, [r1, #52]	; 0x34
 8005204:	2300      	movs	r3, #0
 8005206:	f383 8811 	msr	BASEPRI, r3
}
 800520a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800520e:	f7fb bcc7 	b.w	8000ba0 <_port_irq_epilogue>
 8005212:	bf00      	nop
 8005214:	200013b0 	.word	0x200013b0
	...

08005220 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8005220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
 8005224:	4c9f      	ldr	r4, [pc, #636]	; (80054a4 <Vector14C+0x284>)
 8005226:	6d66      	ldr	r6, [r4, #84]	; 0x54
  sts  = otgp->GINTSTS;
 8005228:	6975      	ldr	r5, [r6, #20]
  sts &= otgp->GINTMSK;
 800522a:	69b3      	ldr	r3, [r6, #24]
 800522c:	401d      	ands	r5, r3
  if (sts & GINTSTS_USBRST) {
 800522e:	f415 5880 	ands.w	r8, r5, #4096	; 0x1000
  otgp->GINTSTS = sts;
 8005232:	6175      	str	r5, [r6, #20]
  if (sts & GINTSTS_USBRST) {
 8005234:	f040 8138 	bne.w	80054a8 <Vector14C+0x288>
  if (sts & GINTSTS_WKUPINT) {
 8005238:	2d00      	cmp	r5, #0
 800523a:	f2c0 80c2 	blt.w	80053c2 <Vector14C+0x1a2>
  if (sts & GINTSTS_USBSUSP) {
 800523e:	0529      	lsls	r1, r5, #20
 8005240:	d538      	bpl.n	80052b4 <Vector14C+0x94>
    otg_disable_ep(usbp);
 8005242:	e9d4 7315 	ldrd	r7, r3, [r4, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005246:	2100      	movs	r1, #0
 8005248:	f8d3 9008 	ldr.w	r9, [r3, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800524c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005250:	e000      	b.n	8005254 <Vector14C+0x34>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005252:	4671      	mov	r1, lr
 8005254:	eb07 1241 	add.w	r2, r7, r1, lsl #5
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8005258:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 800525a:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800525e:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005260:	f101 0e01 	add.w	lr, r1, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8005264:	da05      	bge.n	8005272 <Vector14C+0x52>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8005266:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800526a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800526e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8005272:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8005276:	2800      	cmp	r0, #0
 8005278:	da05      	bge.n	8005286 <Vector14C+0x66>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 800527a:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 800527e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005282:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005286:	4589      	cmp	r9, r1
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8005288:	f8c3 c908 	str.w	ip, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800528c:	f8c3 cb08 	str.w	ip, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005290:	d1df      	bne.n	8005252 <Vector14C+0x32>
  usbp->saved_state = usbp->state;
 8005292:	7822      	ldrb	r2, [r4, #0]
 8005294:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8005298:	6863      	ldr	r3, [r4, #4]
  usbp->state       = USB_SUSPENDED;
 800529a:	2205      	movs	r2, #5
 800529c:	7022      	strb	r2, [r4, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800529e:	681b      	ldr	r3, [r3, #0]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80052a0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80052a4:	f8c7 281c 	str.w	r2, [r7, #2076]	; 0x81c
 80052a8:	b113      	cbz	r3, 80052b0 <Vector14C+0x90>
 80052aa:	487e      	ldr	r0, [pc, #504]	; (80054a4 <Vector14C+0x284>)
 80052ac:	2104      	movs	r1, #4
 80052ae:	4798      	blx	r3
  usbp->transmitting  = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60a3      	str	r3, [r4, #8]
  if (sts & GINTSTS_ENUMDNE) {
 80052b4:	04aa      	lsls	r2, r5, #18
 80052b6:	d50c      	bpl.n	80052d2 <Vector14C+0xb2>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 80052b8:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 80052bc:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 80052c0:	68f3      	ldr	r3, [r6, #12]
 80052c2:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80052c6:	bf0c      	ite	eq
 80052c8:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 80052cc:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 80052d0:	60f3      	str	r3, [r6, #12]
  if (sts & GINTSTS_SOF) {
 80052d2:	072b      	lsls	r3, r5, #28
 80052d4:	d429      	bmi.n	800532a <Vector14C+0x10a>
  if (sts & GINTSTS_IISOIXFR) {
 80052d6:	02ef      	lsls	r7, r5, #11
 80052d8:	d42f      	bmi.n	800533a <Vector14C+0x11a>
  if (sts & GINTSTS_IISOOXFR) {
 80052da:	02a8      	lsls	r0, r5, #10
 80052dc:	f100 80b6 	bmi.w	800544c <Vector14C+0x22c>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 80052e0:	06eb      	lsls	r3, r5, #27
 80052e2:	f100 8088 	bmi.w	80053f6 <Vector14C+0x1d6>
  if (sts & GINTSTS_OEPINT) {
 80052e6:	0329      	lsls	r1, r5, #12
  src = otgp->DAINT;
 80052e8:	f8d6 4818 	ldr.w	r4, [r6, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 80052ec:	d50b      	bpl.n	8005306 <Vector14C+0xe6>
    if (src & (1 << 16))
 80052ee:	03e2      	lsls	r2, r4, #15
 80052f0:	f100 8194 	bmi.w	800561c <Vector14C+0x3fc>
    if (src & (1 << 17))
 80052f4:	03a3      	lsls	r3, r4, #14
 80052f6:	f100 8187 	bmi.w	8005608 <Vector14C+0x3e8>
    if (src & (1 << 18))
 80052fa:	0367      	lsls	r7, r4, #13
 80052fc:	f100 818a 	bmi.w	8005614 <Vector14C+0x3f4>
    if (src & (1 << 19))
 8005300:	0326      	lsls	r6, r4, #12
 8005302:	f100 8149 	bmi.w	8005598 <Vector14C+0x378>
  if (sts & GINTSTS_IEPINT) {
 8005306:	036d      	lsls	r5, r5, #13
 8005308:	d50b      	bpl.n	8005322 <Vector14C+0x102>
    if (src & (1 << 0))
 800530a:	07e0      	lsls	r0, r4, #31
 800530c:	f100 8192 	bmi.w	8005634 <Vector14C+0x414>
    if (src & (1 << 1))
 8005310:	07a1      	lsls	r1, r4, #30
 8005312:	f100 818b 	bmi.w	800562c <Vector14C+0x40c>
    if (src & (1 << 2))
 8005316:	0762      	lsls	r2, r4, #29
 8005318:	f100 8184 	bmi.w	8005624 <Vector14C+0x404>
    if (src & (1 << 3))
 800531c:	0723      	lsls	r3, r4, #28
 800531e:	f100 8142 	bmi.w	80055a6 <Vector14C+0x386>
}
 8005322:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8005326:	f7fb bc3b 	b.w	8000ba0 <_port_irq_epilogue>
    _usb_isr_invoke_sof_cb(usbp);
 800532a:	6863      	ldr	r3, [r4, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0d1      	beq.n	80052d6 <Vector14C+0xb6>
 8005332:	485c      	ldr	r0, [pc, #368]	; (80054a4 <Vector14C+0x284>)
 8005334:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 8005336:	02ef      	lsls	r7, r5, #11
 8005338:	d5cf      	bpl.n	80052da <Vector14C+0xba>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800533a:	2100      	movs	r1, #0
  stm32_otg_t *otgp = usbp->otg;
 800533c:	f8d4 b054 	ldr.w	fp, [r4, #84]	; 0x54
      _usb_isr_invoke_in_cb(usbp, ep);
 8005340:	f8df a160 	ldr.w	sl, [pc, #352]	; 80054a4 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8005344:	460f      	mov	r7, r1
      _usb_isr_invoke_in_cb(usbp, ep);
 8005346:	f04f 0901 	mov.w	r9, #1
 800534a:	e006      	b.n	800535a <Vector14C+0x13a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800534c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800534e:	3701      	adds	r7, #1
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	b2ff      	uxtb	r7, r7
 8005354:	429f      	cmp	r7, r3
 8005356:	4639      	mov	r1, r7
 8005358:	d8bf      	bhi.n	80052da <Vector14C+0xba>
 800535a:	eb0b 1347 	add.w	r3, fp, r7, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 800535e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005362:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8005366:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800536a:	d1ef      	bne.n	800534c <Vector14C+0x12c>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 800536c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8005370:	2a00      	cmp	r2, #0
 8005372:	daeb      	bge.n	800534c <Vector14C+0x12c>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8005374:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005378:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 800537c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8005380:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005384:	2a00      	cmp	r2, #0
 8005386:	dbfb      	blt.n	8005380 <Vector14C+0x160>
      otg_txfifo_flush(usbp, ep);
 8005388:	6d62      	ldr	r2, [r4, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800538a:	0189      	lsls	r1, r1, #6
 800538c:	f041 0120 	orr.w	r1, r1, #32
 8005390:	6111      	str	r1, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8005392:	6913      	ldr	r3, [r2, #16]
 8005394:	0699      	lsls	r1, r3, #26
 8005396:	d4fc      	bmi.n	8005392 <Vector14C+0x172>
  chSysPolledDelayX(cycles);
 8005398:	2012      	movs	r0, #18
 800539a:	f7fb fd59 	bl	8000e50 <chSysPolledDelayX>
      _usb_isr_invoke_in_cb(usbp, ep);
 800539e:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 80053a2:	8921      	ldrh	r1, [r4, #8]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	fa09 f307 	lsl.w	r3, r9, r7
 80053aa:	6892      	ldr	r2, [r2, #8]
 80053ac:	ea21 0303 	bic.w	r3, r1, r3
 80053b0:	8123      	strh	r3, [r4, #8]
 80053b2:	b112      	cbz	r2, 80053ba <Vector14C+0x19a>
 80053b4:	4639      	mov	r1, r7
 80053b6:	4650      	mov	r0, sl
 80053b8:	4790      	blx	r2
      otg_txfifo_handler(usbp, ep);
 80053ba:	4638      	mov	r0, r7
 80053bc:	f7fb fa30 	bl	8000820 <otg_txfifo_handler.constprop.0>
 80053c0:	e7c4      	b.n	800534c <Vector14C+0x12c>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 80053c2:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 80053c6:	0798      	lsls	r0, r3, #30
 80053c8:	f040 80df 	bne.w	800558a <Vector14C+0x36a>
  usbp->state = usbp->saved_state;
 80053cc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80053d0:	6862      	ldr	r2, [r4, #4]
  usbp->state = usbp->saved_state;
 80053d2:	7023      	strb	r3, [r4, #0]
    otgp->DCTL &= ~DCTL_RWUSIG;
 80053d4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 80053e2:	2a00      	cmp	r2, #0
 80053e4:	f43f af2b 	beq.w	800523e <Vector14C+0x1e>
 80053e8:	2105      	movs	r1, #5
 80053ea:	482e      	ldr	r0, [pc, #184]	; (80054a4 <Vector14C+0x284>)
 80053ec:	4790      	blx	r2
  if (sts & GINTSTS_USBSUSP) {
 80053ee:	0529      	lsls	r1, r5, #20
 80053f0:	f57f af60 	bpl.w	80052b4 <Vector14C+0x94>
 80053f4:	e725      	b.n	8005242 <Vector14C+0x22>
  sts = usbp->otg->GRXSTSP;
 80053f6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80053f8:	6a0b      	ldr	r3, [r1, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 80053fa:	f403 10f0 	and.w	r0, r3, #1966080	; 0x1e0000
 80053fe:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8005402:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8005406:	f003 030f 	and.w	r3, r3, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 800540a:	f000 80d3 	beq.w	80055b4 <Vector14C+0x394>
 800540e:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
 8005412:	f47f af68 	bne.w	80052e6 <Vector14C+0xc6>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8005416:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	6a18      	ldr	r0, [r3, #32]
  while (i < n) {
 800541e:	2a00      	cmp	r2, #0
 8005420:	f43f af61 	beq.w	80052e6 <Vector14C+0xc6>
      w = *fifop;
 8005424:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
  size_t i = 0;
 8005428:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 800542a:	079f      	lsls	r7, r3, #30
      w = *fifop;
 800542c:	bf08      	it	eq
 800542e:	f8d4 8000 	ldreq.w	r8, [r4]
    if (i < max) {
 8005432:	2b07      	cmp	r3, #7
      *buf++ = (uint8_t)w;
 8005434:	4601      	mov	r1, r0
    i++;
 8005436:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 800543a:	d804      	bhi.n	8005446 <Vector14C+0x226>
      *buf++ = (uint8_t)w;
 800543c:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 8005440:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 8005444:	4608      	mov	r0, r1
  while (i < n) {
 8005446:	429a      	cmp	r2, r3
 8005448:	d1ef      	bne.n	800542a <Vector14C+0x20a>
 800544a:	e74c      	b.n	80052e6 <Vector14C+0xc6>
  stm32_otg_t *otgp = usbp->otg;
 800544c:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
      _usb_isr_invoke_out_cb(usbp, ep);
 8005450:	f8df b050 	ldr.w	fp, [pc, #80]	; 80054a4 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8005454:	2700      	movs	r7, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8005456:	f04f 0a01 	mov.w	sl, #1
 800545a:	e006      	b.n	800546a <Vector14C+0x24a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800545c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800545e:	3701      	adds	r7, #1
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	b2ff      	uxtb	r7, r7
 8005464:	429f      	cmp	r7, r3
 8005466:	f63f af3b 	bhi.w	80052e0 <Vector14C+0xc0>
 800546a:	eb09 1247 	add.w	r2, r9, r7, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800546e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8005472:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800547a:	d1ef      	bne.n	800545c <Vector14C+0x23c>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 800547c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8005480:	2b00      	cmp	r3, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8005482:	eb04 0087 	add.w	r0, r4, r7, lsl #2
 8005486:	fa0a f107 	lsl.w	r1, sl, r7
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800548a:	dae7      	bge.n	800545c <Vector14C+0x23c>
      _usb_isr_invoke_out_cb(usbp, ep);
 800548c:	68c2      	ldr	r2, [r0, #12]
 800548e:	8963      	ldrh	r3, [r4, #10]
 8005490:	68d2      	ldr	r2, [r2, #12]
 8005492:	ea23 0301 	bic.w	r3, r3, r1
 8005496:	4658      	mov	r0, fp
 8005498:	4639      	mov	r1, r7
 800549a:	8163      	strh	r3, [r4, #10]
 800549c:	2a00      	cmp	r2, #0
 800549e:	d0dd      	beq.n	800545c <Vector14C+0x23c>
 80054a0:	4790      	blx	r2
 80054a2:	e7db      	b.n	800545c <Vector14C+0x23c>
 80054a4:	2000132c 	.word	0x2000132c
  usbp->status        = 0;
 80054a8:	2300      	movs	r3, #0
  usbp->state         = USB_READY;
 80054aa:	2102      	movs	r1, #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80054ac:	2220      	movs	r2, #32
    usbp->epc[i] = NULL;
 80054ae:	e9c4 3303 	strd	r3, r3, [r4, #12]
 80054b2:	e9c4 3305 	strd	r3, r3, [r4, #20]
  usbp->status        = 0;
 80054b6:	64e3      	str	r3, [r4, #76]	; 0x4c
  usbp->ep0state = USB_EP0_STP_WAITING;
 80054b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  usbp->transmitting  = 0;
 80054bc:	60a3      	str	r3, [r4, #8]
  usbp->state         = USB_READY;
 80054be:	7021      	strb	r1, [r4, #0]
 80054c0:	6132      	str	r2, [r6, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80054c2:	6935      	ldr	r5, [r6, #16]
 80054c4:	f015 0520 	ands.w	r5, r5, #32
 80054c8:	d1fb      	bne.n	80054c2 <Vector14C+0x2a2>
 80054ca:	2012      	movs	r0, #18
 80054cc:	f7fb fcc0 	bl	8000e50 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80054d0:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
  otgp->DIEPEMPMSK = 0;
 80054d4:	f8c6 5834 	str.w	r5, [r6, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80054d8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80054dc:	f8dc 7008 	ldr.w	r7, [ip, #8]
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80054e0:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80054e4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80054e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054ec:	eb06 1345 	add.w	r3, r6, r5, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80054f0:	42af      	cmp	r7, r5
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80054f2:	f8c3 0900 	str.w	r0, [r3, #2304]	; 0x900
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80054f6:	f105 0501 	add.w	r5, r5, #1
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80054fa:	f8c3 0b00 	str.w	r0, [r3, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80054fe:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8005502:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005506:	d1f1      	bne.n	80054ec <Vector14C+0x2cc>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8005508:	f8dc 3000 	ldr.w	r3, [ip]
 800550c:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800550e:	f8dc 2000 	ldr.w	r2, [ip]
  otg_rxfifo_flush(usbp);
 8005512:	6d63      	ldr	r3, [r4, #84]	; 0x54
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8005514:	6272      	str	r2, [r6, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8005516:	2210      	movs	r2, #16
 8005518:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 800551a:	691d      	ldr	r5, [r3, #16]
 800551c:	f015 0510 	ands.w	r5, r5, #16
 8005520:	d1fb      	bne.n	800551a <Vector14C+0x2fa>
 8005522:	2012      	movs	r0, #18
 8005524:	f7fb fc94 	bl	8000e50 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8005528:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800552c:	6861      	ldr	r1, [r4, #4]
  next = usbp->pmnext;
 800552e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005530:	680f      	ldr	r7, [r1, #0]
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8005532:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005536:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800553a:	69b3      	ldr	r3, [r6, #24]
 800553c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005540:	f043 0310 	orr.w	r3, r3, #16
 8005544:	61b3      	str	r3, [r6, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8005546:	2309      	movs	r3, #9
 8005548:	f8c6 3810 	str.w	r3, [r6, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800554c:	f8c6 3814 	str.w	r3, [r6, #2068]	; 0x814
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8005550:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005554:	f8c6 3b10 	str.w	r3, [r6, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8005558:	4b38      	ldr	r3, [pc, #224]	; (800563c <Vector14C+0x41c>)
 800555a:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 800555e:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8005562:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
  usbp->pmnext += size;
 8005566:	f102 0310 	add.w	r3, r2, #16
 800556a:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800556c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  usbp->epc[0] = &ep0config;
 8005570:	4b33      	ldr	r3, [pc, #204]	; (8005640 <Vector14C+0x420>)
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8005572:	62b2      	str	r2, [r6, #40]	; 0x28
  usbp->epc[0] = &ep0config;
 8005574:	60e3      	str	r3, [r4, #12]
 8005576:	2f00      	cmp	r7, #0
 8005578:	f43f aed3 	beq.w	8005322 <Vector14C+0x102>
 800557c:	4629      	mov	r1, r5
 800557e:	4831      	ldr	r0, [pc, #196]	; (8005644 <Vector14C+0x424>)
 8005580:	47b8      	blx	r7
}
 8005582:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8005586:	f7fb bb0b 	b.w	8000ba0 <_port_irq_epilogue>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 800558a:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
 8005596:	e719      	b.n	80053cc <Vector14C+0x1ac>
      otg_epout_handler(usbp, 3);
 8005598:	2003      	movs	r0, #3
 800559a:	f7fb fd49 	bl	8001030 <otg_epout_handler.constprop.0>
  if (sts & GINTSTS_IEPINT) {
 800559e:	036d      	lsls	r5, r5, #13
 80055a0:	f57f aebf 	bpl.w	8005322 <Vector14C+0x102>
 80055a4:	e6b1      	b.n	800530a <Vector14C+0xea>
      otg_epin_handler(usbp, 3);
 80055a6:	2003      	movs	r0, #3
 80055a8:	f7fb fcba 	bl	8000f20 <otg_epin_handler.constprop.0>
}
 80055ac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80055b0:	f7fb baf6 	b.w	8000ba0 <_port_irq_epilogue>
                            usbp->epc[ep]->out_state->rxbuf,
 80055b4:	f103 0a02 	add.w	sl, r3, #2
 80055b8:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 80055c0:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	eba0 0e09 	sub.w	lr, r0, r9
  while (i < n) {
 80055ca:	b1c2      	cbz	r2, 80055fe <Vector14C+0x3de>
      w = *fifop;
 80055cc:	f501 5c80 	add.w	ip, r1, #4096	; 0x1000
  size_t i = 0;
 80055d0:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 80055d2:	0798      	lsls	r0, r3, #30
      w = *fifop;
 80055d4:	bf08      	it	eq
 80055d6:	f8dc 8000 	ldreq.w	r8, [ip]
    if (i < max) {
 80055da:	459e      	cmp	lr, r3
      *buf++ = (uint8_t)w;
 80055dc:	4639      	mov	r1, r7
    i++;
 80055de:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 80055e2:	d904      	bls.n	80055ee <Vector14C+0x3ce>
      *buf++ = (uint8_t)w;
 80055e4:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 80055e8:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 80055ec:	460f      	mov	r7, r1
  while (i < n) {
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d1ef      	bne.n	80055d2 <Vector14C+0x3b2>
 80055f2:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 80055f6:	6863      	ldr	r3, [r4, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
 80055fe:	4417      	add	r7, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8005600:	444a      	add	r2, r9
 8005602:	e9c3 2701 	strd	r2, r7, [r3, #4]
 8005606:	e66e      	b.n	80052e6 <Vector14C+0xc6>
      otg_epout_handler(usbp, 1);
 8005608:	2001      	movs	r0, #1
 800560a:	f7fb fd11 	bl	8001030 <otg_epout_handler.constprop.0>
    if (src & (1 << 18))
 800560e:	0367      	lsls	r7, r4, #13
 8005610:	f57f ae76 	bpl.w	8005300 <Vector14C+0xe0>
      otg_epout_handler(usbp, 2);
 8005614:	2002      	movs	r0, #2
 8005616:	f7fb fd0b 	bl	8001030 <otg_epout_handler.constprop.0>
 800561a:	e671      	b.n	8005300 <Vector14C+0xe0>
      otg_epout_handler(usbp, 0);
 800561c:	2000      	movs	r0, #0
 800561e:	f7fb fd07 	bl	8001030 <otg_epout_handler.constprop.0>
 8005622:	e667      	b.n	80052f4 <Vector14C+0xd4>
      otg_epin_handler(usbp, 2);
 8005624:	2002      	movs	r0, #2
 8005626:	f7fb fc7b 	bl	8000f20 <otg_epin_handler.constprop.0>
 800562a:	e677      	b.n	800531c <Vector14C+0xfc>
      otg_epin_handler(usbp, 1);
 800562c:	2001      	movs	r0, #1
 800562e:	f7fb fc77 	bl	8000f20 <otg_epin_handler.constprop.0>
 8005632:	e670      	b.n	8005316 <Vector14C+0xf6>
      otg_epin_handler(usbp, 0);
 8005634:	2000      	movs	r0, #0
 8005636:	f7fb fc73 	bl	8000f20 <otg_epin_handler.constprop.0>
 800563a:	e669      	b.n	8005310 <Vector14C+0xf0>
 800563c:	10008040 	.word	0x10008040
 8005640:	080063f8 	.word	0x080063f8
 8005644:	2000132c 	.word	0x2000132c
	...

08005650 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8005650:	b4f0      	push	{r4, r5, r6, r7}
 8005652:	4f14      	ldr	r7, [pc, #80]	; (80056a4 <__init_ram_areas+0x54>)
 8005654:	4d14      	ldr	r5, [pc, #80]	; (80056a8 <__init_ram_areas+0x58>)
 8005656:	4815      	ldr	r0, [pc, #84]	; (80056ac <__init_ram_areas+0x5c>)
 8005658:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <__init_ram_areas+0x60>)
 800565a:	4916      	ldr	r1, [pc, #88]	; (80056b4 <__init_ram_areas+0x64>)
 800565c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8005660:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8005662:	4298      	cmp	r0, r3
 8005664:	d911      	bls.n	800568a <__init_ram_areas+0x3a>
 8005666:	3904      	subs	r1, #4
 8005668:	461a      	mov	r2, r3
      *p = *tp;
 800566a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800566e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8005672:	4290      	cmp	r0, r2
 8005674:	d8f9      	bhi.n	800566a <__init_ram_areas+0x1a>
 8005676:	1e42      	subs	r2, r0, #1
 8005678:	1ad2      	subs	r2, r2, r3
 800567a:	f022 0203 	bic.w	r2, r2, #3
 800567e:	3204      	adds	r2, #4
 8005680:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8005682:	429d      	cmp	r5, r3
 8005684:	d903      	bls.n	800568e <__init_ram_areas+0x3e>
      *p = 0;
 8005686:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800568a:	429d      	cmp	r5, r3
 800568c:	d8fb      	bhi.n	8005686 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800568e:	4567      	cmp	r7, ip
 8005690:	d005      	beq.n	800569e <__init_ram_areas+0x4e>
 8005692:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8005696:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 800569a:	3710      	adds	r7, #16
 800569c:	e7e1      	b.n	8005662 <__init_ram_areas+0x12>
#endif
}
 800569e:	bcf0      	pop	{r4, r5, r6, r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	0800648c 	.word	0x0800648c
 80056a8:	2000992c 	.word	0x2000992c
 80056ac:	2000992c 	.word	0x2000992c
 80056b0:	2000992c 	.word	0x2000992c
 80056b4:	08006c5c 	.word	0x08006c5c
	...

080056c0 <__default_exit>:
  while (true) {
 80056c0:	e7fe      	b.n	80056c0 <__default_exit>
 80056c2:	bf00      	nop
	...

080056d0 <__late_init>:
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
	...

080056e0 <__core_init>:
}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop

080056e4 <_strtol_l.isra.0>:
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	4f40      	ldr	r7, [pc, #256]	; (80057ec <_strtol_l.isra.0+0x108>)
 80056ea:	4681      	mov	r9, r0
 80056ec:	460d      	mov	r5, r1
 80056ee:	4628      	mov	r0, r5
 80056f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056f4:	5d3e      	ldrb	r6, [r7, r4]
 80056f6:	f016 0608 	ands.w	r6, r6, #8
 80056fa:	d1f8      	bne.n	80056ee <_strtol_l.isra.0+0xa>
 80056fc:	2c2d      	cmp	r4, #45	; 0x2d
 80056fe:	d04f      	beq.n	80057a0 <_strtol_l.isra.0+0xbc>
 8005700:	2c2b      	cmp	r4, #43	; 0x2b
 8005702:	bf0a      	itet	eq
 8005704:	f895 b000 	ldrbeq.w	fp, [r5]
 8005708:	46a3      	movne	fp, r4
 800570a:	1c85      	addeq	r5, r0, #2
 800570c:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8005710:	b11b      	cbz	r3, 800571a <_strtol_l.isra.0+0x36>
 8005712:	2b10      	cmp	r3, #16
 8005714:	d04b      	beq.n	80057ae <_strtol_l.isra.0+0xca>
 8005716:	469e      	mov	lr, r3
 8005718:	e004      	b.n	8005724 <_strtol_l.isra.0+0x40>
 800571a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800571e:	d050      	beq.n	80057c2 <_strtol_l.isra.0+0xde>
 8005720:	230a      	movs	r3, #10
 8005722:	469e      	mov	lr, r3
 8005724:	2700      	movs	r7, #0
 8005726:	fbb8 fcfe 	udiv	ip, r8, lr
 800572a:	4638      	mov	r0, r7
 800572c:	fb0e 8a1c 	mls	sl, lr, ip, r8
 8005730:	e005      	b.n	800573e <_strtol_l.isra.0+0x5a>
 8005732:	d029      	beq.n	8005788 <_strtol_l.isra.0+0xa4>
 8005734:	fb0e 4000 	mla	r0, lr, r0, r4
 8005738:	2701      	movs	r7, #1
 800573a:	f815 bb01 	ldrb.w	fp, [r5], #1
 800573e:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
 8005742:	2c09      	cmp	r4, #9
 8005744:	d905      	bls.n	8005752 <_strtol_l.isra.0+0x6e>
 8005746:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
 800574a:	2c19      	cmp	r4, #25
 800574c:	d80b      	bhi.n	8005766 <_strtol_l.isra.0+0x82>
 800574e:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
 8005752:	42a3      	cmp	r3, r4
 8005754:	dd0f      	ble.n	8005776 <_strtol_l.isra.0+0x92>
 8005756:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800575a:	d0ee      	beq.n	800573a <_strtol_l.isra.0+0x56>
 800575c:	4584      	cmp	ip, r0
 800575e:	d2e8      	bcs.n	8005732 <_strtol_l.isra.0+0x4e>
 8005760:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005764:	e7e9      	b.n	800573a <_strtol_l.isra.0+0x56>
 8005766:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
 800576a:	2c19      	cmp	r4, #25
 800576c:	d803      	bhi.n	8005776 <_strtol_l.isra.0+0x92>
 800576e:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
 8005772:	42a3      	cmp	r3, r4
 8005774:	dcef      	bgt.n	8005756 <_strtol_l.isra.0+0x72>
 8005776:	1c7b      	adds	r3, r7, #1
 8005778:	d00b      	beq.n	8005792 <_strtol_l.isra.0+0xae>
 800577a:	b106      	cbz	r6, 800577e <_strtol_l.isra.0+0x9a>
 800577c:	4240      	negs	r0, r0
 800577e:	b10a      	cbz	r2, 8005784 <_strtol_l.isra.0+0xa0>
 8005780:	bb77      	cbnz	r7, 80057e0 <_strtol_l.isra.0+0xfc>
 8005782:	6011      	str	r1, [r2, #0]
 8005784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005788:	45a2      	cmp	sl, r4
 800578a:	dad3      	bge.n	8005734 <_strtol_l.isra.0+0x50>
 800578c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005790:	e7d3      	b.n	800573a <_strtol_l.isra.0+0x56>
 8005792:	2322      	movs	r3, #34	; 0x22
 8005794:	f8c9 3000 	str.w	r3, [r9]
 8005798:	b1fa      	cbz	r2, 80057da <_strtol_l.isra.0+0xf6>
 800579a:	1e69      	subs	r1, r5, #1
 800579c:	4640      	mov	r0, r8
 800579e:	e7f0      	b.n	8005782 <_strtol_l.isra.0+0x9e>
 80057a0:	f895 b000 	ldrb.w	fp, [r5]
 80057a4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80057a8:	1c85      	adds	r5, r0, #2
 80057aa:	2601      	movs	r6, #1
 80057ac:	e7b0      	b.n	8005710 <_strtol_l.isra.0+0x2c>
 80057ae:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80057b2:	d1b0      	bne.n	8005716 <_strtol_l.isra.0+0x32>
 80057b4:	7828      	ldrb	r0, [r5, #0]
 80057b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80057ba:	2858      	cmp	r0, #88	; 0x58
 80057bc:	d006      	beq.n	80057cc <_strtol_l.isra.0+0xe8>
 80057be:	469e      	mov	lr, r3
 80057c0:	e7b0      	b.n	8005724 <_strtol_l.isra.0+0x40>
 80057c2:	782b      	ldrb	r3, [r5, #0]
 80057c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80057c8:	2b58      	cmp	r3, #88	; 0x58
 80057ca:	d10b      	bne.n	80057e4 <_strtol_l.isra.0+0x100>
 80057cc:	f04f 0e10 	mov.w	lr, #16
 80057d0:	f895 b001 	ldrb.w	fp, [r5, #1]
 80057d4:	4673      	mov	r3, lr
 80057d6:	3502      	adds	r5, #2
 80057d8:	e7a4      	b.n	8005724 <_strtol_l.isra.0+0x40>
 80057da:	4640      	mov	r0, r8
 80057dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e0:	4680      	mov	r8, r0
 80057e2:	e7da      	b.n	800579a <_strtol_l.isra.0+0xb6>
 80057e4:	2308      	movs	r3, #8
 80057e6:	469e      	mov	lr, r3
 80057e8:	e79c      	b.n	8005724 <_strtol_l.isra.0+0x40>
 80057ea:	bf00      	nop
 80057ec:	08006721 	.word	0x08006721

080057f0 <strtol>:
 80057f0:	b430      	push	{r4, r5}
 80057f2:	4c04      	ldr	r4, [pc, #16]	; (8005804 <strtol+0x14>)
 80057f4:	460d      	mov	r5, r1
 80057f6:	4613      	mov	r3, r2
 80057f8:	4601      	mov	r1, r0
 80057fa:	462a      	mov	r2, r5
 80057fc:	6820      	ldr	r0, [r4, #0]
 80057fe:	bc30      	pop	{r4, r5}
 8005800:	f7ff bf70 	b.w	80056e4 <_strtol_l.isra.0>
 8005804:	20000808 	.word	0x20000808

08005808 <memset>:
 8005808:	b4f0      	push	{r4, r5, r6, r7}
 800580a:	0786      	lsls	r6, r0, #30
 800580c:	d046      	beq.n	800589c <memset+0x94>
 800580e:	1e54      	subs	r4, r2, #1
 8005810:	2a00      	cmp	r2, #0
 8005812:	d03c      	beq.n	800588e <memset+0x86>
 8005814:	b2ca      	uxtb	r2, r1
 8005816:	4603      	mov	r3, r0
 8005818:	e001      	b.n	800581e <memset+0x16>
 800581a:	3c01      	subs	r4, #1
 800581c:	d337      	bcc.n	800588e <memset+0x86>
 800581e:	f803 2b01 	strb.w	r2, [r3], #1
 8005822:	079d      	lsls	r5, r3, #30
 8005824:	d1f9      	bne.n	800581a <memset+0x12>
 8005826:	2c03      	cmp	r4, #3
 8005828:	d92a      	bls.n	8005880 <memset+0x78>
 800582a:	b2cd      	uxtb	r5, r1
 800582c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005830:	2c0f      	cmp	r4, #15
 8005832:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005836:	d934      	bls.n	80058a2 <memset+0x9a>
 8005838:	f1a4 0210 	sub.w	r2, r4, #16
 800583c:	f022 0c0f 	bic.w	ip, r2, #15
 8005840:	f103 0720 	add.w	r7, r3, #32
 8005844:	0916      	lsrs	r6, r2, #4
 8005846:	4467      	add	r7, ip
 8005848:	f103 0210 	add.w	r2, r3, #16
 800584c:	e942 5504 	strd	r5, r5, [r2, #-16]
 8005850:	e942 5502 	strd	r5, r5, [r2, #-8]
 8005854:	3210      	adds	r2, #16
 8005856:	42ba      	cmp	r2, r7
 8005858:	d1f8      	bne.n	800584c <memset+0x44>
 800585a:	1c72      	adds	r2, r6, #1
 800585c:	f014 0f0c 	tst.w	r4, #12
 8005860:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8005864:	f004 060f 	and.w	r6, r4, #15
 8005868:	d013      	beq.n	8005892 <memset+0x8a>
 800586a:	1f33      	subs	r3, r6, #4
 800586c:	f023 0303 	bic.w	r3, r3, #3
 8005870:	3304      	adds	r3, #4
 8005872:	4413      	add	r3, r2
 8005874:	f842 5b04 	str.w	r5, [r2], #4
 8005878:	4293      	cmp	r3, r2
 800587a:	d1fb      	bne.n	8005874 <memset+0x6c>
 800587c:	f006 0403 	and.w	r4, r6, #3
 8005880:	b12c      	cbz	r4, 800588e <memset+0x86>
 8005882:	b2ca      	uxtb	r2, r1
 8005884:	441c      	add	r4, r3
 8005886:	f803 2b01 	strb.w	r2, [r3], #1
 800588a:	429c      	cmp	r4, r3
 800588c:	d1fb      	bne.n	8005886 <memset+0x7e>
 800588e:	bcf0      	pop	{r4, r5, r6, r7}
 8005890:	4770      	bx	lr
 8005892:	4634      	mov	r4, r6
 8005894:	4613      	mov	r3, r2
 8005896:	2c00      	cmp	r4, #0
 8005898:	d1f3      	bne.n	8005882 <memset+0x7a>
 800589a:	e7f8      	b.n	800588e <memset+0x86>
 800589c:	4614      	mov	r4, r2
 800589e:	4603      	mov	r3, r0
 80058a0:	e7c1      	b.n	8005826 <memset+0x1e>
 80058a2:	461a      	mov	r2, r3
 80058a4:	4626      	mov	r6, r4
 80058a6:	e7e0      	b.n	800586a <memset+0x62>

080058a8 <strchr>:
 80058a8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80058ac:	4603      	mov	r3, r0
 80058ae:	d044      	beq.n	800593a <strchr+0x92>
 80058b0:	0782      	lsls	r2, r0, #30
 80058b2:	d132      	bne.n	800591a <strchr+0x72>
 80058b4:	b470      	push	{r4, r5, r6}
 80058b6:	6804      	ldr	r4, [r0, #0]
 80058b8:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80058bc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80058c0:	ea86 0504 	eor.w	r5, r6, r4
 80058c4:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 80058c8:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80058cc:	ea23 0305 	bic.w	r3, r3, r5
 80058d0:	ea22 0204 	bic.w	r2, r2, r4
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80058da:	d10f      	bne.n	80058fc <strchr+0x54>
 80058dc:	f850 4f04 	ldr.w	r4, [r0, #4]!
 80058e0:	ea84 0506 	eor.w	r5, r4, r6
 80058e4:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 80058e8:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 80058ec:	ea22 0205 	bic.w	r2, r2, r5
 80058f0:	ea23 0304 	bic.w	r3, r3, r4
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80058fa:	d0ef      	beq.n	80058dc <strchr+0x34>
 80058fc:	7803      	ldrb	r3, [r0, #0]
 80058fe:	b923      	cbnz	r3, 800590a <strchr+0x62>
 8005900:	e036      	b.n	8005970 <strchr+0xc8>
 8005902:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8005906:	2b00      	cmp	r3, #0
 8005908:	d032      	beq.n	8005970 <strchr+0xc8>
 800590a:	4299      	cmp	r1, r3
 800590c:	d1f9      	bne.n	8005902 <strchr+0x5a>
 800590e:	e030      	b.n	8005972 <strchr+0xca>
 8005910:	428a      	cmp	r2, r1
 8005912:	d011      	beq.n	8005938 <strchr+0x90>
 8005914:	079a      	lsls	r2, r3, #30
 8005916:	4618      	mov	r0, r3
 8005918:	d0cc      	beq.n	80058b4 <strchr+0xc>
 800591a:	4618      	mov	r0, r3
 800591c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005920:	2a00      	cmp	r2, #0
 8005922:	d1f5      	bne.n	8005910 <strchr+0x68>
 8005924:	4610      	mov	r0, r2
 8005926:	4770      	bx	lr
 8005928:	0799      	lsls	r1, r3, #30
 800592a:	4618      	mov	r0, r3
 800592c:	d007      	beq.n	800593e <strchr+0x96>
 800592e:	4618      	mov	r0, r3
 8005930:	3301      	adds	r3, #1
 8005932:	7802      	ldrb	r2, [r0, #0]
 8005934:	2a00      	cmp	r2, #0
 8005936:	d1f7      	bne.n	8005928 <strchr+0x80>
 8005938:	4770      	bx	lr
 800593a:	0782      	lsls	r2, r0, #30
 800593c:	d1f7      	bne.n	800592e <strchr+0x86>
 800593e:	6802      	ldr	r2, [r0, #0]
 8005940:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8005944:	ea23 0302 	bic.w	r3, r3, r2
 8005948:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800594c:	d108      	bne.n	8005960 <strchr+0xb8>
 800594e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005952:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8005956:	ea23 0302 	bic.w	r3, r3, r2
 800595a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800595e:	d0f6      	beq.n	800594e <strchr+0xa6>
 8005960:	7803      	ldrb	r3, [r0, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0e8      	beq.n	8005938 <strchr+0x90>
 8005966:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1fb      	bne.n	8005966 <strchr+0xbe>
 800596e:	4770      	bx	lr
 8005970:	4618      	mov	r0, r3
 8005972:	bc70      	pop	{r4, r5, r6}
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop

08005978 <strpbrk>:
 8005978:	b430      	push	{r4, r5}
 800597a:	7804      	ldrb	r4, [r0, #0]
 800597c:	b1a4      	cbz	r4, 80059a8 <strpbrk+0x30>
 800597e:	780d      	ldrb	r5, [r1, #0]
 8005980:	460a      	mov	r2, r1
 8005982:	462b      	mov	r3, r5
 8005984:	b91d      	cbnz	r5, 800598e <strpbrk+0x16>
 8005986:	e00a      	b.n	800599e <strpbrk+0x26>
 8005988:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800598c:	b13b      	cbz	r3, 800599e <strpbrk+0x26>
 800598e:	429c      	cmp	r4, r3
 8005990:	d1fa      	bne.n	8005988 <strpbrk+0x10>
 8005992:	7813      	ldrb	r3, [r2, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	bf08      	it	eq
 8005998:	2000      	moveq	r0, #0
 800599a:	bc30      	pop	{r4, r5}
 800599c:	4770      	bx	lr
 800599e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80059a2:	2c00      	cmp	r4, #0
 80059a4:	d1ec      	bne.n	8005980 <strpbrk+0x8>
 80059a6:	e7f4      	b.n	8005992 <strpbrk+0x1a>
 80059a8:	4620      	mov	r0, r4
 80059aa:	bc30      	pop	{r4, r5}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop

080059b0 <strspn>:
 80059b0:	b470      	push	{r4, r5, r6}
 80059b2:	7804      	ldrb	r4, [r0, #0]
 80059b4:	b18c      	cbz	r4, 80059da <strspn+0x2a>
 80059b6:	780e      	ldrb	r6, [r1, #0]
 80059b8:	4605      	mov	r5, r0
 80059ba:	b15e      	cbz	r6, 80059d4 <strspn+0x24>
 80059bc:	460a      	mov	r2, r1
 80059be:	4633      	mov	r3, r6
 80059c0:	e002      	b.n	80059c8 <strspn+0x18>
 80059c2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80059c6:	b12b      	cbz	r3, 80059d4 <strspn+0x24>
 80059c8:	42a3      	cmp	r3, r4
 80059ca:	d1fa      	bne.n	80059c2 <strspn+0x12>
 80059cc:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80059d0:	2c00      	cmp	r4, #0
 80059d2:	d1f2      	bne.n	80059ba <strspn+0xa>
 80059d4:	1a28      	subs	r0, r5, r0
 80059d6:	bc70      	pop	{r4, r5, r6}
 80059d8:	4770      	bx	lr
 80059da:	4620      	mov	r0, r4
 80059dc:	e7fb      	b.n	80059d6 <strspn+0x26>
 80059de:	bf00      	nop

080059e0 <two_way_long_needle>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	461d      	mov	r5, r3
 80059e8:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 80059ec:	4681      	mov	r9, r0
 80059ee:	460f      	mov	r7, r1
 80059f0:	4690      	mov	r8, r2
 80059f2:	f04f 0301 	mov.w	r3, #1
 80059f6:	f240 8144 	bls.w	8005c82 <two_way_long_needle+0x2a2>
 80059fa:	4619      	mov	r1, r3
 80059fc:	469c      	mov	ip, r3
 80059fe:	2400      	movs	r4, #0
 8005a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a04:	e006      	b.n	8005a14 <two_way_long_needle+0x34>
 8005a06:	eba3 0c00 	sub.w	ip, r3, r0
 8005a0a:	461c      	mov	r4, r3
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	1863      	adds	r3, r4, r1
 8005a10:	429d      	cmp	r5, r3
 8005a12:	d910      	bls.n	8005a36 <two_way_long_needle+0x56>
 8005a14:	eb08 0200 	add.w	r2, r8, r0
 8005a18:	f818 6003 	ldrb.w	r6, [r8, r3]
 8005a1c:	5c52      	ldrb	r2, [r2, r1]
 8005a1e:	4296      	cmp	r6, r2
 8005a20:	d3f1      	bcc.n	8005a06 <two_way_long_needle+0x26>
 8005a22:	f000 8082 	beq.w	8005b2a <two_way_long_needle+0x14a>
 8005a26:	f04f 0c01 	mov.w	ip, #1
 8005a2a:	4661      	mov	r1, ip
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4464      	add	r4, ip
 8005a30:	1863      	adds	r3, r4, r1
 8005a32:	429d      	cmp	r5, r3
 8005a34:	d8ee      	bhi.n	8005a14 <two_way_long_needle+0x34>
 8005a36:	f8cd c008 	str.w	ip, [sp, #8]
 8005a3a:	f04f 0c01 	mov.w	ip, #1
 8005a3e:	4661      	mov	r1, ip
 8005a40:	4663      	mov	r3, ip
 8005a42:	2400      	movs	r4, #0
 8005a44:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005a48:	e006      	b.n	8005a58 <two_way_long_needle+0x78>
 8005a4a:	eba3 0c06 	sub.w	ip, r3, r6
 8005a4e:	461c      	mov	r4, r3
 8005a50:	2101      	movs	r1, #1
 8005a52:	1863      	adds	r3, r4, r1
 8005a54:	429d      	cmp	r5, r3
 8005a56:	d90f      	bls.n	8005a78 <two_way_long_needle+0x98>
 8005a58:	eb08 0201 	add.w	r2, r8, r1
 8005a5c:	f818 e003 	ldrb.w	lr, [r8, r3]
 8005a60:	5d92      	ldrb	r2, [r2, r6]
 8005a62:	4596      	cmp	lr, r2
 8005a64:	d8f1      	bhi.n	8005a4a <two_way_long_needle+0x6a>
 8005a66:	d066      	beq.n	8005b36 <two_way_long_needle+0x156>
 8005a68:	f04f 0c01 	mov.w	ip, #1
 8005a6c:	4661      	mov	r1, ip
 8005a6e:	4626      	mov	r6, r4
 8005a70:	4464      	add	r4, ip
 8005a72:	1863      	adds	r3, r4, r1
 8005a74:	429d      	cmp	r5, r3
 8005a76:	d8ef      	bhi.n	8005a58 <two_way_long_needle+0x78>
 8005a78:	3601      	adds	r6, #1
 8005a7a:	f100 0b01 	add.w	fp, r0, #1
 8005a7e:	455e      	cmp	r6, fp
 8005a80:	d302      	bcc.n	8005a88 <two_way_long_needle+0xa8>
 8005a82:	f8cd c008 	str.w	ip, [sp, #8]
 8005a86:	46b3      	mov	fp, r6
 8005a88:	ab05      	add	r3, sp, #20
 8005a8a:	f20d 4214 	addw	r2, sp, #1044	; 0x414
 8005a8e:	f843 5f04 	str.w	r5, [r3, #4]!
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d1fb      	bne.n	8005a8e <two_way_long_needle+0xae>
 8005a96:	2d00      	cmp	r5, #0
 8005a98:	f000 80f7 	beq.w	8005c8a <two_way_long_needle+0x2aa>
 8005a9c:	1e6c      	subs	r4, r5, #1
 8005a9e:	ae06      	add	r6, sp, #24
 8005aa0:	eb08 0004 	add.w	r0, r8, r4
 8005aa4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8005aa8:	9601      	str	r6, [sp, #4]
 8005aaa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005aae:	43d3      	mvns	r3, r2
 8005ab0:	442b      	add	r3, r5
 8005ab2:	4443      	add	r3, r8
 8005ab4:	4290      	cmp	r0, r2
 8005ab6:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
 8005aba:	d1f6      	bne.n	8005aaa <two_way_long_needle+0xca>
 8005abc:	9b02      	ldr	r3, [sp, #8]
 8005abe:	465a      	mov	r2, fp
 8005ac0:	eb08 0103 	add.w	r1, r8, r3
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	f000 f997 	bl	8005df8 <memcmp>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	f040 8081 	bne.w	8005bd2 <two_way_long_needle+0x1f2>
 8005ad0:	9b02      	ldr	r3, [sp, #8]
 8005ad2:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8005ad6:	1aeb      	subs	r3, r5, r3
 8005ad8:	4682      	mov	sl, r0
 8005ada:	4606      	mov	r6, r0
 8005adc:	9205      	str	r2, [sp, #20]
 8005ade:	9303      	str	r3, [sp, #12]
 8005ae0:	eb09 0e06 	add.w	lr, r9, r6
 8005ae4:	9a01      	ldr	r2, [sp, #4]
 8005ae6:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8005aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aee:	b343      	cbz	r3, 8005b42 <two_way_long_needle+0x162>
 8005af0:	f1ba 0f00 	cmp.w	sl, #0
 8005af4:	d004      	beq.n	8005b00 <two_way_long_needle+0x120>
 8005af6:	9a02      	ldr	r2, [sp, #8]
 8005af8:	4293      	cmp	r3, r2
 8005afa:	9a03      	ldr	r2, [sp, #12]
 8005afc:	bf38      	it	cc
 8005afe:	4613      	movcc	r3, r2
 8005b00:	441e      	add	r6, r3
 8005b02:	f04f 0a00 	mov.w	sl, #0
 8005b06:	1b7b      	subs	r3, r7, r5
 8005b08:	42b3      	cmp	r3, r6
 8005b0a:	d2e9      	bcs.n	8005ae0 <two_way_long_needle+0x100>
 8005b0c:	eb09 0007 	add.w	r0, r9, r7
 8005b10:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
 8005b14:	f000 f9a0 	bl	8005e58 <strnlen>
 8005b18:	4407      	add	r7, r0
 8005b1a:	1b7b      	subs	r3, r7, r5
 8005b1c:	42b3      	cmp	r3, r6
 8005b1e:	d2df      	bcs.n	8005ae0 <two_way_long_needle+0x100>
 8005b20:	2000      	movs	r0, #0
 8005b22:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8005b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2a:	458c      	cmp	ip, r1
 8005b2c:	bf12      	itee	ne
 8005b2e:	3101      	addne	r1, #1
 8005b30:	4464      	addeq	r4, ip
 8005b32:	2101      	moveq	r1, #1
 8005b34:	e76b      	b.n	8005a0e <two_way_long_needle+0x2e>
 8005b36:	4561      	cmp	r1, ip
 8005b38:	bf0a      	itet	eq
 8005b3a:	1864      	addeq	r4, r4, r1
 8005b3c:	3101      	addne	r1, #1
 8005b3e:	2101      	moveq	r1, #1
 8005b40:	e787      	b.n	8005a52 <two_way_long_needle+0x72>
 8005b42:	45d3      	cmp	fp, sl
 8005b44:	465b      	mov	r3, fp
 8005b46:	bf38      	it	cc
 8005b48:	4653      	movcc	r3, sl
 8005b4a:	42a3      	cmp	r3, r4
 8005b4c:	d211      	bcs.n	8005b72 <two_way_long_needle+0x192>
 8005b4e:	1e59      	subs	r1, r3, #1
 8005b50:	199a      	adds	r2, r3, r6
 8005b52:	4441      	add	r1, r8
 8005b54:	444a      	add	r2, r9
 8005b56:	e002      	b.n	8005b5e <two_way_long_needle+0x17e>
 8005b58:	3301      	adds	r3, #1
 8005b5a:	42a3      	cmp	r3, r4
 8005b5c:	d209      	bcs.n	8005b72 <two_way_long_needle+0x192>
 8005b5e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005b62:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005b66:	4584      	cmp	ip, r0
 8005b68:	d0f6      	beq.n	8005b58 <two_way_long_needle+0x178>
 8005b6a:	f1cb 0201 	rsb	r2, fp, #1
 8005b6e:	4416      	add	r6, r2
 8005b70:	e7c6      	b.n	8005b00 <two_way_long_needle+0x120>
 8005b72:	45d3      	cmp	fp, sl
 8005b74:	9b05      	ldr	r3, [sp, #20]
 8005b76:	d97d      	bls.n	8005c74 <two_way_long_needle+0x294>
 8005b78:	eb0b 0206 	add.w	r2, fp, r6
 8005b7c:	444a      	add	r2, r9
 8005b7e:	eb08 010b 	add.w	r1, r8, fp
 8005b82:	f8cd b010 	str.w	fp, [sp, #16]
 8005b86:	e002      	b.n	8005b8e <two_way_long_needle+0x1ae>
 8005b88:	4553      	cmp	r3, sl
 8005b8a:	d016      	beq.n	8005bba <two_way_long_needle+0x1da>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8005b92:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8005b96:	4584      	cmp	ip, r0
 8005b98:	f103 0b01 	add.w	fp, r3, #1
 8005b9c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8005ba0:	d0f2      	beq.n	8005b88 <two_way_long_needle+0x1a8>
 8005ba2:	465b      	mov	r3, fp
 8005ba4:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005ba8:	f10a 0a01 	add.w	sl, sl, #1
 8005bac:	459a      	cmp	sl, r3
 8005bae:	d80b      	bhi.n	8005bc8 <two_way_long_needle+0x1e8>
 8005bb0:	9b02      	ldr	r3, [sp, #8]
 8005bb2:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8005bb6:	441e      	add	r6, r3
 8005bb8:	e7a5      	b.n	8005b06 <two_way_long_needle+0x126>
 8005bba:	4653      	mov	r3, sl
 8005bbc:	f10a 0a01 	add.w	sl, sl, #1
 8005bc0:	459a      	cmp	sl, r3
 8005bc2:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005bc6:	d9f3      	bls.n	8005bb0 <two_way_long_needle+0x1d0>
 8005bc8:	4670      	mov	r0, lr
 8005bca:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8005bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd2:	eba5 030b 	sub.w	r3, r5, fp
 8005bd6:	455b      	cmp	r3, fp
 8005bd8:	bf38      	it	cc
 8005bda:	465b      	movcc	r3, fp
 8005bdc:	3301      	adds	r3, #1
 8005bde:	9304      	str	r3, [sp, #16]
 8005be0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005be4:	9302      	str	r3, [sp, #8]
 8005be6:	f1cb 0301 	rsb	r3, fp, #1
 8005bea:	2600      	movs	r6, #0
 8005bec:	9303      	str	r3, [sp, #12]
 8005bee:	f445 6a00 	orr.w	sl, r5, #2048	; 0x800
 8005bf2:	eb09 0e06 	add.w	lr, r9, r6
 8005bf6:	9a01      	ldr	r2, [sp, #4]
 8005bf8:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8005bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c00:	b16b      	cbz	r3, 8005c1e <two_way_long_needle+0x23e>
 8005c02:	441e      	add	r6, r3
 8005c04:	1b7b      	subs	r3, r7, r5
 8005c06:	429e      	cmp	r6, r3
 8005c08:	d9f3      	bls.n	8005bf2 <two_way_long_needle+0x212>
 8005c0a:	eb09 0007 	add.w	r0, r9, r7
 8005c0e:	4651      	mov	r1, sl
 8005c10:	f000 f922 	bl	8005e58 <strnlen>
 8005c14:	4407      	add	r7, r0
 8005c16:	1b7b      	subs	r3, r7, r5
 8005c18:	429e      	cmp	r6, r3
 8005c1a:	d9ea      	bls.n	8005bf2 <two_way_long_needle+0x212>
 8005c1c:	e780      	b.n	8005b20 <two_way_long_needle+0x140>
 8005c1e:	45a3      	cmp	fp, r4
 8005c20:	d214      	bcs.n	8005c4c <two_way_long_needle+0x26c>
 8005c22:	9b02      	ldr	r3, [sp, #8]
 8005c24:	eb0b 0206 	add.w	r2, fp, r6
 8005c28:	eb08 0103 	add.w	r1, r8, r3
 8005c2c:	444a      	add	r2, r9
 8005c2e:	465b      	mov	r3, fp
 8005c30:	e002      	b.n	8005c38 <two_way_long_needle+0x258>
 8005c32:	3301      	adds	r3, #1
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	d209      	bcs.n	8005c4c <two_way_long_needle+0x26c>
 8005c38:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005c3c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005c40:	4584      	cmp	ip, r0
 8005c42:	d0f6      	beq.n	8005c32 <two_way_long_needle+0x252>
 8005c44:	9a03      	ldr	r2, [sp, #12]
 8005c46:	4416      	add	r6, r2
 8005c48:	441e      	add	r6, r3
 8005c4a:	e7db      	b.n	8005c04 <two_way_long_needle+0x224>
 8005c4c:	f1bb 0f00 	cmp.w	fp, #0
 8005c50:	d012      	beq.n	8005c78 <two_way_long_needle+0x298>
 8005c52:	eb0b 0106 	add.w	r1, fp, r6
 8005c56:	4449      	add	r1, r9
 8005c58:	eb08 020b 	add.w	r2, r8, fp
 8005c5c:	e001      	b.n	8005c62 <two_way_long_needle+0x282>
 8005c5e:	4543      	cmp	r3, r8
 8005c60:	d00a      	beq.n	8005c78 <two_way_long_needle+0x298>
 8005c62:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
 8005c66:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8005c6a:	4584      	cmp	ip, r0
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	d0f6      	beq.n	8005c5e <two_way_long_needle+0x27e>
 8005c70:	9b04      	ldr	r3, [sp, #16]
 8005c72:	e7c6      	b.n	8005c02 <two_way_long_needle+0x222>
 8005c74:	465b      	mov	r3, fp
 8005c76:	e797      	b.n	8005ba8 <two_way_long_needle+0x1c8>
 8005c78:	4670      	mov	r0, lr
 8005c7a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	9302      	str	r3, [sp, #8]
 8005c84:	f04f 0b00 	mov.w	fp, #0
 8005c88:	e6fe      	b.n	8005a88 <two_way_long_needle+0xa8>
 8005c8a:	ab06      	add	r3, sp, #24
 8005c8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	e713      	b.n	8005abc <two_way_long_needle+0xdc>

08005c94 <strstr>:
 8005c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c98:	460e      	mov	r6, r1
 8005c9a:	7809      	ldrb	r1, [r1, #0]
 8005c9c:	b090      	sub	sp, #64	; 0x40
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	d050      	beq.n	8005d46 <strstr+0xb2>
 8005ca4:	7872      	ldrb	r2, [r6, #1]
 8005ca6:	2a00      	cmp	r2, #0
 8005ca8:	f000 8082 	beq.w	8005db0 <strstr+0x11c>
 8005cac:	78b3      	ldrb	r3, [r6, #2]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d04d      	beq.n	8005d4e <strstr+0xba>
 8005cb2:	78f0      	ldrb	r0, [r6, #3]
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	f000 8082 	beq.w	8005dbe <strstr+0x12a>
 8005cba:	7933      	ldrb	r3, [r6, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d054      	beq.n	8005d6a <strstr+0xd6>
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7fa fd3d 	bl	8000740 <strlen>
 8005cc6:	4607      	mov	r7, r0
 8005cc8:	f440 7100 	orr.w	r1, r0, #512	; 0x200
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 f8c3 	bl	8005e58 <strnlen>
 8005cd2:	4287      	cmp	r7, r0
 8005cd4:	d867      	bhi.n	8005da6 <strstr+0x112>
 8005cd6:	2ffe      	cmp	r7, #254	; 0xfe
 8005cd8:	f200 8085 	bhi.w	8005de6 <strstr+0x152>
 8005cdc:	eba0 0807 	sub.w	r8, r0, r7
 8005ce0:	2240      	movs	r2, #64	; 0x40
 8005ce2:	1c79      	adds	r1, r7, #1
 8005ce4:	4668      	mov	r0, sp
 8005ce6:	44a0      	add	r8, r4
 8005ce8:	f7ff fd8e 	bl	8005808 <memset>
 8005cec:	b177      	cbz	r7, 8005d0c <strstr+0x78>
 8005cee:	1e72      	subs	r2, r6, #1
 8005cf0:	19d5      	adds	r5, r2, r7
 8005cf2:	b2f8      	uxtb	r0, r7
 8005cf4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005cf8:	a910      	add	r1, sp, #64	; 0x40
 8005cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cfe:	440b      	add	r3, r1
 8005d00:	1ab1      	subs	r1, r6, r2
 8005d02:	4401      	add	r1, r0
 8005d04:	42aa      	cmp	r2, r5
 8005d06:	f803 1c40 	strb.w	r1, [r3, #-64]
 8005d0a:	d1f3      	bne.n	8005cf4 <strstr+0x60>
 8005d0c:	3c01      	subs	r4, #1
 8005d0e:	aa10      	add	r2, sp, #64	; 0x40
 8005d10:	5de3      	ldrb	r3, [r4, r7]
 8005d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d16:	4413      	add	r3, r2
 8005d18:	f813 0c40 	ldrb.w	r0, [r3, #-64]
 8005d1c:	4404      	add	r4, r0
 8005d1e:	45a0      	cmp	r8, r4
 8005d20:	d203      	bcs.n	8005d2a <strstr+0x96>
 8005d22:	e034      	b.n	8005d8e <strstr+0xfa>
 8005d24:	442c      	add	r4, r5
 8005d26:	45a0      	cmp	r8, r4
 8005d28:	d331      	bcc.n	8005d8e <strstr+0xfa>
 8005d2a:	5de5      	ldrb	r5, [r4, r7]
 8005d2c:	ab10      	add	r3, sp, #64	; 0x40
 8005d2e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8005d32:	441d      	add	r5, r3
 8005d34:	463a      	mov	r2, r7
 8005d36:	4631      	mov	r1, r6
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f815 5c40 	ldrb.w	r5, [r5, #-64]
 8005d3e:	f000 f85b 	bl	8005df8 <memcmp>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d1ee      	bne.n	8005d24 <strstr+0x90>
 8005d46:	4620      	mov	r0, r4
 8005d48:	b010      	add	sp, #64	; 0x40
 8005d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d4e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8005d52:	7802      	ldrb	r2, [r0, #0]
 8005d54:	e000      	b.n	8005d58 <strstr+0xc4>
 8005d56:	4604      	mov	r4, r0
 8005d58:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8005d5c:	1c60      	adds	r0, r4, #1
 8005d5e:	b312      	cbz	r2, 8005da6 <strstr+0x112>
 8005d60:	4299      	cmp	r1, r3
 8005d62:	7862      	ldrb	r2, [r4, #1]
 8005d64:	d1f7      	bne.n	8005d56 <strstr+0xc2>
 8005d66:	3c01      	subs	r4, #1
 8005d68:	e7ed      	b.n	8005d46 <strstr+0xb2>
 8005d6a:	7822      	ldrb	r2, [r4, #0]
 8005d6c:	b1da      	cbz	r2, 8005da6 <strstr+0x112>
 8005d6e:	6831      	ldr	r1, [r6, #0]
 8005d70:	ba09      	rev	r1, r1
 8005d72:	e001      	b.n	8005d78 <strstr+0xe4>
 8005d74:	4299      	cmp	r1, r3
 8005d76:	d008      	beq.n	8005d8a <strstr+0xf6>
 8005d78:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8005d82:	2a00      	cmp	r2, #0
 8005d84:	d1f6      	bne.n	8005d74 <strstr+0xe0>
 8005d86:	4299      	cmp	r1, r3
 8005d88:	d10d      	bne.n	8005da6 <strstr+0x112>
 8005d8a:	1ec4      	subs	r4, r0, #3
 8005d8c:	e7db      	b.n	8005d46 <strstr+0xb2>
 8005d8e:	f818 3007 	ldrb.w	r3, [r8, r7]
 8005d92:	eb08 0007 	add.w	r0, r8, r7
 8005d96:	b133      	cbz	r3, 8005da6 <strstr+0x112>
 8005d98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d9c:	f000 f85c 	bl	8005e58 <strnlen>
 8005da0:	4480      	add	r8, r0
 8005da2:	4544      	cmp	r4, r8
 8005da4:	d9b2      	bls.n	8005d0c <strstr+0x78>
 8005da6:	2400      	movs	r4, #0
 8005da8:	4620      	mov	r0, r4
 8005daa:	b010      	add	sp, #64	; 0x40
 8005dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db0:	f7ff fd7a 	bl	80058a8 <strchr>
 8005db4:	4604      	mov	r4, r0
 8005db6:	4620      	mov	r0, r4
 8005db8:	b010      	add	sp, #64	; 0x40
 8005dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dbe:	0412      	lsls	r2, r2, #16
 8005dc0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005dc4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005dc8:	7822      	ldrb	r2, [r4, #0]
 8005dca:	e000      	b.n	8005dce <strstr+0x13a>
 8005dcc:	462c      	mov	r4, r5
 8005dce:	ea42 0100 	orr.w	r1, r2, r0
 8005dd2:	1c65      	adds	r5, r4, #1
 8005dd4:	0208      	lsls	r0, r1, #8
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	d0e5      	beq.n	8005da6 <strstr+0x112>
 8005dda:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 8005dde:	7862      	ldrb	r2, [r4, #1]
 8005de0:	d1f4      	bne.n	8005dcc <strstr+0x138>
 8005de2:	3c02      	subs	r4, #2
 8005de4:	e7af      	b.n	8005d46 <strstr+0xb2>
 8005de6:	4601      	mov	r1, r0
 8005de8:	463b      	mov	r3, r7
 8005dea:	4620      	mov	r0, r4
 8005dec:	4632      	mov	r2, r6
 8005dee:	f7ff fdf7 	bl	80059e0 <two_way_long_needle>
 8005df2:	4604      	mov	r4, r0
 8005df4:	e7a7      	b.n	8005d46 <strstr+0xb2>
 8005df6:	bf00      	nop

08005df8 <memcmp>:
 8005df8:	2a03      	cmp	r2, #3
 8005dfa:	b470      	push	{r4, r5, r6}
 8005dfc:	d912      	bls.n	8005e24 <memcmp+0x2c>
 8005dfe:	ea40 0501 	orr.w	r5, r0, r1
 8005e02:	07ad      	lsls	r5, r5, #30
 8005e04:	4604      	mov	r4, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	d11e      	bne.n	8005e48 <memcmp+0x50>
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e12:	f854 6b04 	ldr.w	r6, [r4], #4
 8005e16:	42ae      	cmp	r6, r5
 8005e18:	d116      	bne.n	8005e48 <memcmp+0x50>
 8005e1a:	3a04      	subs	r2, #4
 8005e1c:	2a03      	cmp	r2, #3
 8005e1e:	4620      	mov	r0, r4
 8005e20:	4619      	mov	r1, r3
 8005e22:	d8f2      	bhi.n	8005e0a <memcmp+0x12>
 8005e24:	1e56      	subs	r6, r2, #1
 8005e26:	b1a2      	cbz	r2, 8005e52 <memcmp+0x5a>
 8005e28:	3901      	subs	r1, #1
 8005e2a:	1e44      	subs	r4, r0, #1
 8005e2c:	e001      	b.n	8005e32 <memcmp+0x3a>
 8005e2e:	18c3      	adds	r3, r0, r3
 8005e30:	d00c      	beq.n	8005e4c <memcmp+0x54>
 8005e32:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8005e36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005e3a:	4295      	cmp	r5, r2
 8005e3c:	eba6 0304 	sub.w	r3, r6, r4
 8005e40:	d0f5      	beq.n	8005e2e <memcmp+0x36>
 8005e42:	1aa8      	subs	r0, r5, r2
 8005e44:	bc70      	pop	{r4, r5, r6}
 8005e46:	4770      	bx	lr
 8005e48:	1e56      	subs	r6, r2, #1
 8005e4a:	e7ed      	b.n	8005e28 <memcmp+0x30>
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	bc70      	pop	{r4, r5, r6}
 8005e50:	4770      	bx	lr
 8005e52:	4610      	mov	r0, r2
 8005e54:	e7f6      	b.n	8005e44 <memcmp+0x4c>
 8005e56:	bf00      	nop

08005e58 <strnlen>:
 8005e58:	b181      	cbz	r1, 8005e7c <strnlen+0x24>
 8005e5a:	b410      	push	{r4}
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	1844      	adds	r4, r0, r1
 8005e60:	e001      	b.n	8005e66 <strnlen+0xe>
 8005e62:	42a3      	cmp	r3, r4
 8005e64:	d007      	beq.n	8005e76 <strnlen+0x1e>
 8005e66:	461a      	mov	r2, r3
 8005e68:	3301      	adds	r3, #1
 8005e6a:	7811      	ldrb	r1, [r2, #0]
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	d1f8      	bne.n	8005e62 <strnlen+0xa>
 8005e70:	1a10      	subs	r0, r2, r0
 8005e72:	bc10      	pop	{r4}
 8005e74:	4770      	bx	lr
 8005e76:	1a18      	subs	r0, r3, r0
 8005e78:	bc10      	pop	{r4}
 8005e7a:	4770      	bx	lr
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4770      	bx	lr
